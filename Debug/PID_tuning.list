
PID_tuning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000750  0800c628  0800c628  0000d628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd78  0800cd78  0000e1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd78  0800cd78  0000dd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd80  0800cd80  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd80  0800cd80  0000dd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd84  0800cd84  0000dd84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800cd88  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200001d8  0800cf60  0000e1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800cf60  0000e674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001061c  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b14  00000000  00000000  0001e824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  00021338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7d  00000000  00000000  00022358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024466  00000000  00000000  00022fd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a11  00000000  00000000  0004743b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5736  00000000  00000000  0005be4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131582  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  001315c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  001370f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c610 	.word	0x0800c610

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800c610 	.word	0x0800c610

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <wallLeft>:

#include "IR_driver.h"
#include "main.h"


int wallLeft() {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(LEFT_IR_GPIO_Port, LEFT_IR_Pin);
 8001028:	2104      	movs	r1, #4
 800102a:	4805      	ldr	r0, [pc, #20]	@ (8001040 <wallLeft+0x1c>)
 800102c:	f002 fdd2 	bl	8003bd4 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	bf0c      	ite	eq
 8001036:	2301      	moveq	r3, #1
 8001038:	2300      	movne	r3, #0
 800103a:	b2db      	uxtb	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020800 	.word	0x40020800

08001044 <wallRight>:

int wallRight() {
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(RIGHT_IR_GPIO_Port, RIGHT_IR_Pin);
 8001048:	2102      	movs	r1, #2
 800104a:	4805      	ldr	r0, [pc, #20]	@ (8001060 <wallRight+0x1c>)
 800104c:	f002 fdc2 	bl	8003bd4 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	bf0c      	ite	eq
 8001056:	2301      	moveq	r3, #1
 8001058:	2300      	movne	r3, #0
 800105a:	b2db      	uxtb	r3, r3
}
 800105c:	4618      	mov	r0, r3
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020800 	.word	0x40020800

08001064 <wallFront>:

int wallFront() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(FRONT_IR_GPIO_Port, FRONT_IR_Pin);
 8001068:	2101      	movs	r1, #1
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <wallFront+0x1c>)
 800106c:	f002 fdb2 	bl	8003bd4 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	bf0c      	ite	eq
 8001076:	2301      	moveq	r3, #1
 8001078:	2300      	movne	r3, #0
 800107a:	b2db      	uxtb	r3, r3
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40020800 	.word	0x40020800

08001084 <Encoder_Reset>:
#include "stm32f4xx_hal.h"
#include <stdatomic.h>



void Encoder_Reset(encoder *enc) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
    enc->position = 0;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
    enc->last_count = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
    enc->rpm = 0.0f;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    atomic_flag_clear(&enc->is_initialized);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3310      	adds	r3, #16
 80010a4:	f3bf 8f5b 	dmb	ish
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
 80010ac:	f3bf 8f5b 	dmb	ish
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <Encoder_Update>:
void Encoder_Init(encoder *enc, TIM_HandleTypeDef *htim) {
    atomic_init(&enc->max_count, htim->Instance->ARR); // Set once here
    atomic_flag_clear(&enc->is_initialized);
}

void Encoder_Update(encoder *enc, TIM_HandleTypeDef *htim, float dt, float counts_per_rev, int8_t dir) {
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	@ 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6178      	str	r0, [r7, #20]
 80010c4:	6139      	str	r1, [r7, #16]
 80010c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80010ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80010ce:	4613      	mov	r3, r2
 80010d0:	71fb      	strb	r3, [r7, #7]
    uint32_t current_count = __HAL_TIM_GET_COUNTER(htim);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d8:	61fb      	str	r3, [r7, #28]

    if (!atomic_flag_test_and_set(&enc->is_initialized)) {
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3310      	adds	r3, #16
 80010de:	2201      	movs	r2, #1
 80010e0:	4611      	mov	r1, r2
 80010e2:	f3bf 8f5b 	dmb	ish
 80010e6:	e8d3 2f4f 	ldrexb	r2, [r3]
 80010ea:	e8c3 1f40 	strexb	r0, r1, [r3]
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d1f9      	bne.n	80010e6 <Encoder_Update+0x2a>
 80010f2:	f3bf 8f5b 	dmb	ish
 80010f6:	b2d3      	uxtb	r3, r2
 80010f8:	f083 0301 	eor.w	r3, r3, #1
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <Encoder_Update+0x4e>
        enc->last_count = current_count;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	69fa      	ldr	r2, [r7, #28]
 8001106:	605a      	str	r2, [r3, #4]
        return;
 8001108:	e027      	b.n	800115a <Encoder_Update+0x9e>
    }

    int32_t delta = (int32_t)(current_count - enc->last_count);
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	61bb      	str	r3, [r7, #24]
    delta *= dir;
 8001114:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	61bb      	str	r3, [r7, #24]
    enc->position += delta;
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	441a      	add	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	601a      	str	r2, [r3, #0]
    enc->last_count = current_count;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	605a      	str	r2, [r3, #4]
    enc->rpm = (delta * 60.0f) / (counts_per_rev * dt);
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	ee07 3a90 	vmov	s15, r3
 8001138:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001164 <Encoder_Update+0xa8>
 8001140:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001144:	ed97 7a02 	vldr	s14, [r7, #8]
 8001148:	edd7 7a03 	vldr	s15, [r7, #12]
 800114c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800115a:	3724      	adds	r7, #36	@ 0x24
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	42700000 	.word	0x42700000

08001168 <calculate_lpf_coefficients>:
#include "lpf.h"
#include <math.h>

LPF_Coef calculate_lpf_coefficients(float fc, float fs, float Q){
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	ed87 0a02 	vstr	s0, [r7, #8]
 8001174:	edc7 0a01 	vstr	s1, [r7, #4]
 8001178:	ed87 1a00 	vstr	s2, [r7]

    LPF_Coef coef;

    // Pre-warping for bilinear transform
    float omega0 = 2 * M_PI * fc / fs;  // Digital cutoff frequency
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fa03 	bl	8000588 <__aeabi_f2d>
 8001182:	a37c      	add	r3, pc, #496	@ (adr r3, 8001374 <calculate_lpf_coefficients+0x20c>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa56 	bl	8000638 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4614      	mov	r4, r2
 8001192:	461d      	mov	r5, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff f9f7 	bl	8000588 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4620      	mov	r0, r4
 80011a0:	4629      	mov	r1, r5
 80011a2:	f7ff fb73 	bl	800088c <__aeabi_ddiv>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fd3b 	bl	8000c28 <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44
    float alpha = sin(omega0) / (2 * Q);
 80011b6:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011b8:	f7ff f9e6 	bl	8000588 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	ec43 2b10 	vmov	d0, r2, r3
 80011c4:	f00a f8ec 	bl	800b3a0 <sin>
 80011c8:	ec55 4b10 	vmov	r4, r5, d0
 80011cc:	edd7 7a00 	vldr	s15, [r7]
 80011d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011d4:	ee17 0a90 	vmov	r0, s15
 80011d8:	f7ff f9d6 	bl	8000588 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	f7ff fb52 	bl	800088c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd1a 	bl	8000c28 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40

    // Compute raw coefficients
    float b0_raw = (1 - cos(omega0)) / 2;
 80011f8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80011fa:	f7ff f9c5 	bl	8000588 <__aeabi_f2d>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b10 	vmov	d0, r2, r3
 8001206:	f00a f877 	bl	800b2f8 <cos>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	f04f 0000 	mov.w	r0, #0
 8001212:	4957      	ldr	r1, [pc, #348]	@ (8001370 <calculate_lpf_coefficients+0x208>)
 8001214:	f7ff f858 	bl	80002c8 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001228:	f7ff fb30 	bl	800088c <__aeabi_ddiv>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	4610      	mov	r0, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f7ff fcf8 	bl	8000c28 <__aeabi_d2f>
 8001238:	4603      	mov	r3, r0
 800123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float b1_raw = 1 - cos(omega0);
 800123c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800123e:	f7ff f9a3 	bl	8000588 <__aeabi_f2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b10 	vmov	d0, r2, r3
 800124a:	f00a f855 	bl	800b2f8 <cos>
 800124e:	ec53 2b10 	vmov	r2, r3, d0
 8001252:	f04f 0000 	mov.w	r0, #0
 8001256:	4946      	ldr	r1, [pc, #280]	@ (8001370 <calculate_lpf_coefficients+0x208>)
 8001258:	f7ff f836 	bl	80002c8 <__aeabi_dsub>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fce0 	bl	8000c28 <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
    float b2_raw = (1 - cos(omega0)) / 2;
 800126c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800126e:	f7ff f98b 	bl	8000588 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	ec43 2b10 	vmov	d0, r2, r3
 800127a:	f00a f83d 	bl	800b2f8 <cos>
 800127e:	ec53 2b10 	vmov	r2, r3, d0
 8001282:	f04f 0000 	mov.w	r0, #0
 8001286:	493a      	ldr	r1, [pc, #232]	@ (8001370 <calculate_lpf_coefficients+0x208>)
 8001288:	f7ff f81e 	bl	80002c8 <__aeabi_dsub>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129c:	f7ff faf6 	bl	800088c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fcbe 	bl	8000c28 <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	637b      	str	r3, [r7, #52]	@ 0x34
    float a0 = 1 + alpha;
 80012b0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float a1_raw = -2 * cos(omega0);
 80012c0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80012c2:	f7ff f961 	bl	8000588 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	ec43 2b10 	vmov	d0, r2, r3
 80012ce:	f00a f813 	bl	800b2f8 <cos>
 80012d2:	ec51 0b10 	vmov	r0, r1, d0
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 80012de:	f7ff f9ab 	bl	8000638 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff fc9d 	bl	8000c28 <__aeabi_d2f>
 80012ee:	4603      	mov	r3, r0
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    float a2_raw = 1 - alpha;
 80012f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80012fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012fe:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

    // Normalize coefficients by a0
    coef.b0 = b0_raw / a0;
 8001302:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001306:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800130a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800130e:	edc7 7a05 	vstr	s15, [r7, #20]
    coef.b1 = b1_raw / a0;
 8001312:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001316:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800131a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131e:	edc7 7a06 	vstr	s15, [r7, #24]
    coef.b2 = b2_raw / a0;
 8001322:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8001326:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800132a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800132e:	edc7 7a07 	vstr	s15, [r7, #28]
    coef.a1 = a1_raw / a0;
 8001332:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8001336:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800133a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133e:	edc7 7a08 	vstr	s15, [r7, #32]
    coef.a2 = a2_raw / a0;
 8001342:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001346:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800134a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    return coef;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	461d      	mov	r5, r3
 8001356:	f107 0414 	add.w	r4, r7, #20
 800135a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800135e:	6823      	ldr	r3, [r4, #0]
 8001360:	602b      	str	r3, [r5, #0]
}
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	3748      	adds	r7, #72	@ 0x48
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	3ff00000 	.word	0x3ff00000
 8001374:	54442d18 	.word	0x54442d18
 8001378:	401921fb 	.word	0x401921fb

0800137c <lpf_process>:
//    }
//}
//


float lpf_process(float input, LPF_State* state, float b0, float b1, float b2, float a1, float a2){
 800137c:	b480      	push	{r7}
 800137e:	b08b      	sub	sp, #44	@ 0x2c
 8001380:	af00      	add	r7, sp, #0
 8001382:	ed87 0a07 	vstr	s0, [r7, #28]
 8001386:	61b8      	str	r0, [r7, #24]
 8001388:	edc7 0a05 	vstr	s1, [r7, #20]
 800138c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001390:	edc7 1a03 	vstr	s3, [r7, #12]
 8001394:	ed87 2a02 	vstr	s4, [r7, #8]
 8001398:	edc7 2a01 	vstr	s5, [r7, #4]
    float output =
        b0 * input +
 800139c:	ed97 7a05 	vldr	s14, [r7, #20]
 80013a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80013a4:	ee27 7a27 	vmul.f32	s14, s14, s15
        b1 * state->x1 +
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	edd3 6a00 	vldr	s13, [r3]
 80013ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
        b0 * input +
 80013b6:	ee37 7a27 	vadd.f32	s14, s14, s15
        b2 * state->x2 -
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80013c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
        b1 * state->x1 +
 80013c8:	ee37 7a27 	vadd.f32	s14, s14, s15
        a1 * state->y1 -
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80013d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
        b2 * state->x2 -
 80013da:	ee37 7a67 	vsub.f32	s14, s14, s15
        a2 * state->y2;
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80013e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float output =
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    state->x2 = state->x1;   // x[n-2] = x[n-1]
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
    state->x1 = input;       // x[n-1] = x[n]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	69fa      	ldr	r2, [r7, #28]
 8001400:	601a      	str	r2, [r3, #0]
    state->y2 = state->y1;   // y[n-2] = y[n-1]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	60da      	str	r2, [r3, #12]
    state->y1 = output;      // y[n-1] = y[n]
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800140e:	609a      	str	r2, [r3, #8]

    return output;
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	ee07 3a90 	vmov	s15, r3
}
 8001416:	eeb0 0a67 	vmov.f32	s0, s15
 800141a:	372c      	adds	r7, #44	@ 0x2c
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <lsm6dsox_init>:
float heading = 0.0f;
uint32_t previous_time = 0;
float gyro_bias = 0.0f; // Calibrated gyroscope bias


HAL_StatusTypeDef lsm6dsox_init(lsm6dsox_t *lsm6dsox, I2C_HandleTypeDef *i2c, uint8_t *buf, uint8_t bufsize) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	70fb      	strb	r3, [r7, #3]
	HAL_StatusTypeDef status;

	lsm6dsox->i2c_addr_r = (LSM6DSOX_ADDR_BASE << 1) | LSM6DSOX_ADDR_READ_BIT;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	22d5      	movs	r2, #213	@ 0xd5
 8001436:	701a      	strb	r2, [r3, #0]
	lsm6dsox->i2c_addr_w = (LSM6DSOX_ADDR_BASE << 1) | LSM6DSOX_ADDR_WRITE_BIT;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	22d4      	movs	r2, #212	@ 0xd4
 800143c:	705a      	strb	r2, [r3, #1]
	lsm6dsox->i2c = i2c;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	609a      	str	r2, [r3, #8]
	lsm6dsox->buf = buf;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	605a      	str	r2, [r3, #4]
	lsm6dsox->bufsize = bufsize;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	78fa      	ldrb	r2, [r7, #3]
 800144e:	709a      	strb	r2, [r3, #2]

	// Wake up.
	HAL_Delay(LSM6DSOX_POWER_UP_MS);
 8001450:	2014      	movs	r0, #20
 8001452:	f002 f8f5 	bl	8003640 <HAL_Delay>

	status = HAL_I2C_IsDeviceReady(lsm6dsox->i2c, LSM6DSOX_ADDR_BASE << 1, 1, TIMEOUT_MS);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6898      	ldr	r0, [r3, #8]
 800145a:	2332      	movs	r3, #50	@ 0x32
 800145c:	2201      	movs	r2, #1
 800145e:	21d4      	movs	r1, #212	@ 0xd4
 8001460:	f003 f840 	bl	80044e4 <HAL_I2C_IsDeviceReady>
 8001464:	4603      	mov	r3, r0
 8001466:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <lsm6dsox_init+0x4e>
 800146e:	7dfb      	ldrb	r3, [r7, #23]
 8001470:	e013      	b.n	800149a <lsm6dsox_init+0x76>

	// I am who I am.
	status = lsm6dsox_read(lsm6dsox, REG_WHO_AM_I, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	210f      	movs	r1, #15
 8001476:	68f8      	ldr	r0, [r7, #12]
 8001478:	f000 f813 	bl	80014a2 <lsm6dsox_read>
 800147c:	4603      	mov	r3, r0
 800147e:	75fb      	strb	r3, [r7, #23]
	if (status != HAL_OK) return status;
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <lsm6dsox_init+0x66>
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	e007      	b.n	800149a <lsm6dsox_init+0x76>
	if (lsm6dsox->buf[0] != LSM6DSOX_DEVICE_ID) return HAL_ERROR;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b6c      	cmp	r3, #108	@ 0x6c
 8001492:	d001      	beq.n	8001498 <lsm6dsox_init+0x74>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <lsm6dsox_init+0x76>

	return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <lsm6dsox_read>:

bool lsm6dsox_data_available(lsm6dsox_t *lsm6dsox) {
	return false;
}

HAL_StatusTypeDef lsm6dsox_read(lsm6dsox_t *lsm6dsox, uint8_t reg, uint8_t bufsize) {
 80014a2:	b5b0      	push	{r4, r5, r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af04      	add	r7, sp, #16
 80014a8:	6078      	str	r0, [r7, #4]
 80014aa:	460b      	mov	r3, r1
 80014ac:	70fb      	strb	r3, [r7, #3]
 80014ae:	4613      	mov	r3, r2
 80014b0:	70bb      	strb	r3, [r7, #2]
	if (bufsize > lsm6dsox->bufsize) return HAL_ERROR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	78ba      	ldrb	r2, [r7, #2]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d901      	bls.n	80014c0 <lsm6dsox_read+0x1e>
 80014bc:	2301      	movs	r3, #1
 80014be:	e014      	b.n	80014ea <lsm6dsox_read+0x48>

	return HAL_I2C_Mem_Read(lsm6dsox->i2c, lsm6dsox->i2c_addr_r, reg, 1, lsm6dsox->buf, bufsize, TIMEOUT_MS);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6898      	ldr	r0, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461d      	mov	r5, r3
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	b299      	uxth	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	78ba      	ldrb	r2, [r7, #2]
 80014d4:	b292      	uxth	r2, r2
 80014d6:	2432      	movs	r4, #50	@ 0x32
 80014d8:	9402      	str	r4, [sp, #8]
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2301      	movs	r3, #1
 80014e0:	460a      	mov	r2, r1
 80014e2:	4629      	mov	r1, r5
 80014e4:	f002 fdcc 	bl	8004080 <HAL_I2C_Mem_Read>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}

080014f2 <lsm6dsox_write>:

HAL_StatusTypeDef lsm6dsox_write(lsm6dsox_t *lsm6dsox, uint8_t reg, uint8_t data) {
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af04      	add	r7, sp, #16
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	460b      	mov	r3, r1
 80014fc:	70fb      	strb	r3, [r7, #3]
 80014fe:	4613      	mov	r3, r2
 8001500:	70bb      	strb	r3, [r7, #2]
	return HAL_I2C_Mem_Write(lsm6dsox->i2c, lsm6dsox->i2c_addr_w, reg, 1, &data, 1, TIMEOUT_MS);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6898      	ldr	r0, [r3, #8]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	785b      	ldrb	r3, [r3, #1]
 800150a:	4619      	mov	r1, r3
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	b29a      	uxth	r2, r3
 8001510:	2332      	movs	r3, #50	@ 0x32
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	1cbb      	adds	r3, r7, #2
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	f002 fcb5 	bl	8003e8c <HAL_I2C_Mem_Write>
 8001522:	4603      	mov	r3, r0
}
 8001524:	4618      	mov	r0, r3
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	0000      	movs	r0, r0
	...

08001530 <getGZ_dps>:

      return gy_dps;

}

float getGZ_dps(uint8_t lsm6dsox_buf[6]) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
      int16_t gz_raw = (int16_t)(lsm6dsox_buf[5] << 8 | lsm6dsox_buf[4]);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3305      	adds	r3, #5
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3304      	adds	r3, #4
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	81fb      	strh	r3, [r7, #14]
      float gz_dps = gz_raw * 0.00875f; // ±250dps range
 800154e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80015a0 <getGZ_dps+0x70>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	edc7 7a02 	vstr	s15, [r7, #8]

      return gz_dps + 2.2178*0.0841;
 8001566:	68b8      	ldr	r0, [r7, #8]
 8001568:	f7ff f80e 	bl	8000588 <__aeabi_f2d>
 800156c:	a30a      	add	r3, pc, #40	@ (adr r3, 8001598 <getGZ_dps+0x68>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe feab 	bl	80002cc <__adddf3>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb53 	bl	8000c28 <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	ee07 3a90 	vmov	s15, r3

}
 8001588:	eeb0 0a67 	vmov.f32	s0, s15
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	f3af 8000 	nop.w
 8001598:	d49fd4f2 	.word	0xd49fd4f2
 800159c:	3fc7dfc9 	.word	0x3fc7dfc9
 80015a0:	3c0f5c29 	.word	0x3c0f5c29
 80015a4:	00000000 	.word	0x00000000

080015a8 <wrap_angle>:

float wrap_angle(float angle) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
    angle = fmod(angle, 360.0f);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7fe ffe8 	bl	8000588 <__aeabi_f2d>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 8001630 <wrap_angle+0x88>
 80015c0:	ec43 2b10 	vmov	d0, r2, r3
 80015c4:	f009 fe68 	bl	800b298 <fmod>
 80015c8:	ec53 2b10 	vmov	r2, r3, d0
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fb2a 	bl	8000c28 <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	607b      	str	r3, [r7, #4]
    if (angle > 180.0f) angle -= 360.0f;
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001638 <wrap_angle+0x90>
 80015e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e8:	dd08      	ble.n	80015fc <wrap_angle+0x54>
 80015ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ee:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800163c <wrap_angle+0x94>
 80015f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015f6:	edc7 7a01 	vstr	s15, [r7, #4]
 80015fa:	e010      	b.n	800161e <wrap_angle+0x76>
    else if (angle < -180.0f) angle += 360.0f;
 80015fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001600:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001640 <wrap_angle+0x98>
 8001604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d507      	bpl.n	800161e <wrap_angle+0x76>
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800163c <wrap_angle+0x94>
 8001616:	ee77 7a87 	vadd.f32	s15, s15, s14
 800161a:	edc7 7a01 	vstr	s15, [r7, #4]
    return angle;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	ee07 3a90 	vmov	s15, r3
}
 8001624:	eeb0 0a67 	vmov.f32	s0, s15
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	00000000 	.word	0x00000000
 8001634:	40768000 	.word	0x40768000
 8001638:	43340000 	.word	0x43340000
 800163c:	43b40000 	.word	0x43b40000
 8001640:	c3340000 	.word	0xc3340000

08001644 <HAL_TIM_PeriodElapsedCallback>:

volatile uint8_t pid_update_flag = 0; // set in TIM6 ISR

#define COUNTS_PER_REV  1400.0f

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	@ (8001668 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d102      	bne.n	800165c <HAL_TIM_PeriodElapsedCallback+0x18>
    	pid_update_flag = 1;
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
    }
//    } else if (htim->Instance == TIM7) {
//    	sampling_flg = 1;
//    }
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40001000 	.word	0x40001000
 800166c:	200002e8 	.word	0x200002e8

08001670 <lsm6dsox_enable_accel>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef lsm6dsox_enable_accel(lsm6dsox_t *dev) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    // CTRL1_XL: ODR=104Hz (0x4), FS=±2g (0x0), LPF1=ODR/4 (0x1)
    uint8_t data = 0x41; // 01000001
 8001678:	2341      	movs	r3, #65	@ 0x41
 800167a:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status = lsm6dsox_write(dev, REG_CTRL1_XL, data);
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	461a      	mov	r2, r3
 8001680:	2110      	movs	r1, #16
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ff35 	bl	80014f2 <lsm6dsox_write>
 8001688:	4603      	mov	r3, r0
 800168a:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 800168c:	7bbb      	ldrb	r3, [r7, #14]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <lsm6dsox_enable_accel+0x26>
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	e008      	b.n	80016a8 <lsm6dsox_enable_accel+0x38>

    // CTRL8_XL: Enable LPF2 with bandwidth=ODR/4 (26Hz)
    data = 0x02; // 00000010
 8001696:	2302      	movs	r3, #2
 8001698:	73fb      	strb	r3, [r7, #15]
    return lsm6dsox_write(dev, REG_CTRL8_XL, data);
 800169a:	7bfb      	ldrb	r3, [r7, #15]
 800169c:	461a      	mov	r2, r3
 800169e:	2117      	movs	r1, #23
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ff26 	bl	80014f2 <lsm6dsox_write>
 80016a6:	4603      	mov	r3, r0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <lsm6dsox_enable_gyro>:

// Gyroscope: 104Hz, ±250dps, LPF1 enabled
HAL_StatusTypeDef lsm6dsox_enable_gyro(lsm6dsox_t *dev) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    // CTRL2_G: ODR=104Hz (0x4), FS=250dps (0x0)
    uint8_t data = 0x44; // 01000100 (ODR=104Hz, FS=250dps)
 80016b8:	2344      	movs	r3, #68	@ 0x44
 80016ba:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status = lsm6dsox_write(dev, REG_CTRL2_G, data);
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	461a      	mov	r2, r3
 80016c0:	2111      	movs	r1, #17
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ff15 	bl	80014f2 <lsm6dsox_write>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73bb      	strb	r3, [r7, #14]
    if (status != HAL_OK) return status;
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <lsm6dsox_enable_gyro+0x26>
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	e008      	b.n	80016e8 <lsm6dsox_enable_gyro+0x38>

    // CTRL6_C: Gyro LPF1 bandwidth=ODR/4 (26Hz)
    data = 0x00; // FTYPE[1:0]=00 (LPF1 bandwidth=ODR/4)
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
    return lsm6dsox_write(dev, REG_CTRL6_C, data);
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	461a      	mov	r2, r3
 80016de:	2115      	movs	r1, #21
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff06 	bl	80014f2 <lsm6dsox_write>
 80016e6:	4603      	mov	r3, r0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <moveForward>:


void moveForward() {
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b09a      	sub	sp, #104	@ 0x68
 80016f4:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80016f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016fa:	f001 ffa1 	bl	8003640 <HAL_Delay>
	float displacement = 0;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	667b      	str	r3, [r7, #100]	@ 0x64
	LPF_Coef coeffs_left = calculate_lpf_coefficients(10.0, 1000.0, 0.707);
 8001704:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001708:	ed9f 1a95 	vldr	s2, [pc, #596]	@ 8001960 <moveForward+0x270>
 800170c:	eddf 0a95 	vldr	s1, [pc, #596]	@ 8001964 <moveForward+0x274>
 8001710:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fd27 	bl	8001168 <calculate_lpf_coefficients>
	LPF_Coef coeffs_right= calculate_lpf_coefficients(10.0, 1000.0, 0.707);
 800171a:	f107 0320 	add.w	r3, r7, #32
 800171e:	ed9f 1a90 	vldr	s2, [pc, #576]	@ 8001960 <moveForward+0x270>
 8001722:	eddf 0a90 	vldr	s1, [pc, #576]	@ 8001964 <moveForward+0x274>
 8001726:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd1c 	bl	8001168 <calculate_lpf_coefficients>
	LPF_State state_left = {0, 0, 0, 0};
 8001730:	f107 0310 	add.w	r3, r7, #16
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
	LPF_State state_right = {0, 0, 0, 0};
 800173e:	463b      	mov	r3, r7
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
	Encoder_Reset(&left_enc);
 800174a:	4887      	ldr	r0, [pc, #540]	@ (8001968 <moveForward+0x278>)
 800174c:	f7ff fc9a 	bl	8001084 <Encoder_Reset>
	Encoder_Reset(&right_enc);
 8001750:	4886      	ldr	r0, [pc, #536]	@ (800196c <moveForward+0x27c>)
 8001752:	f7ff fc97 	bl	8001084 <Encoder_Reset>

	float angle_deg = 0;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	663b      	str	r3, [r7, #96]	@ 0x60
	int angle = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001760:	4b83      	ldr	r3, [pc, #524]	@ (8001970 <moveForward+0x280>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001768:	4b82      	ldr	r3, [pc, #520]	@ (8001974 <moveForward+0x284>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	@ 0x24
	while (displacement < 43){
 8001770:	e0cd      	b.n	800190e <moveForward+0x21e>
		if (pid_update_flag){
 8001772:	4b81      	ldr	r3, [pc, #516]	@ (8001978 <moveForward+0x288>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	f000 80c8 	beq.w	800190e <moveForward+0x21e>

			pid_update_flag = 0;
 800177e:	4b7e      	ldr	r3, [pc, #504]	@ (8001978 <moveForward+0x288>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]

			Encoder_Update(&right_enc, &htim4, 0.001, COUNTS_PER_REV, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 800197c <moveForward+0x28c>
 800178a:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 8001980 <moveForward+0x290>
 800178e:	4979      	ldr	r1, [pc, #484]	@ (8001974 <moveForward+0x284>)
 8001790:	4876      	ldr	r0, [pc, #472]	@ (800196c <moveForward+0x27c>)
 8001792:	f7ff fc93 	bl	80010bc <Encoder_Update>
			Encoder_Update(&left_enc,  &htim1, 0.001, COUNTS_PER_REV, 1);
 8001796:	2201      	movs	r2, #1
 8001798:	eddf 0a78 	vldr	s1, [pc, #480]	@ 800197c <moveForward+0x28c>
 800179c:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8001980 <moveForward+0x290>
 80017a0:	4973      	ldr	r1, [pc, #460]	@ (8001970 <moveForward+0x280>)
 80017a2:	4871      	ldr	r0, [pc, #452]	@ (8001968 <moveForward+0x278>)
 80017a4:	f7ff fc8a 	bl	80010bc <Encoder_Update>
			float left_rpm = left_enc.rpm;
 80017a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001968 <moveForward+0x278>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	65bb      	str	r3, [r7, #88]	@ 0x58
			float right_rpm = right_enc.rpm;
 80017ae:	4b6f      	ldr	r3, [pc, #444]	@ (800196c <moveForward+0x27c>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	657b      	str	r3, [r7, #84]	@ 0x54
			float left = lpf_process(left_rpm, &state_left, coeffs_left.b0, coeffs_left.b1, coeffs_left.b2, coeffs_left.a1, coeffs_left.a2);
 80017b4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80017b8:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80017bc:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80017c0:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 80017c4:	edd7 5a11 	vldr	s11, [r7, #68]	@ 0x44
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	eef0 2a65 	vmov.f32	s5, s11
 80017d0:	eeb0 2a46 	vmov.f32	s4, s12
 80017d4:	eef0 1a66 	vmov.f32	s3, s13
 80017d8:	eeb0 1a47 	vmov.f32	s2, s14
 80017dc:	eef0 0a67 	vmov.f32	s1, s15
 80017e0:	4618      	mov	r0, r3
 80017e2:	ed97 0a16 	vldr	s0, [r7, #88]	@ 0x58
 80017e6:	f7ff fdc9 	bl	800137c <lpf_process>
 80017ea:	ed87 0a14 	vstr	s0, [r7, #80]	@ 0x50
			float right = lpf_process(right_rpm, &state_right, coeffs_right.b0, coeffs_right.b1, coeffs_right.b2, coeffs_right.a1, coeffs_right.a2);
 80017ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80017f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80017f6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80017fa:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80017fe:	edd7 5a0c 	vldr	s11, [r7, #48]	@ 0x30
 8001802:	463b      	mov	r3, r7
 8001804:	eef0 2a65 	vmov.f32	s5, s11
 8001808:	eeb0 2a46 	vmov.f32	s4, s12
 800180c:	eef0 1a66 	vmov.f32	s3, s13
 8001810:	eeb0 1a47 	vmov.f32	s2, s14
 8001814:	eef0 0a67 	vmov.f32	s1, s15
 8001818:	4618      	mov	r0, r3
 800181a:	ed97 0a15 	vldr	s0, [r7, #84]	@ 0x54
 800181e:	f7ff fdad 	bl	800137c <lpf_process>
 8001822:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
			float setval = 200;
 8001826:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <moveForward+0x294>)
 8001828:	64bb      	str	r3, [r7, #72]	@ 0x48
			displacement = displacement + (0.5* (left + right) * 13.195 / 60) * 0.001;
 800182a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800182c:	f7fe feac 	bl	8000588 <__aeabi_f2d>
 8001830:	4604      	mov	r4, r0
 8001832:	460d      	mov	r5, r1
 8001834:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8001838:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800183c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001840:	ee17 0a90 	vmov	r0, s15
 8001844:	f7fe fea0 	bl	8000588 <__aeabi_f2d>
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	4b4e      	ldr	r3, [pc, #312]	@ (8001988 <moveForward+0x298>)
 800184e:	f7fe fef3 	bl	8000638 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	a33b      	add	r3, pc, #236	@ (adr r3, 8001948 <moveForward+0x258>)
 800185c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001860:	f7fe feea 	bl	8000638 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b46      	ldr	r3, [pc, #280]	@ (800198c <moveForward+0x29c>)
 8001872:	f7ff f80b 	bl	800088c <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	a334      	add	r3, pc, #208	@ (adr r3, 8001950 <moveForward+0x260>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed8 	bl	8000638 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd1c 	bl	80002cc <__adddf3>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9c4 	bl	8000c28 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	667b      	str	r3, [r7, #100]	@ 0x64

			PID_Update(&pid_left, setval , left,  0.001);
 80018a4:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8001980 <moveForward+0x290>
 80018a8:	edd7 0a14 	vldr	s1, [r7, #80]	@ 0x50
 80018ac:	ed97 0a12 	vldr	s0, [r7, #72]	@ 0x48
 80018b0:	4837      	ldr	r0, [pc, #220]	@ (8001990 <moveForward+0x2a0>)
 80018b2:	f000 fd1f 	bl	80022f4 <PID_Update>
			PID_Update(&pid_right, setval + 1.7 , right, 0.001);
 80018b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	a326      	add	r3, pc, #152	@ (adr r3, 8001958 <moveForward+0x268>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fd03 	bl	80002cc <__adddf3>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4610      	mov	r0, r2
 80018cc:	4619      	mov	r1, r3
 80018ce:	f7ff f9ab 	bl	8000c28 <__aeabi_d2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8001980 <moveForward+0x290>
 80018d8:	edd7 0a13 	vldr	s1, [r7, #76]	@ 0x4c
 80018dc:	ee00 3a10 	vmov	s0, r3
 80018e0:	482c      	ldr	r0, [pc, #176]	@ (8001994 <moveForward+0x2a4>)
 80018e2:	f000 fd07 	bl	80022f4 <PID_Update>


			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, pid_left.output);
 80018e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001990 <moveForward+0x2a0>)
 80018e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80018ec:	eeb0 0a67 	vmov.f32	s0, s15
 80018f0:	2204      	movs	r2, #4
 80018f2:	2100      	movs	r1, #0
 80018f4:	4828      	ldr	r0, [pc, #160]	@ (8001998 <moveForward+0x2a8>)
 80018f6:	f000 fdc5 	bl	8002484 <Motor_SetMotorPWM>
			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, pid_right.output);
 80018fa:	4b26      	ldr	r3, [pc, #152]	@ (8001994 <moveForward+0x2a4>)
 80018fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001900:	eeb0 0a67 	vmov.f32	s0, s15
 8001904:	220c      	movs	r2, #12
 8001906:	2108      	movs	r1, #8
 8001908:	4823      	ldr	r0, [pc, #140]	@ (8001998 <moveForward+0x2a8>)
 800190a:	f000 fdbb 	bl	8002484 <Motor_SetMotorPWM>
	while (displacement < 43){
 800190e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001912:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800199c <moveForward+0x2ac>
 8001916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191e:	f53f af28 	bmi.w	8001772 <moveForward+0x82>
		}
	}


    Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 8001922:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80019a0 <moveForward+0x2b0>
 8001926:	2204      	movs	r2, #4
 8001928:	2100      	movs	r1, #0
 800192a:	481b      	ldr	r0, [pc, #108]	@ (8001998 <moveForward+0x2a8>)
 800192c:	f000 fdaa 	bl	8002484 <Motor_SetMotorPWM>
	Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 8001930:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 80019a0 <moveForward+0x2b0>
 8001934:	220c      	movs	r2, #12
 8001936:	2108      	movs	r1, #8
 8001938:	4817      	ldr	r0, [pc, #92]	@ (8001998 <moveForward+0x2a8>)
 800193a:	f000 fda3 	bl	8002484 <Motor_SetMotorPWM>
}
 800193e:	bf00      	nop
 8001940:	3768      	adds	r7, #104	@ 0x68
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	0a3d70a4 	.word	0x0a3d70a4
 800194c:	402a63d7 	.word	0x402a63d7
 8001950:	d2f1a9fc 	.word	0xd2f1a9fc
 8001954:	3f50624d 	.word	0x3f50624d
 8001958:	33333333 	.word	0x33333333
 800195c:	3ffb3333 	.word	0x3ffb3333
 8001960:	3f34fdf4 	.word	0x3f34fdf4
 8001964:	447a0000 	.word	0x447a0000
 8001968:	200001f4 	.word	0x200001f4
 800196c:	20000208 	.word	0x20000208
 8001970:	20000340 	.word	0x20000340
 8001974:	200003d0 	.word	0x200003d0
 8001978:	200002e8 	.word	0x200002e8
 800197c:	44af0000 	.word	0x44af0000
 8001980:	3a83126f 	.word	0x3a83126f
 8001984:	43480000 	.word	0x43480000
 8001988:	3fe00000 	.word	0x3fe00000
 800198c:	404e0000 	.word	0x404e0000
 8001990:	2000021c 	.word	0x2000021c
 8001994:	20000264 	.word	0x20000264
 8001998:	20000388 	.word	0x20000388
 800199c:	422c0000 	.word	0x422c0000
	...

080019a8 <turnRight>:

void turnRight() {
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80019ae:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80019b2:	f001 fe45 	bl	8003640 <HAL_Delay>
	float angle_deg = 0;
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
	int angle = 0;
 80019bc:	2300      	movs	r3, #0
 80019be:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80019c0:	4b39      	ldr	r3, [pc, #228]	@ (8001aa8 <turnRight+0x100>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2200      	movs	r2, #0
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80019c8:	4b38      	ldr	r3, [pc, #224]	@ (8001aac <turnRight+0x104>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24
	while (angle < 91) {
 80019d0:	e04f      	b.n	8001a72 <turnRight+0xca>
		if (pid_update_flag){
 80019d2:	4b37      	ldr	r3, [pc, #220]	@ (8001ab0 <turnRight+0x108>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d04a      	beq.n	8001a72 <turnRight+0xca>

			status = lsm6dsox_read(&lsm6dsox, REG_OUTX_L_G, 6);
 80019dc:	2206      	movs	r2, #6
 80019de:	2122      	movs	r1, #34	@ 0x22
 80019e0:	4834      	ldr	r0, [pc, #208]	@ (8001ab4 <turnRight+0x10c>)
 80019e2:	f7ff fd5e 	bl	80014a2 <lsm6dsox_read>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b33      	ldr	r3, [pc, #204]	@ (8001ab8 <turnRight+0x110>)
 80019ec:	701a      	strb	r2, [r3, #0]
			if (status == HAL_OK) {
 80019ee:	4b32      	ldr	r3, [pc, #200]	@ (8001ab8 <turnRight+0x110>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d12f      	bne.n	8001a56 <turnRight+0xae>
				gz_dps = getGZ_dps(lsm6dsox_buf);
 80019f6:	4831      	ldr	r0, [pc, #196]	@ (8001abc <turnRight+0x114>)
 80019f8:	f7ff fd9a 	bl	8001530 <getGZ_dps>
 80019fc:	eef0 7a40 	vmov.f32	s15, s0
 8001a00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac0 <turnRight+0x118>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]

				angle_deg += (gz_dps *0.002);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fdbe 	bl	8000588 <__aeabi_f2d>
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	460d      	mov	r5, r1
 8001a10:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac0 <turnRight+0x118>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fdb7 	bl	8000588 <__aeabi_f2d>
 8001a1a:	a321      	add	r3, pc, #132	@ (adr r3, 8001aa0 <turnRight+0xf8>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fe0a 	bl	8000638 <__aeabi_dmul>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4620      	mov	r0, r4
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	f7fe fc4e 	bl	80002cc <__adddf3>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	4610      	mov	r0, r2
 8001a36:	4619      	mov	r1, r3
 8001a38:	f7ff f8f6 	bl	8000c28 <__aeabi_d2f>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	607b      	str	r3, [r7, #4]
				angle = (int) wrap_angle(angle_deg);
 8001a40:	ed97 0a01 	vldr	s0, [r7, #4]
 8001a44:	f7ff fdb0 	bl	80015a8 <wrap_angle>
 8001a48:	eef0 7a40 	vmov.f32	s15, s0
 8001a4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a50:	ee17 3a90 	vmov	r3, s15
 8001a54:	603b      	str	r3, [r7, #0]

			}

			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, -70);
 8001a56:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001ac4 <turnRight+0x11c>
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	481a      	ldr	r0, [pc, #104]	@ (8001ac8 <turnRight+0x120>)
 8001a60:	f000 fd10 	bl	8002484 <Motor_SetMotorPWM>
			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 70);
 8001a64:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001acc <turnRight+0x124>
 8001a68:	220c      	movs	r2, #12
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4816      	ldr	r0, [pc, #88]	@ (8001ac8 <turnRight+0x120>)
 8001a6e:	f000 fd09 	bl	8002484 <Motor_SetMotorPWM>
	while (angle < 91) {
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b5a      	cmp	r3, #90	@ 0x5a
 8001a76:	ddac      	ble.n	80019d2 <turnRight+0x2a>
		}

	}
    Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 8001a78:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001ad0 <turnRight+0x128>
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4811      	ldr	r0, [pc, #68]	@ (8001ac8 <turnRight+0x120>)
 8001a82:	f000 fcff 	bl	8002484 <Motor_SetMotorPWM>
	Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 8001a86:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8001ad0 <turnRight+0x128>
 8001a8a:	220c      	movs	r2, #12
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	480e      	ldr	r0, [pc, #56]	@ (8001ac8 <turnRight+0x120>)
 8001a90:	f000 fcf8 	bl	8002484 <Motor_SetMotorPWM>

}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001aa4:	3f60624d 	.word	0x3f60624d
 8001aa8:	20000340 	.word	0x20000340
 8001aac:	200003d0 	.word	0x200003d0
 8001ab0:	200002e8 	.word	0x200002e8
 8001ab4:	200002b8 	.word	0x200002b8
 8001ab8:	200002e0 	.word	0x200002e0
 8001abc:	200002ac 	.word	0x200002ac
 8001ac0:	200002e4 	.word	0x200002e4
 8001ac4:	c28c0000 	.word	0xc28c0000
 8001ac8:	20000388 	.word	0x20000388
 8001acc:	428c0000 	.word	0x428c0000
	...

08001ad8 <turnLeft>:
void turnLeft() {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8001ade:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ae2:	f001 fdad 	bl	8003640 <HAL_Delay>
	float angle_deg = 0;
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	607b      	str	r3, [r7, #4]
	int angle = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001af0:	4b39      	ldr	r3, [pc, #228]	@ (8001bd8 <turnLeft+0x100>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001af8:	4b38      	ldr	r3, [pc, #224]	@ (8001bdc <turnLeft+0x104>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24
	while (angle > -92) {
 8001b00:	e04f      	b.n	8001ba2 <turnLeft+0xca>
		if (pid_update_flag){
 8001b02:	4b37      	ldr	r3, [pc, #220]	@ (8001be0 <turnLeft+0x108>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d04a      	beq.n	8001ba2 <turnLeft+0xca>

			status = lsm6dsox_read(&lsm6dsox, REG_OUTX_L_G, 6);
 8001b0c:	2206      	movs	r2, #6
 8001b0e:	2122      	movs	r1, #34	@ 0x22
 8001b10:	4834      	ldr	r0, [pc, #208]	@ (8001be4 <turnLeft+0x10c>)
 8001b12:	f7ff fcc6 	bl	80014a2 <lsm6dsox_read>
 8001b16:	4603      	mov	r3, r0
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <turnLeft+0x110>)
 8001b1c:	701a      	strb	r2, [r3, #0]
			if (status == HAL_OK) {
 8001b1e:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <turnLeft+0x110>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d12f      	bne.n	8001b86 <turnLeft+0xae>
				gz_dps = getGZ_dps(lsm6dsox_buf);
 8001b26:	4831      	ldr	r0, [pc, #196]	@ (8001bec <turnLeft+0x114>)
 8001b28:	f7ff fd02 	bl	8001530 <getGZ_dps>
 8001b2c:	eef0 7a40 	vmov.f32	s15, s0
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <turnLeft+0x118>)
 8001b32:	edc3 7a00 	vstr	s15, [r3]

				angle_deg += (gz_dps *0.002);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7fe fd26 	bl	8000588 <__aeabi_f2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <turnLeft+0x118>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fd1f 	bl	8000588 <__aeabi_f2d>
 8001b4a:	a321      	add	r3, pc, #132	@ (adr r3, 8001bd0 <turnLeft+0xf8>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fd72 	bl	8000638 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fbb6 	bl	80002cc <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7ff f85e 	bl	8000c28 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	607b      	str	r3, [r7, #4]
				angle = (int) wrap_angle(angle_deg);
 8001b70:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b74:	f7ff fd18 	bl	80015a8 <wrap_angle>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b80:	ee17 3a90 	vmov	r3, s15
 8001b84:	603b      	str	r3, [r7, #0]

			}
			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 70);
 8001b86:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 8001bf4 <turnLeft+0x11c>
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	481a      	ldr	r0, [pc, #104]	@ (8001bf8 <turnLeft+0x120>)
 8001b90:	f000 fc78 	bl	8002484 <Motor_SetMotorPWM>
			Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, -70);
 8001b94:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001bfc <turnLeft+0x124>
 8001b98:	220c      	movs	r2, #12
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	4816      	ldr	r0, [pc, #88]	@ (8001bf8 <turnLeft+0x120>)
 8001b9e:	f000 fc71 	bl	8002484 <Motor_SetMotorPWM>
	while (angle > -92) {
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f113 0f5b 	cmn.w	r3, #91	@ 0x5b
 8001ba8:	daab      	bge.n	8001b02 <turnLeft+0x2a>
		}

	}
    Motor_SetMotorPWM(&htim3, TIM_CHANNEL_1, TIM_CHANNEL_2, 0);
 8001baa:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8001c00 <turnLeft+0x128>
 8001bae:	2204      	movs	r2, #4
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4811      	ldr	r0, [pc, #68]	@ (8001bf8 <turnLeft+0x120>)
 8001bb4:	f000 fc66 	bl	8002484 <Motor_SetMotorPWM>
	Motor_SetMotorPWM(&htim3, TIM_CHANNEL_3, TIM_CHANNEL_4, 0);
 8001bb8:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8001c00 <turnLeft+0x128>
 8001bbc:	220c      	movs	r2, #12
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <turnLeft+0x120>)
 8001bc2:	f000 fc5f 	bl	8002484 <Motor_SetMotorPWM>

}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bd4:	3f60624d 	.word	0x3f60624d
 8001bd8:	20000340 	.word	0x20000340
 8001bdc:	200003d0 	.word	0x200003d0
 8001be0:	200002e8 	.word	0x200002e8
 8001be4:	200002b8 	.word	0x200002b8
 8001be8:	200002e0 	.word	0x200002e0
 8001bec:	200002ac 	.word	0x200002ac
 8001bf0:	200002e4 	.word	0x200002e4
 8001bf4:	428c0000 	.word	0x428c0000
 8001bf8:	20000388 	.word	0x20000388
 8001bfc:	c28c0000 	.word	0xc28c0000
 8001c00:	00000000 	.word	0x00000000

08001c04 <decisions>:


void decisions(Action a) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	71fb      	strb	r3, [r7, #7]
    switch (a) {
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d81b      	bhi.n	8001c4c <decisions+0x48>
 8001c14:	a201      	add	r2, pc, #4	@ (adr r2, 8001c1c <decisions+0x18>)
 8001c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1a:	bf00      	nop
 8001c1c:	08001c31 	.word	0x08001c31
 8001c20:	08001c3d 	.word	0x08001c3d
 8001c24:	08001c37 	.word	0x08001c37
 8001c28:	08001c4d 	.word	0x08001c4d
 8001c2c:	08001c43 	.word	0x08001c43
        case LEFT:
            turnLeft();
 8001c30:	f7ff ff52 	bl	8001ad8 <turnLeft>
            break;
 8001c34:	e00b      	b.n	8001c4e <decisions+0x4a>
        case RIGHT:
            turnRight();
 8001c36:	f7ff feb7 	bl	80019a8 <turnRight>
            break;
 8001c3a:	e008      	b.n	8001c4e <decisions+0x4a>
        case FORWARD:
            moveForward();
 8001c3c:	f7ff fd58 	bl	80016f0 <moveForward>
            break;
 8001c40:	e005      	b.n	8001c4e <decisions+0x4a>
        case TURNAROUND:
            turnLeft();
 8001c42:	f7ff ff49 	bl	8001ad8 <turnLeft>
            turnLeft();
 8001c46:	f7ff ff47 	bl	8001ad8 <turnLeft>
            break;
 8001c4a:	e000      	b.n	8001c4e <decisions+0x4a>
        default:
            // Handle unexpected cases
            break;
 8001c4c:	bf00      	nop
    }
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop

08001c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c5e:	f001 fc7d 	bl	800355c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c62:	f000 f8bd 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c66:	f000 fab3 	bl	80021d0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001c6a:	f000 f955 	bl	8001f18 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c6e:	f000 f9ab 	bl	8001fc8 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001c72:	f000 fa77 	bl	8002164 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001c76:	f000 fa21 	bl	80020bc <MX_TIM4_Init>
  MX_I2C1_Init();
 8001c7a:	f000 f91f 	bl	8001ebc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4848      	ldr	r0, [pc, #288]	@ (8001da4 <main+0x14c>)
 8001c82:	f003 fff5 	bl	8005c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001c86:	2104      	movs	r1, #4
 8001c88:	4846      	ldr	r0, [pc, #280]	@ (8001da4 <main+0x14c>)
 8001c8a:	f003 fff1 	bl	8005c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001c8e:	2108      	movs	r1, #8
 8001c90:	4844      	ldr	r0, [pc, #272]	@ (8001da4 <main+0x14c>)
 8001c92:	f003 ffed 	bl	8005c70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001c96:	210c      	movs	r1, #12
 8001c98:	4842      	ldr	r0, [pc, #264]	@ (8001da4 <main+0x14c>)
 8001c9a:	f003 ffe9 	bl	8005c70 <HAL_TIM_PWM_Start>

  // Zero PWM initially


  // Start encoders (Quadrature mode)
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL); // right motor?
 8001c9e:	213c      	movs	r1, #60	@ 0x3c
 8001ca0:	4841      	ldr	r0, [pc, #260]	@ (8001da8 <main+0x150>)
 8001ca2:	f004 f953 	bl	8005f4c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); // left motor?
 8001ca6:	213c      	movs	r1, #60	@ 0x3c
 8001ca8:	4840      	ldr	r0, [pc, #256]	@ (8001dac <main+0x154>)
 8001caa:	f004 f94f 	bl	8005f4c <HAL_TIM_Encoder_Start>

  // Start periodic base timer for the PID loop
  HAL_TIM_Base_Start_IT(&htim6);
 8001cae:	4840      	ldr	r0, [pc, #256]	@ (8001db0 <main+0x158>)
 8001cb0:	f003 ff1e 	bl	8005af0 <HAL_TIM_Base_Start_IT>

	PID_Init(&pid_left,  1.0f, 0.00001f, 0.0001f, 0.0f);
 8001cb4:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001db4 <main+0x15c>
 8001cb8:	ed9f 1a3f 	vldr	s2, [pc, #252]	@ 8001db8 <main+0x160>
 8001cbc:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 8001dbc <main+0x164>
 8001cc0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001cc4:	483e      	ldr	r0, [pc, #248]	@ (8001dc0 <main+0x168>)
 8001cc6:	f000 fae5 	bl	8002294 <PID_Init>
	PID_Init(&pid_right, 1.0f, 0.00001f, 0.0001f, 0.0f);
 8001cca:	eddf 1a3a 	vldr	s3, [pc, #232]	@ 8001db4 <main+0x15c>
 8001cce:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8001db8 <main+0x160>
 8001cd2:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8001dbc <main+0x164>
 8001cd6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001cda:	483a      	ldr	r0, [pc, #232]	@ (8001dc4 <main+0x16c>)
 8001cdc:	f000 fada 	bl	8002294 <PID_Init>
	//kp = 1.17, kd = 0, ki = 0.001



//Gyro init
	  status = lsm6dsox_init(&lsm6dsox, &hi2c1, lsm6dsox_buf, 12);
 8001ce0:	230c      	movs	r3, #12
 8001ce2:	4a39      	ldr	r2, [pc, #228]	@ (8001dc8 <main+0x170>)
 8001ce4:	4939      	ldr	r1, [pc, #228]	@ (8001dcc <main+0x174>)
 8001ce6:	483a      	ldr	r0, [pc, #232]	@ (8001dd0 <main+0x178>)
 8001ce8:	f7ff fb9c 	bl	8001424 <lsm6dsox_init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b38      	ldr	r3, [pc, #224]	@ (8001dd4 <main+0x17c>)
 8001cf2:	701a      	strb	r2, [r3, #0]
	  if (status != HAL_OK) {
 8001cf4:	4b37      	ldr	r3, [pc, #220]	@ (8001dd4 <main+0x17c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <main+0xa8>
	    Error_Handler();
 8001cfc:	f000 fac4 	bl	8002288 <Error_Handler>
	  }
	  status = lsm6dsox_enable_accel(&lsm6dsox);
 8001d00:	4833      	ldr	r0, [pc, #204]	@ (8001dd0 <main+0x178>)
 8001d02:	f7ff fcb5 	bl	8001670 <lsm6dsox_enable_accel>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <main+0x17c>)
 8001d0c:	701a      	strb	r2, [r3, #0]
	  if (status != HAL_OK) Error_Handler();
 8001d0e:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <main+0x17c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <main+0xc2>
 8001d16:	f000 fab7 	bl	8002288 <Error_Handler>
	  status = lsm6dsox_enable_gyro(&lsm6dsox);
 8001d1a:	482d      	ldr	r0, [pc, #180]	@ (8001dd0 <main+0x178>)
 8001d1c:	f7ff fcc8 	bl	80016b0 <lsm6dsox_enable_gyro>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <main+0x17c>)
 8001d26:	701a      	strb	r2, [r3, #0]
	  if (status != HAL_OK) Error_Handler();
 8001d28:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <main+0x17c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d01a      	beq.n	8001d66 <main+0x10e>
 8001d30:	f000 faaa 	bl	8002288 <Error_Handler>

/////////

	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001d34:	e017      	b.n	8001d66 <main+0x10e>

		//using the push button as a start

	  Motor_SetPWM(&htim3, TIM_CHANNEL_1, 0);
 8001d36:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8001db4 <main+0x15c>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4819      	ldr	r0, [pc, #100]	@ (8001da4 <main+0x14c>)
 8001d3e:	f000 fb5d 	bl	80023fc <Motor_SetPWM>
	  Motor_SetPWM(&htim3, TIM_CHANNEL_2, 0);
 8001d42:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8001db4 <main+0x15c>
 8001d46:	2104      	movs	r1, #4
 8001d48:	4816      	ldr	r0, [pc, #88]	@ (8001da4 <main+0x14c>)
 8001d4a:	f000 fb57 	bl	80023fc <Motor_SetPWM>
	  Motor_SetPWM(&htim3, TIM_CHANNEL_3, 0);
 8001d4e:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 8001db4 <main+0x15c>
 8001d52:	2108      	movs	r1, #8
 8001d54:	4813      	ldr	r0, [pc, #76]	@ (8001da4 <main+0x14c>)
 8001d56:	f000 fb51 	bl	80023fc <Motor_SetPWM>
	  Motor_SetPWM(&htim3, TIM_CHANNEL_4, 0);
 8001d5a:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8001db4 <main+0x15c>
 8001d5e:	210c      	movs	r1, #12
 8001d60:	4810      	ldr	r0, [pc, #64]	@ (8001da4 <main+0x14c>)
 8001d62:	f000 fb4b 	bl	80023fc <Motor_SetPWM>
	while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001d66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6a:	481b      	ldr	r0, [pc, #108]	@ (8001dd8 <main+0x180>)
 8001d6c:	f001 ff32 	bl	8003bd4 <HAL_GPIO_ReadPin>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d0df      	beq.n	8001d36 <main+0xde>

	}

	generateInitialWalls();
 8001d76:	f000 fff3 	bl	8002d60 <generateInitialWalls>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Action a = solver();
 8001d7a:	f001 f913 	bl	8002fa4 <solver>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	71fb      	strb	r3, [r7, #7]
      if (a == IDLE) {
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d103      	bne.n	8001d90 <main+0x138>
          printf("Solver is idle; done.\n");
 8001d88:	4814      	ldr	r0, [pc, #80]	@ (8001ddc <main+0x184>)
 8001d8a:	f005 fefd 	bl	8007b88 <puts>
          break;
 8001d8e:	e004      	b.n	8001d9a <main+0x142>
      }
	  decisions(a);
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff36 	bl	8001c04 <decisions>
  {
 8001d98:	e7ef      	b.n	8001d7a <main+0x122>
 8001d9a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000388 	.word	0x20000388
 8001da8:	20000340 	.word	0x20000340
 8001dac:	200003d0 	.word	0x200003d0
 8001db0:	20000418 	.word	0x20000418
 8001db4:	00000000 	.word	0x00000000
 8001db8:	38d1b717 	.word	0x38d1b717
 8001dbc:	3727c5ac 	.word	0x3727c5ac
 8001dc0:	2000021c 	.word	0x2000021c
 8001dc4:	20000264 	.word	0x20000264
 8001dc8:	200002ac 	.word	0x200002ac
 8001dcc:	200002ec 	.word	0x200002ec
 8001dd0:	200002b8 	.word	0x200002b8
 8001dd4:	200002e0 	.word	0x200002e0
 8001dd8:	40020800 	.word	0x40020800
 8001ddc:	0800c628 	.word	0x0800c628

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	@ 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 031c 	add.w	r3, r7, #28
 8001dea:	2234      	movs	r2, #52	@ 0x34
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f005 ffca 	bl	8007d88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <SystemClock_Config+0xd4>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	4a29      	ldr	r2, [pc, #164]	@ (8001eb4 <SystemClock_Config+0xd4>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e14:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <SystemClock_Config+0xd4>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	4b24      	ldr	r3, [pc, #144]	@ (8001eb8 <SystemClock_Config+0xd8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e2c:	4a22      	ldr	r2, [pc, #136]	@ (8001eb8 <SystemClock_Config+0xd8>)
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <SystemClock_Config+0xd8>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e48:	2310      	movs	r3, #16
 8001e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001e54:	2310      	movs	r3, #16
 8001e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e58:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001e5c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e5e:	2304      	movs	r3, #4
 8001e60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e62:	2302      	movs	r3, #2
 8001e64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e66:	2302      	movs	r3, #2
 8001e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f003 fb50 	bl	8005514 <HAL_RCC_OscConfig>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e7a:	f000 fa05 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e7e:	230f      	movs	r3, #15
 8001e80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e82:	2302      	movs	r3, #2
 8001e84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e94:	f107 0308 	add.w	r3, r7, #8
 8001e98:	2102      	movs	r1, #2
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f003 f804 	bl	8004ea8 <HAL_RCC_ClockConfig>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001ea6:	f000 f9ef 	bl	8002288 <Error_Handler>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	3750      	adds	r7, #80	@ 0x50
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40007000 	.word	0x40007000

08001ebc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ec2:	4a13      	ldr	r2, [pc, #76]	@ (8001f10 <MX_I2C1_Init+0x54>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ec8:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <MX_I2C1_Init+0x58>)
 8001eca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001eda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ede:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ee6:	4b09      	ldr	r3, [pc, #36]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eec:	4b07      	ldr	r3, [pc, #28]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ef8:	4804      	ldr	r0, [pc, #16]	@ (8001f0c <MX_I2C1_Init+0x50>)
 8001efa:	f001 fe83 	bl	8003c04 <HAL_I2C_Init>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f04:	f000 f9c0 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f08:	bf00      	nop
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	200002ec 	.word	0x200002ec
 8001f10:	40005400 	.word	0x40005400
 8001f14:	000186a0 	.word	0x000186a0

08001f18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08c      	sub	sp, #48	@ 0x30
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f005 ff2e 	bl	8007d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f34:	4b22      	ldr	r3, [pc, #136]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f36:	4a23      	ldr	r2, [pc, #140]	@ (8001fc4 <MX_TIM1_Init+0xac>)
 8001f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f46:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f54:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f5a:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f5c:	2280      	movs	r2, #128	@ 0x80
 8001f5e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f60:	2303      	movs	r3, #3
 8001f62:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001f70:	2305      	movs	r3, #5
 8001f72:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	4619      	mov	r1, r3
 8001f8a:	480d      	ldr	r0, [pc, #52]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001f8c:	f003 ff38 	bl	8005e00 <HAL_TIM_Encoder_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001f96:	f000 f977 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4806      	ldr	r0, [pc, #24]	@ (8001fc0 <MX_TIM1_Init+0xa8>)
 8001fa8:	f004 fcba 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001fb2:	f000 f969 	bl	8002288 <Error_Handler>
  /* USER CODE BEGIN TIM1_Init 2 */


  /* USER CODE END TIM1_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	3730      	adds	r7, #48	@ 0x30
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000340 	.word	0x20000340
 8001fc4:	40010000 	.word	0x40010000

08001fc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
 8001fe6:	615a      	str	r2, [r3, #20]
 8001fe8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fea:	4b32      	ldr	r3, [pc, #200]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8001fec:	4a32      	ldr	r2, [pc, #200]	@ (80020b8 <MX_TIM3_Init+0xf0>)
 8001fee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001ff0:	4b30      	ldr	r3, [pc, #192]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8001ff2:	2253      	movs	r2, #83	@ 0x53
 8001ff4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff6:	4b2f      	ldr	r3, [pc, #188]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8001ffe:	2263      	movs	r2, #99	@ 0x63
 8002000:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b2a      	ldr	r3, [pc, #168]	@ (80020b4 <MX_TIM3_Init+0xec>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800200e:	4829      	ldr	r0, [pc, #164]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8002010:	f003 fdde 	bl	8005bd0 <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800201a:	f000 f935 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	4619      	mov	r1, r3
 800202c:	4821      	ldr	r0, [pc, #132]	@ (80020b4 <MX_TIM3_Init+0xec>)
 800202e:	f004 fc77 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002038:	f000 f926 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203c:	2360      	movs	r3, #96	@ 0x60
 800203e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	2200      	movs	r2, #0
 8002050:	4619      	mov	r1, r3
 8002052:	4818      	ldr	r0, [pc, #96]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8002054:	f004 f8f8 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800205e:	f000 f913 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002062:	1d3b      	adds	r3, r7, #4
 8002064:	2204      	movs	r2, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4812      	ldr	r0, [pc, #72]	@ (80020b4 <MX_TIM3_Init+0xec>)
 800206a:	f004 f8ed 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002074:	f000 f908 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	2208      	movs	r2, #8
 800207c:	4619      	mov	r1, r3
 800207e:	480d      	ldr	r0, [pc, #52]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8002080:	f004 f8e2 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800208a:	f000 f8fd 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	220c      	movs	r2, #12
 8002092:	4619      	mov	r1, r3
 8002094:	4807      	ldr	r0, [pc, #28]	@ (80020b4 <MX_TIM3_Init+0xec>)
 8002096:	f004 f8d7 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80020a0:	f000 f8f2 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020a4:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <MX_TIM3_Init+0xec>)
 80020a6:	f001 f8c3 	bl	8003230 <HAL_TIM_MspPostInit>

}
 80020aa:	bf00      	nop
 80020ac:	3728      	adds	r7, #40	@ 0x28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000388 	.word	0x20000388
 80020b8:	40000400 	.word	0x40000400

080020bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	@ 0x30
 80020c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	2100      	movs	r1, #0
 80020ca:	4618      	mov	r0, r3
 80020cc:	f005 fe5c 	bl	8007d88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d0:	1d3b      	adds	r3, r7, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020d8:	4b20      	ldr	r3, [pc, #128]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020da:	4a21      	ldr	r2, [pc, #132]	@ (8002160 <MX_TIM4_Init+0xa4>)
 80020dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020de:	4b1f      	ldr	r3, [pc, #124]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e4:	4b1d      	ldr	r3, [pc, #116]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f2:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020f8:	4b18      	ldr	r3, [pc, #96]	@ (800215c <MX_TIM4_Init+0xa0>)
 80020fa:	2280      	movs	r2, #128	@ 0x80
 80020fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020fe:	2303      	movs	r3, #3
 8002100:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002106:	2301      	movs	r3, #1
 8002108:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 800210e:	2305      	movs	r3, #5
 8002110:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002112:	2300      	movs	r3, #0
 8002114:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002116:	2301      	movs	r3, #1
 8002118:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800211a:	2300      	movs	r3, #0
 800211c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	4619      	mov	r1, r3
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <MX_TIM4_Init+0xa0>)
 800212a:	f003 fe69 	bl	8005e00 <HAL_TIM_Encoder_Init>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002134:	f000 f8a8 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002140:	1d3b      	adds	r3, r7, #4
 8002142:	4619      	mov	r1, r3
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <MX_TIM4_Init+0xa0>)
 8002146:	f004 fbeb 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002150:	f000 f89a 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002154:	bf00      	nop
 8002156:	3730      	adds	r7, #48	@ 0x30
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	200003d0 	.word	0x200003d0
 8002160:	40000800 	.word	0x40000800

08002164 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216a:	463b      	mov	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002172:	4b15      	ldr	r3, [pc, #84]	@ (80021c8 <MX_TIM6_Init+0x64>)
 8002174:	4a15      	ldr	r2, [pc, #84]	@ (80021cc <MX_TIM6_Init+0x68>)
 8002176:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <MX_TIM6_Init+0x64>)
 800217a:	2253      	movs	r2, #83	@ 0x53
 800217c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <MX_TIM6_Init+0x64>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8002184:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <MX_TIM6_Init+0x64>)
 8002186:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800218a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800218c:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_TIM6_Init+0x64>)
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002192:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <MX_TIM6_Init+0x64>)
 8002194:	f003 fc5c 	bl	8005a50 <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800219e:	f000 f873 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021aa:	463b      	mov	r3, r7
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_TIM6_Init+0x64>)
 80021b0:	f004 fbb6 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021ba:	f000 f865 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	20000418 	.word	0x20000418
 80021cc:	40001000 	.word	0x40001000

080021d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d6:	f107 030c 	add.w	r3, r7, #12
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	60bb      	str	r3, [r7, #8]
 80021ea:	4b24      	ldr	r3, [pc, #144]	@ (800227c <MX_GPIO_Init+0xac>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a23      	ldr	r2, [pc, #140]	@ (800227c <MX_GPIO_Init+0xac>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b21      	ldr	r3, [pc, #132]	@ (800227c <MX_GPIO_Init+0xac>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	607b      	str	r3, [r7, #4]
 8002206:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <MX_GPIO_Init+0xac>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a1c      	ldr	r2, [pc, #112]	@ (800227c <MX_GPIO_Init+0xac>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <MX_GPIO_Init+0xac>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	4b16      	ldr	r3, [pc, #88]	@ (800227c <MX_GPIO_Init+0xac>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a15      	ldr	r2, [pc, #84]	@ (800227c <MX_GPIO_Init+0xac>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b13      	ldr	r3, [pc, #76]	@ (800227c <MX_GPIO_Init+0xac>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	603b      	str	r3, [r7, #0]
 8002238:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC13 FRONT_IR_Pin RIGHT_IR_Pin LEFT_IR_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|FRONT_IR_Pin|RIGHT_IR_Pin|LEFT_IR_Pin;
 800223a:	f242 0307 	movw	r3, #8199	@ 0x2007
 800223e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002244:	2301      	movs	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	4619      	mov	r1, r3
 800224e:	480c      	ldr	r0, [pc, #48]	@ (8002280 <MX_GPIO_Init+0xb0>)
 8002250:	f001 fb2c 	bl	80038ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002254:	2303      	movs	r3, #3
 8002256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002264:	2301      	movs	r3, #1
 8002266:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	4619      	mov	r1, r3
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_GPIO_Init+0xb4>)
 8002270:	f001 fb1c 	bl	80038ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002274:	bf00      	nop
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	40023800 	.word	0x40023800
 8002280:	40020800 	.word	0x40020800
 8002284:	40020000 	.word	0x40020000

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <PID_Init>:
#include "pid.h"
#include <math.h>
#include <stdlib.h>

void PID_Init(PID *pid, float Kp, float Ki, float Kd, float setpoint) {
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6178      	str	r0, [r7, #20]
 800229c:	ed87 0a04 	vstr	s0, [r7, #16]
 80022a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80022a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80022a8:	edc7 1a01 	vstr	s3, [r7, #4]
    pid->Kp = Kp;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	601a      	str	r2, [r3, #0]
    pid->Ki = Ki;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	605a      	str	r2, [r3, #4]
    pid->Kd = Kd;
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	609a      	str	r2, [r3, #8]
    pid->setpoint = setpoint;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	60da      	str	r2, [r3, #12]
    pid->integral = 0.0f;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
    pid->prev_error = 0.0f;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	615a      	str	r2, [r3, #20]
    pid->output_min = -100.0f;  // PWM limits
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a05      	ldr	r2, [pc, #20]	@ (80022ec <PID_Init+0x58>)
 80022d8:	61da      	str	r2, [r3, #28]
    pid->output_max = 100.0f;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <PID_Init+0x5c>)
 80022de:	621a      	str	r2, [r3, #32]
}
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	c2c80000 	.word	0xc2c80000
 80022f0:	42c80000 	.word	0x42c80000

080022f4 <PID_Update>:

void PID_Update(PID *pid, float setpoint, float measured_value, float dt) {
 80022f4:	b480      	push	{r7}
 80022f6:	b087      	sub	sp, #28
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8002300:	edc7 0a01 	vstr	s1, [r7, #4]
 8002304:	ed87 1a00 	vstr	s2, [r7]
    if (dt < 1e-6f) dt = 1e-6f;
 8002308:	edd7 7a00 	vldr	s15, [r7]
 800230c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80023f4 <PID_Update+0x100>
 8002310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002318:	d501      	bpl.n	800231e <PID_Update+0x2a>
 800231a:	4b37      	ldr	r3, [pc, #220]	@ (80023f8 <PID_Update+0x104>)
 800231c:	603b      	str	r3, [r7, #0]
    float error = setpoint - measured_value;
 800231e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002322:	edd7 7a01 	vldr	s15, [r7, #4]
 8002326:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232a:	edc7 7a05 	vstr	s15, [r7, #20]

    pid->integral += error * dt;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	ed93 7a04 	vldr	s14, [r3, #16]
 8002334:	edd7 6a05 	vldr	s13, [r7, #20]
 8002338:	edd7 7a00 	vldr	s15, [r7]
 800233c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	edc3 7a04 	vstr	s15, [r3, #16]
    float derivative = (error - pid->prev_error) / dt;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002350:	ed97 7a05 	vldr	s14, [r7, #20]
 8002354:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002358:	ed97 7a00 	vldr	s14, [r7]
 800235c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002360:	edc7 7a04 	vstr	s15, [r7, #16]

    pid->output =
        pid->Kp * error +
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	ed93 7a00 	vldr	s14, [r3]
 800236a:	edd7 7a05 	vldr	s15, [r7, #20]
 800236e:	ee27 7a27 	vmul.f32	s14, s14, s15
        pid->Ki * pid->integral +
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	edd3 6a01 	vldr	s13, [r3, #4]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	edd3 7a04 	vldr	s15, [r3, #16]
 800237e:	ee66 7aa7 	vmul.f32	s15, s13, s15
        pid->Kp * error +
 8002382:	ee37 7a27 	vadd.f32	s14, s14, s15
        pid->Kd * derivative;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	edd3 6a02 	vldr	s13, [r3, #8]
 800238c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002390:	ee66 7aa7 	vmul.f32	s15, s13, s15
        pid->Ki * pid->integral +
 8002394:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->output =
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	edc3 7a06 	vstr	s15, [r3, #24]

    if (pid->output > pid->output_max) pid->output = pid->output_max;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	ed93 7a06 	vldr	s14, [r3, #24]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	edd3 7a08 	vldr	s15, [r3, #32]
 80023aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	dd04      	ble.n	80023be <PID_Update+0xca>
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a1a      	ldr	r2, [r3, #32]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	619a      	str	r2, [r3, #24]
 80023bc:	e00e      	b.n	80023dc <PID_Update+0xe8>
    else if (pid->output < pid->output_min) pid->output = pid->output_min;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	ed93 7a06 	vldr	s14, [r3, #24]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80023ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d2:	d503      	bpl.n	80023dc <PID_Update+0xe8>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	619a      	str	r2, [r3, #24]

    pid->prev_error = error;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	697a      	ldr	r2, [r7, #20]
 80023e0:	615a      	str	r2, [r3, #20]
    pid->setpoint = setpoint;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	60da      	str	r2, [r3, #12]
}
 80023e8:	bf00      	nop
 80023ea:	371c      	adds	r7, #28
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr
 80023f4:	358637bd 	.word	0x358637bd
 80023f8:	358637bd 	.word	0x358637bd

080023fc <Motor_SetPWM>:

void Motor_SetPWM(TIM_HandleTypeDef *htim, uint32_t channel, float duty_percent)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty_abs = fabsf(duty_percent);
 800240a:	edd7 7a01 	vldr	s15, [r7, #4]
 800240e:	eef0 7ae7 	vabs.f32	s15, s15
 8002412:	edc7 7a05 	vstr	s15, [r7, #20]

	uint32_t compare_val = (uint32_t)((duty_abs / 100.0f) * htim->Init.Period);
 8002416:	edd7 7a05 	vldr	s15, [r7, #20]
 800241a:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8002480 <Motor_SetPWM+0x84>
 800241e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002436:	ee17 3a90 	vmov	r3, s15
 800243a:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SET_COMPARE(htim, channel, compare_val);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d104      	bne.n	800244c <Motor_SetPWM+0x50>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800244a:	e013      	b.n	8002474 <Motor_SetPWM+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, compare_val);
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b04      	cmp	r3, #4
 8002450:	d104      	bne.n	800245c <Motor_SetPWM+0x60>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800245a:	e00b      	b.n	8002474 <Motor_SetPWM+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, compare_val);
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	2b08      	cmp	r3, #8
 8002460:	d104      	bne.n	800246c <Motor_SetPWM+0x70>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800246a:	e003      	b.n	8002474 <Motor_SetPWM+0x78>
	__HAL_TIM_SET_COMPARE(htim, channel, compare_val);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	42c80000 	.word	0x42c80000

08002484 <Motor_SetMotorPWM>:
  */
void Motor_SetMotorPWM(TIM_HandleTypeDef *htim,
                       uint32_t forward_channel,
                       uint32_t reverse_channel,
                       float pid_output)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	ed87 0a00 	vstr	s0, [r7]
    if (pid_output > 0.0f) {
 8002494:	edd7 7a00 	vldr	s15, [r7]
 8002498:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800249c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a0:	dd0c      	ble.n	80024bc <Motor_SetMotorPWM+0x38>
        Motor_SetPWM(htim, forward_channel, pid_output);
 80024a2:	ed97 0a00 	vldr	s0, [r7]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f7ff ffa7 	bl	80023fc <Motor_SetPWM>
        Motor_SetPWM(htim, reverse_channel, 0.0f);
 80024ae:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8002504 <Motor_SetMotorPWM+0x80>
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff ffa1 	bl	80023fc <Motor_SetPWM>
    }
    else {
        Motor_SetPWM(htim, forward_channel, 0.0f);
        Motor_SetPWM(htim, reverse_channel, 0.0f);
    }
}
 80024ba:	e01f      	b.n	80024fc <Motor_SetMotorPWM+0x78>
    else if (pid_output < 0.0f) {
 80024bc:	edd7 7a00 	vldr	s15, [r7]
 80024c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	d50c      	bpl.n	80024e4 <Motor_SetMotorPWM+0x60>
        Motor_SetPWM(htim, forward_channel, 0.0f);
 80024ca:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8002504 <Motor_SetMotorPWM+0x80>
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff93 	bl	80023fc <Motor_SetPWM>
        Motor_SetPWM(htim, reverse_channel, pid_output);
 80024d6:	ed97 0a00 	vldr	s0, [r7]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff8d 	bl	80023fc <Motor_SetPWM>
}
 80024e2:	e00b      	b.n	80024fc <Motor_SetMotorPWM+0x78>
        Motor_SetPWM(htim, forward_channel, 0.0f);
 80024e4:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8002504 <Motor_SetMotorPWM+0x80>
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ff86 	bl	80023fc <Motor_SetPWM>
        Motor_SetPWM(htim, reverse_channel, 0.0f);
 80024f0:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8002504 <Motor_SetMotorPWM+0x80>
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff80 	bl	80023fc <Motor_SetPWM>
}
 80024fc:	bf00      	nop
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	00000000 	.word	0x00000000

08002508 <queue_create>:
    struct node* head;
    struct node* tail;
    int size;
};

queue queue_create() {
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
queue q = (queue) malloc(sizeof(struct _queue));
 800250e:	200c      	movs	r0, #12
 8002510:	f004 fa9e 	bl	8006a50 <malloc>
 8002514:	4603      	mov	r3, r0
 8002516:	607b      	str	r3, [r7, #4]
    if (q == NULL) {
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <queue_create+0x2a>
        fprintf(stderr, "Insufficient memory to \
 800251e:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <queue_create+0x48>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2231      	movs	r2, #49	@ 0x31
 8002526:	2101      	movs	r1, #1
 8002528:	480a      	ldr	r0, [pc, #40]	@ (8002554 <queue_create+0x4c>)
 800252a:	f005 fac9 	bl	8007ac0 <fwrite>
        initialize queue.\n");
        abort();
 800252e:	f004 fa87 	bl	8006a40 <abort>
    }
    q->head = NULL;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
    q->tail = NULL;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	605a      	str	r2, [r3, #4]
    q->size = 0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	609a      	str	r2, [r3, #8]
    return q;
 8002544:	687b      	ldr	r3, [r7, #4]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000001c 	.word	0x2000001c
 8002554:	0800c640 	.word	0x0800c640

08002558 <queue_push>:
    }
    queue_clear(q);
    free(q);
}

void queue_push(queue q, item_type elem) {
 8002558:	b084      	sub	sp, #16
 800255a:	b590      	push	{r4, r7, lr}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002566:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    struct node* n;
    n = (struct node*) malloc(sizeof(struct node));
 800256a:	2014      	movs	r0, #20
 800256c:	f004 fa70 	bl	8006a50 <malloc>
 8002570:	4603      	mov	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]
    if (n == NULL) {
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d109      	bne.n	800258e <queue_push+0x36>
        fprintf(stderr, "Insufficient memory to \
 800257a:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <queue_push+0x88>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	222c      	movs	r2, #44	@ 0x2c
 8002582:	2101      	movs	r1, #1
 8002584:	4817      	ldr	r0, [pc, #92]	@ (80025e4 <queue_push+0x8c>)
 8002586:	f005 fa9b 	bl	8007ac0 <fwrite>
        create node.\n");
        abort();
 800258a:	f004 fa59 	bl	8006a40 <abort>
    }
    n->data = elem;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	461c      	mov	r4, r3
 8002592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    n->next = NULL;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
    if (q->head == NULL) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d107      	bne.n	80025ba <queue_push+0x62>
        q->head = q->tail = n;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	605a      	str	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e006      	b.n	80025c8 <queue_push+0x70>
    } else {
        q->tail->next = n;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	611a      	str	r2, [r3, #16]
        q->tail = n;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
    }
    q->size += 1;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	1c5a      	adds	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	609a      	str	r2, [r3, #8]
}
 80025d2:	bf00      	nop
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80025dc:	b004      	add	sp, #16
 80025de:	4770      	bx	lr
 80025e0:	2000001c 	.word	0x2000001c
 80025e4:	0800c68c 	.word	0x0800c68c

080025e8 <queue_pop>:

item_type queue_pop(queue q) {
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
    if (queue_is_empty(q)) {
 80025f2:	6838      	ldr	r0, [r7, #0]
 80025f4:	f000 f840 	bl	8002678 <queue_is_empty>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <queue_pop+0x2a>
    fprintf(stderr, "Can't pop element from queue: \
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <queue_pop+0x88>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2232      	movs	r2, #50	@ 0x32
 8002606:	2101      	movs	r1, #1
 8002608:	481a      	ldr	r0, [pc, #104]	@ (8002674 <queue_pop+0x8c>)
 800260a:	f005 fa59 	bl	8007ac0 <fwrite>
    queue is empty.\n");
    abort();
 800260e:	f004 fa17 	bl	8006a40 <abort>
    }
    struct node* head = q->head;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	61fb      	str	r3, [r7, #28]
    if (q->head == q->tail) {
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	429a      	cmp	r2, r3
 8002622:	d106      	bne.n	8002632 <queue_pop+0x4a>
        q->head = NULL;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
        q->tail = NULL;
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	e004      	b.n	800263c <queue_pop+0x54>
    } else {
        q->head = q->head->next;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	601a      	str	r2, [r3, #0]
    }
    q->size -= 1;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	609a      	str	r2, [r3, #8]
    item_type data = head->data;
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f107 040c 	add.w	r4, r7, #12
 800264c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800264e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    free(head);
 8002652:	69f8      	ldr	r0, [r7, #28]
 8002654:	f004 fa04 	bl	8006a60 <free>
    return data;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	461c      	mov	r4, r3
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	2000001c 	.word	0x2000001c
 8002674:	0800c6bc 	.word	0x0800c6bc

08002678 <queue_is_empty>:
        abort();
    }
    return q->head->data;
}

int queue_is_empty(queue q) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
    if (q==NULL) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d109      	bne.n	800269a <queue_is_empty+0x22>
        fprintf(stderr, "Cannot work with NULL queue.\n");
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <queue_is_empty+0x38>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	221d      	movs	r2, #29
 800268e:	2101      	movs	r1, #1
 8002690:	4808      	ldr	r0, [pc, #32]	@ (80026b4 <queue_is_empty+0x3c>)
 8002692:	f005 fa15 	bl	8007ac0 <fwrite>
        abort();
 8002696:	f004 f9d3 	bl	8006a40 <abort>
    }
    return q->head == NULL;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf0c      	ite	eq
 80026a2:	2301      	moveq	r3, #1
 80026a4:	2300      	movne	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000001c 	.word	0x2000001c
 80026b4:	0800c72c 	.word	0x0800c72c

080026b8 <updateTravelArray>:
{
    return travelArray[c.x][c.y];
}
// given a coord, updates the travel array to mark that the mouse has visited that cell before
void updateTravelArray(coord c) 
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	463b      	mov	r3, r7
 80026c0:	e883 0003 	stmia.w	r3, {r0, r1}
    travelArray[c.x][c.y] = 1;
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	4806      	ldr	r0, [pc, #24]	@ (80026e4 <updateTravelArray+0x2c>)
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	440b      	add	r3, r1
 80026d2:	2201      	movs	r2, #1
 80026d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	200004fc 	.word	0x200004fc

080026e8 <updateFloodArray>:
// given coordinate, updates the respective cell's floodfill value
void updateFloodArray(coord c, int val) 
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80026f6:	607a      	str	r2, [r7, #4]
    floodArray[c.x][c.y] = val;
 80026f8:	68ba      	ldr	r2, [r7, #8]
 80026fa:	68f9      	ldr	r1, [r7, #12]
 80026fc:	4806      	ldr	r0, [pc, #24]	@ (8002718 <updateFloodArray+0x30>)
 80026fe:	4613      	mov	r3, r2
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4413      	add	r3, r2
 8002704:	440b      	add	r3, r1
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	200004cc 	.word	0x200004cc

0800271c <getFloodArray>:
// given coordinate, gets the respective cell's floodfill value
int getFloodArray(coord c) 
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	463b      	mov	r3, r7
 8002724:	e883 0003 	stmia.w	r3, {r0, r1}

    return floodArray[c.x][c.y];
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4806      	ldr	r0, [pc, #24]	@ (8002748 <getFloodArray+0x2c>)
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	440b      	add	r3, r1
 8002736:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	200004cc 	.word	0x200004cc

0800274c <updatePathArray>:
// given coordinate, updates the respective cell's path heading
void updatePathArray(coord c, Heading h) 
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	f107 0308 	add.w	r3, r7, #8
 8002756:	e883 0003 	stmia.w	r3, {r0, r1}
 800275a:	4613      	mov	r3, r2
 800275c:	71fb      	strb	r3, [r7, #7]
    pathArray[c.x][c.y] = h;
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	68f9      	ldr	r1, [r7, #12]
 8002762:	4807      	ldr	r0, [pc, #28]	@ (8002780 <updatePathArray+0x34>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	4403      	add	r3, r0
 800276c:	440b      	add	r3, r1
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	701a      	strb	r2, [r3, #0]
}
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200004f0 	.word	0x200004f0

08002784 <getPathArray>:
// given cordinate, gets the respective cell's path heading
Heading getPathArray(coord c) 
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	463b      	mov	r3, r7
 800278c:	e883 0003 	stmia.w	r3, {r0, r1}

    return pathArray[c.x][c.y];
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	6879      	ldr	r1, [r7, #4]
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <getPathArray+0x2c>)
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	4403      	add	r3, r0
 800279e:	440b      	add	r3, r1
 80027a0:	781b      	ldrb	r3, [r3, #0]
    
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	200004f0 	.word	0x200004f0

080027b4 <resetFloodArray>:
/* Floodfill Functions */

// resets the floodfill array to target the center as destination
void resetFloodArray()
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
    // set the entire flood array to blank values (-1)
    for (int x = 0; x < MAZE_WIDTH; x++) {
 80027ba:	2300      	movs	r3, #0
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	e040      	b.n	8002842 <resetFloodArray+0x8e>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 80027c0:	2300      	movs	r3, #0
 80027c2:	603b      	str	r3, [r7, #0]
 80027c4:	e037      	b.n	8002836 <resetFloodArray+0x82>
            if (x == LOWER_X_GOAL && y == UPPER_Y_GOAL && target == 1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d111      	bne.n	80027f0 <resetFloodArray+0x3c>
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d10e      	bne.n	80027f0 <resetFloodArray+0x3c>
 80027d2:	4b21      	ldr	r3, [pc, #132]	@ (8002858 <resetFloodArray+0xa4>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d10a      	bne.n	80027f0 <resetFloodArray+0x3c>
            {
                floodArray[x][y] = 0;
 80027da:	4920      	ldr	r1, [pc, #128]	@ (800285c <resetFloodArray+0xa8>)
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	4613      	mov	r3, r2
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	2200      	movs	r2, #0
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80027ee:	e01f      	b.n	8002830 <resetFloodArray+0x7c>
            } else if (x == STARTING_X && y == STARTING_Y && !target)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d111      	bne.n	800281a <resetFloodArray+0x66>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10e      	bne.n	800281a <resetFloodArray+0x66>
 80027fc:	4b16      	ldr	r3, [pc, #88]	@ (8002858 <resetFloodArray+0xa4>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <resetFloodArray+0x66>
            {
                floodArray[x][y] = 0; 
 8002804:	4915      	ldr	r1, [pc, #84]	@ (800285c <resetFloodArray+0xa8>)
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4413      	add	r3, r2
 8002812:	2200      	movs	r2, #0
 8002814:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002818:	e00a      	b.n	8002830 <resetFloodArray+0x7c>
            } else {
                floodArray[x][y] = -1;
 800281a:	4910      	ldr	r1, [pc, #64]	@ (800285c <resetFloodArray+0xa8>)
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	4413      	add	r3, r2
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	3301      	adds	r3, #1
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	2b02      	cmp	r3, #2
 800283a:	ddc4      	ble.n	80027c6 <resetFloodArray+0x12>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3301      	adds	r3, #1
 8002840:	607b      	str	r3, [r7, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b02      	cmp	r3, #2
 8002846:	ddbb      	ble.n	80027c0 <resetFloodArray+0xc>
    //     for (int x = LOWER_X_GOAL; x <= UPPER_X_GOAL; x++)
    //         for (int y = LOWER_Y_GOAL; y <= UPPER_Y_GOAL; y++)
    //             floodArray[x][y] = 0;
    // else // target is starting cell
    //     floodArray[STARTING_X][STARTING_Y] = 0;
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000000 	.word	0x20000000
 800285c:	200004cc 	.word	0x200004cc

08002860 <checkWall>:
/******************************************************** */
// given heading and coordinate, check if there is a wall on that side of the cell
int checkWall(Heading heading, coord c) {
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	e883 0006 	stmia.w	r3, {r1, r2}
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b03      	cmp	r3, #3
 8002874:	d830      	bhi.n	80028d8 <checkWall+0x78>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <checkWall+0x1c>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	0800289f 	.word	0x0800289f
 8002884:	080028b3 	.word	0x080028b3
 8002888:	080028c3 	.word	0x080028c3
        case NORTH: return horizontalWalls[c.x][c.y+1]; //tracking the uppermost cells
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	3301      	adds	r3, #1
 8002892:	4914      	ldr	r1, [pc, #80]	@ (80028e4 <checkWall+0x84>)
 8002894:	0092      	lsls	r2, r2, #2
 8002896:	4413      	add	r3, r2
 8002898:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800289c:	e01c      	b.n	80028d8 <checkWall+0x78>
        case WEST: return verticalWalls[c.x][c.y];
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	4811      	ldr	r0, [pc, #68]	@ (80028e8 <checkWall+0x88>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028b0:	e012      	b.n	80028d8 <checkWall+0x78>
        case SOUTH: return horizontalWalls[c.x][c.y];
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	490b      	ldr	r1, [pc, #44]	@ (80028e4 <checkWall+0x84>)
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028c0:	e00a      	b.n	80028d8 <checkWall+0x78>
        case EAST: return verticalWalls[c.x+1][c.y]; // tracking the rightmost walls
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <checkWall+0x88>)
 80028ca:	4613      	mov	r3, r2
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	4413      	add	r3, r2
 80028d0:	440b      	add	r3, r1
 80028d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80028d6:	e7ff      	b.n	80028d8 <checkWall+0x78>
    }
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	2000049c 	.word	0x2000049c
 80028e8:	2000046c 	.word	0x2000046c

080028ec <incrementCoord>:

//advancing locations
// Increments coord in the direction of the heading by input integer, then returns updated coord
coord incrementCoord(Heading heading, coord c, int n)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b08d      	sub	sp, #52	@ 0x34
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	4608      	mov	r0, r1
 80028f6:	4639      	mov	r1, r7
 80028f8:	e881 000c 	stmia.w	r1, {r2, r3}
 80028fc:	4603      	mov	r3, r0
 80028fe:	72fb      	strb	r3, [r7, #11]
    switch (heading) {
 8002900:	7afb      	ldrb	r3, [r7, #11]
 8002902:	2b03      	cmp	r3, #3
 8002904:	d82e      	bhi.n	8002964 <incrementCoord+0x78>
 8002906:	a201      	add	r2, pc, #4	@ (adr r2, 800290c <incrementCoord+0x20>)
 8002908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290c:	0800291d 	.word	0x0800291d
 8002910:	0800292f 	.word	0x0800292f
 8002914:	08002941 	.word	0x08002941
 8002918:	08002953 	.word	0x08002953
        case NORTH: return (coord){ c.x       , c.y + n };
 800291c:	6839      	ldr	r1, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002922:	441a      	add	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6019      	str	r1, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	e01b      	b.n	8002966 <incrementCoord+0x7a>
        case WEST : return (coord){ c.x - n   , c.y     };
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002932:	1ad1      	subs	r1, r2, r3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6019      	str	r1, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	605a      	str	r2, [r3, #4]
 800293e:	e012      	b.n	8002966 <incrementCoord+0x7a>
        case SOUTH: return (coord){ c.x       , c.y - n };
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002946:	1ad2      	subs	r2, r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6019      	str	r1, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	605a      	str	r2, [r3, #4]
 8002950:	e009      	b.n	8002966 <incrementCoord+0x7a>
        case EAST : return (coord){ c.x + n   , c.y     };
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002956:	18d1      	adds	r1, r2, r3
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6019      	str	r1, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	605a      	str	r2, [r3, #4]
 8002962:	e000      	b.n	8002966 <incrementCoord+0x7a>
    }
}
 8002964:	bf00      	nop
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	3734      	adds	r7, #52	@ 0x34
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop

08002974 <API_turnLeft>:

// turns currentHeading global variable to the left based on the mouse's current heading,
// then returns LEFT action
Action API_turnLeft() {
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    currentHeading = (currentHeading+1)%4;
 8002978:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <API_turnLeft+0x2c>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	3301      	adds	r3, #1
 800297e:	425a      	negs	r2, r3
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	f002 0203 	and.w	r2, r2, #3
 8002988:	bf58      	it	pl
 800298a:	4253      	negpl	r3, r2
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b04      	ldr	r3, [pc, #16]	@ (80029a0 <API_turnLeft+0x2c>)
 8002990:	701a      	strb	r2, [r3, #0]
    return LEFT;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000468 	.word	0x20000468

080029a4 <API_turnRight>:

// turns currentHeading global variable to the right based on the mouse's current heading,
// then returns RIGHT action
Action API_turnRight() {
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
    currentHeading = (currentHeading-1)%4;
 80029a8:	4b09      	ldr	r3, [pc, #36]	@ (80029d0 <API_turnRight+0x2c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	425a      	negs	r2, r3
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	f002 0203 	and.w	r2, r2, #3
 80029b8:	bf58      	it	pl
 80029ba:	4253      	negpl	r3, r2
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <API_turnRight+0x2c>)
 80029c0:	701a      	strb	r2, [r3, #0]
    return RIGHT;
 80029c2:	2302      	movs	r3, #2
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000468 	.word	0x20000468

080029d4 <mouseInGoal>:

// returns whether the mouse is in the target
unsigned char mouseInGoal() {
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    return (target == 1 &&
 80029d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <mouseInGoal+0x30>)
 80029da:	781b      	ldrb	r3, [r3, #0]
            currentXY.x == LOWER_X_GOAL &&
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d109      	bne.n	80029f4 <mouseInGoal+0x20>
 80029e0:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <mouseInGoal+0x34>)
 80029e2:	681b      	ldr	r3, [r3, #0]
    return (target == 1 &&
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d105      	bne.n	80029f4 <mouseInGoal+0x20>
            currentXY.y == LOWER_Y_GOAL);
 80029e8:	4b07      	ldr	r3, [pc, #28]	@ (8002a08 <mouseInGoal+0x34>)
 80029ea:	685b      	ldr	r3, [r3, #4]
            currentXY.x == LOWER_X_GOAL &&
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <mouseInGoal+0x20>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <mouseInGoal+0x22>
 80029f4:	2300      	movs	r3, #0
 80029f6:	b2db      	uxtb	r3, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000460 	.word	0x20000460

08002a0c <getNeighbor>:

// given heading and coordinates, returns the floodfill value of the corresponding neighbor cell.
// if the neighbor is off of the maze (argument cell is on the boundary of the maze), return -2
int getNeighbor(Heading heading, coord c)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	e883 0006 	stmia.w	r3, {r1, r2}
 8002a18:	4603      	mov	r3, r0
 8002a1a:	73fb      	strb	r3, [r7, #15]
    switch (heading) {
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d84e      	bhi.n	8002ac0 <getNeighbor+0xb4>
 8002a22:	a201      	add	r2, pc, #4	@ (adr r2, 8002a28 <getNeighbor+0x1c>)
 8002a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a28:	08002a39 	.word	0x08002a39
 8002a2c:	08002a5b 	.word	0x08002a5b
 8002a30:	08002a7d 	.word	0x08002a7d
 8002a34:	08002a9f 	.word	0x08002a9f
        case NORTH:
            if (c.y >= MAZE_HEIGHT-1) return OUT_OF_BOUNDS;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	dd02      	ble.n	8002a44 <getNeighbor+0x38>
 8002a3e:	f06f 0301 	mvn.w	r3, #1
 8002a42:	e03d      	b.n	8002ac0 <getNeighbor+0xb4>
            else return floodArray[c.x][c.y+1];
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1c59      	adds	r1, r3, #1
 8002a4a:	4820      	ldr	r0, [pc, #128]	@ (8002acc <getNeighbor+0xc0>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4413      	add	r3, r2
 8002a52:	440b      	add	r3, r1
 8002a54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a58:	e032      	b.n	8002ac0 <getNeighbor+0xb4>
        case WEST:
            if (c.x <= 0) return OUT_OF_BOUNDS;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	dc02      	bgt.n	8002a66 <getNeighbor+0x5a>
 8002a60:	f06f 0301 	mvn.w	r3, #1
 8002a64:	e02c      	b.n	8002ac0 <getNeighbor+0xb4>
            else return floodArray[c.x-1][c.y];
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	4817      	ldr	r0, [pc, #92]	@ (8002acc <getNeighbor+0xc0>)
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a7a:	e021      	b.n	8002ac0 <getNeighbor+0xb4>
        case SOUTH:
            if (c.y <= 0) return OUT_OF_BOUNDS;
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dc02      	bgt.n	8002a88 <getNeighbor+0x7c>
 8002a82:	f06f 0301 	mvn.w	r3, #1
 8002a86:	e01b      	b.n	8002ac0 <getNeighbor+0xb4>
            else return floodArray[c.x][c.y-1];
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	1e59      	subs	r1, r3, #1
 8002a8e:	480f      	ldr	r0, [pc, #60]	@ (8002acc <getNeighbor+0xc0>)
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002a9c:	e010      	b.n	8002ac0 <getNeighbor+0xb4>
        case EAST:
            if (c.x >= MAZE_WIDTH-1) return OUT_OF_BOUNDS;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	dd02      	ble.n	8002aaa <getNeighbor+0x9e>
 8002aa4:	f06f 0301 	mvn.w	r3, #1
 8002aa8:	e00a      	b.n	8002ac0 <getNeighbor+0xb4>
            else return floodArray[c.x+1][c.y];
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4806      	ldr	r0, [pc, #24]	@ (8002acc <getNeighbor+0xc0>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8002abe:	e7ff      	b.n	8002ac0 <getNeighbor+0xb4>
    }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	200004cc 	.word	0x200004cc

08002ad0 <generateNeighbor>:

void generateNeighbor(queue q, neighbor current, int currentVal) {
 8002ad0:	b084      	sub	sp, #16
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08e      	sub	sp, #56	@ 0x38
 8002ad6:	af02      	add	r7, sp, #8
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8002ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    value of the cell cost for the neighbor
    */
 
    static const Heading directions[4] = {NORTH, EAST, SOUTH, WEST};
 
    for (int i = 0; i < 4; i++) {
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae6:	e05c      	b.n	8002ba2 <generateNeighbor+0xd2>
        Heading heading = i;
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        if (!checkWall(heading, current.coord)){
 8002aee:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8002af2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002af6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002afa:	f7ff feb1 	bl	8002860 <checkWall>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d14b      	bne.n	8002b9c <generateNeighbor+0xcc>
 
            coord nextCoord = incrementCoord(heading, current.coord, 1);
 8002b04:	f107 0018 	add.w	r0, r7, #24
 8002b08:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b14:	cb0c      	ldmia	r3, {r2, r3}
 8002b16:	f7ff fee9 	bl	80028ec <incrementCoord>
            int nextVal = currentVal + TILE_SCORE;
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b1e:	4413      	add	r3, r2
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
            int neighborVal = getNeighbor(heading, current.coord);
 8002b22:	f897 002b 	ldrb.w	r0, [r7, #43]	@ 0x2b
 8002b26:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002b2a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b2e:	f7ff ff6d 	bl	8002a0c <getNeighbor>
 8002b32:	6238      	str	r0, [r7, #32]
 
            if (neighborVal == NOT_YET_SET || nextVal < neighborVal) {
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3a:	d003      	beq.n	8002b44 <generateNeighbor+0x74>
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	da2b      	bge.n	8002b9c <generateNeighbor+0xcc>
                neighbor n;
                n.coord = nextCoord;
 8002b44:	f107 0308 	add.w	r3, r7, #8
 8002b48:	f107 0218 	add.w	r2, r7, #24
 8002b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002b50:	e883 0003 	stmia.w	r3, {r0, r1}
                n.heading = heading;
 8002b54:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b58:	743b      	strb	r3, [r7, #16]
                queue_push(q, n);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	f107 0308 	add.w	r3, r7, #8
 8002b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fcf7 	bl	8002558 <queue_push>
                updateFloodArray(nextCoord, nextVal);
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	f107 0318 	add.w	r3, r7, #24
 8002b70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b74:	f7ff fdb8 	bl	80026e8 <updateFloodArray>
                updatePathArray(nextCoord, (heading + 2) % 4);
 8002b78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	425a      	negs	r2, r3
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	f002 0203 	and.w	r2, r2, #3
 8002b88:	bf58      	it	pl
 8002b8a:	4253      	negpl	r3, r2
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	f107 0318 	add.w	r3, r7, #24
 8002b94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002b98:	f7ff fdd8 	bl	800274c <updatePathArray>
    for (int i = 0; i < 4; i++) {
 8002b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	dd9f      	ble.n	8002ae8 <generateNeighbor+0x18>
    }
   
 
 
    
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3730      	adds	r7, #48	@ 0x30
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bb4:	b004      	add	sp, #16
 8002bb6:	4770      	bx	lr

08002bb8 <floodFill>:

// updates the floodfill array based on known walls
void floodFill() {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b0a2      	sub	sp, #136	@ 0x88
 8002bbc:	af02      	add	r7, sp, #8

    // set non-goal values to blank so that the floodfill array can be recalculated
    resetFloodArray();
 8002bbe:	f7ff fdf9 	bl	80027b4 <resetFloodArray>

    // declare/initialize relevant variables for queue for floodfill algorithm
    queue q = queue_create();
 8002bc2:	f7ff fca1 	bl	8002508 <queue_create>
 8002bc6:	6778      	str	r0, [r7, #116]	@ 0x74

    // iterate through the 2D array, find goal values and add them to the queue
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8002bc8:	2300      	movs	r3, #0
 8002bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bcc:	e059      	b.n	8002c82 <floodFill+0xca>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8002bce:	2300      	movs	r3, #0
 8002bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002bd2:	e050      	b.n	8002c76 <floodFill+0xbe>
            if (floodArray[x][y] == 0) {
 8002bd4:	493c      	ldr	r1, [pc, #240]	@ (8002cc8 <floodFill+0x110>)
 8002bd6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8002be0:	4413      	add	r3, r2
 8002be2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d142      	bne.n	8002c70 <floodFill+0xb8>
                // for the starting goal values, it doesn't matter which direction you approach them from.
                // as such, they should be oriented from all directions
                queue_push(q,(neighbor){(coord){x,y},NORTH,0});
 8002bea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c06:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002c08:	f7ff fca6 	bl	8002558 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},WEST,0});
 8002c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c28:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002c2a:	f7ff fc95 	bl	8002558 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},SOUTH,0});
 8002c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c36:	2302      	movs	r3, #2
 8002c38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002c4c:	f7ff fc84 	bl	8002558 <queue_push>
                queue_push(q,(neighbor){(coord){x,y},EAST,0});
 8002c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	2303      	movs	r3, #3
 8002c5a:	763b      	strb	r3, [r7, #24]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	61fb      	str	r3, [r7, #28]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	f107 0310 	add.w	r3, r7, #16
 8002c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c6a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002c6c:	f7ff fc74 	bl	8002558 <queue_push>
        for (int y = 0; y < MAZE_HEIGHT; y++) {
 8002c70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c72:	3301      	adds	r3, #1
 8002c74:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	ddab      	ble.n	8002bd4 <floodFill+0x1c>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8002c7c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c7e:	3301      	adds	r3, #1
 8002c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	dda2      	ble.n	8002bce <floodFill+0x16>
            }
        }
    }

    // adds available neighbors to queue and updates their floodfill values
    while (!queue_is_empty(q)) {
 8002c88:	e013      	b.n	8002cb2 <floodFill+0xfa>
        // initializes values for calculating floodfills for neighbors
        neighbor current = queue_pop(q);
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fcaa 	bl	80025e8 <queue_pop>
        int currentVal = getFloodArray(current.coord);
 8002c94:	463b      	mov	r3, r7
 8002c96:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002c9a:	f7ff fd3f 	bl	800271c <getFloodArray>
 8002c9e:	6738      	str	r0, [r7, #112]	@ 0x70

        // prints the current cell's floodfill number to the simulation screen
     
        generateNeighbor(q,current,currentVal);       
 8002ca0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	463b      	mov	r3, r7
 8002caa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cac:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002cae:	f7ff ff0f 	bl	8002ad0 <generateNeighbor>
    while (!queue_is_empty(q)) {
 8002cb2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8002cb4:	f7ff fce0 	bl	8002678 <queue_is_empty>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0e5      	beq.n	8002c8a <floodFill+0xd2>
    }
}
 8002cbe:	bf00      	nop
 8002cc0:	bf00      	nop
 8002cc2:	3780      	adds	r7, #128	@ 0x80
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	200004cc 	.word	0x200004cc

08002ccc <placeWall>:

// places a wall in respective arrays and API at the given heading and coordinate
void placeWall(Heading heading, coord c) {
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	1d3b      	adds	r3, r7, #4
 8002cd4:	e883 0006 	stmia.w	r3, {r1, r2}
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
    // sets a wall in the wall arrays
    switch (heading) {
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d834      	bhi.n	8002d4c <placeWall+0x80>
 8002ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce8 <placeWall+0x1c>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002d0d 	.word	0x08002d0d
 8002cf0:	08002d23 	.word	0x08002d23
 8002cf4:	08002d35 	.word	0x08002d35
        case NORTH:
            horizontalWalls[c.x][c.y+1] = 1;
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	4916      	ldr	r1, [pc, #88]	@ (8002d58 <placeWall+0x8c>)
 8002d00:	0092      	lsls	r2, r2, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	2201      	movs	r2, #1
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return;
 8002d0a:	e01f      	b.n	8002d4c <placeWall+0x80>
        case WEST:
            verticalWalls[c.x][c.y] = 1;
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	4812      	ldr	r0, [pc, #72]	@ (8002d5c <placeWall+0x90>)
 8002d12:	4613      	mov	r3, r2
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	4413      	add	r3, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            return;
 8002d20:	e014      	b.n	8002d4c <placeWall+0x80>
        case SOUTH:
            horizontalWalls[c.x][c.y] = 1;
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	490c      	ldr	r1, [pc, #48]	@ (8002d58 <placeWall+0x8c>)
 8002d28:	0092      	lsls	r2, r2, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            return;
 8002d32:	e00b      	b.n	8002d4c <placeWall+0x80>
        case EAST:
            verticalWalls[c.x+1][c.y] = 1;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	4808      	ldr	r0, [pc, #32]	@ (8002d5c <placeWall+0x90>)
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	440b      	add	r3, r1
 8002d44:	2201      	movs	r2, #1
 8002d46:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
            return;
 8002d4a:	bf00      	nop
    }
}
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	2000049c 	.word	0x2000049c
 8002d5c:	2000046c 	.word	0x2000046c

08002d60 <generateInitialWalls>:

void generateInitialWalls() {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
    //placing walls along the southern and northern edges for each column
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8002d66:	2300      	movs	r3, #0
 8002d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d6a:	e018      	b.n	8002d9e <generateInitialWalls+0x3e>
        placeWall(SOUTH,(coord){x,0});
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
 8002d74:	f107 0318 	add.w	r3, r7, #24
 8002d78:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d7c:	2002      	movs	r0, #2
 8002d7e:	f7ff ffa5 	bl	8002ccc <placeWall>
        placeWall(NORTH,(coord){x,MAZE_HEIGHT-1});
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	2302      	movs	r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002d92:	2000      	movs	r0, #0
 8002d94:	f7ff ff9a 	bl	8002ccc <placeWall>
    for (int x = 0; x < MAZE_WIDTH; x++) {
 8002d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	dde3      	ble.n	8002d6c <generateInitialWalls+0xc>
    }
    //plaicing walls along the western and eastern edges for each row
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 8002da4:	2300      	movs	r3, #0
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	e017      	b.n	8002dda <generateInitialWalls+0x7a>
        placeWall(WEST,(coord){0,y});
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff ff86 	bl	8002ccc <placeWall>
        placeWall(EAST,(coord){MAZE_WIDTH-1,y});
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	603b      	str	r3, [r7, #0]
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	463b      	mov	r3, r7
 8002dca:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002dce:	2003      	movs	r0, #3
 8002dd0:	f7ff ff7c 	bl	8002ccc <placeWall>
    for (int y = 0; y < MAZE_HEIGHT; y++) {
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	623b      	str	r3, [r7, #32]
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	dde4      	ble.n	8002daa <generateInitialWalls+0x4a>
    }
}
 8002de0:	bf00      	nop
 8002de2:	bf00      	nop
 8002de4:	3728      	adds	r7, #40	@ 0x28
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <updateWalls>:

// checks for and then updates the walls for the current cell
//WILL NEED TO READ IN SENSOR DATA HERE
void updateWalls()
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
    // based on the current heading, places walls at the respective locations
    //can potentially change the API functions with our own for final implementation
    if (wallFront()) placeWall(currentHeading,currentXY);
 8002df0:	f7fe f938 	bl	8001064 <wallFront>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <updateWalls+0x1c>
 8002dfa:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <updateWalls+0x74>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <updateWalls+0x78>)
 8002e00:	ca06      	ldmia	r2, {r1, r2}
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff62 	bl	8002ccc <placeWall>
    if (wallLeft()) placeWall((currentHeading+1)%4,currentXY);
 8002e08:	f7fe f90c 	bl	8001024 <wallLeft>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <updateWalls+0x46>
 8002e12:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <updateWalls+0x74>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	425a      	negs	r2, r3
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	f002 0203 	and.w	r2, r2, #3
 8002e22:	bf58      	it	pl
 8002e24:	4253      	negpl	r3, r2
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4a0e      	ldr	r2, [pc, #56]	@ (8002e64 <updateWalls+0x78>)
 8002e2a:	ca06      	ldmia	r2, {r1, r2}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff4d 	bl	8002ccc <placeWall>
    if (wallRight()) placeWall((currentHeading-1)%4,currentXY);
 8002e32:	f7fe f907 	bl	8001044 <wallRight>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00f      	beq.n	8002e5c <updateWalls+0x70>
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <updateWalls+0x74>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	425a      	negs	r2, r3
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	f002 0203 	and.w	r2, r2, #3
 8002e4c:	bf58      	it	pl
 8002e4e:	4253      	negpl	r3, r2
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	4a04      	ldr	r2, [pc, #16]	@ (8002e64 <updateWalls+0x78>)
 8002e54:	ca06      	ldmia	r2, {r1, r2}
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff38 	bl	8002ccc <placeWall>
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000468 	.word	0x20000468
 8002e64:	20000460 	.word	0x20000460

08002e68 <nextAction>:

// based on updated wall and floodfill information, return the next action that the mouse should do
Action nextAction() {
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af02      	add	r7, sp, #8
    // 1) If we are already in the goal and we want to stay there, do nothing
    if (mouseInGoal()) {
 8002e6e:	f7ff fdb1 	bl	80029d4 <mouseInGoal>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <nextAction+0x14>
        return IDLE;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e055      	b.n	8002f28 <nextAction+0xc0>
    }

    // 2) Determine the heading we *want* to move toward from flood-fill (path array)
    Heading desiredHeading = getPathArray(currentXY);
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f30 <nextAction+0xc8>)
 8002e7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002e82:	f7ff fc7f 	bl	8002784 <getPathArray>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]

    // 3) If our current heading is already correct, move forward one cell if no wall
    if (currentHeading == desiredHeading) {
 8002e8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002f34 <nextAction+0xcc>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	7bfa      	ldrb	r2, [r7, #15]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d122      	bne.n	8002eda <nextAction+0x72>
        if (!checkWall(desiredHeading, currentXY)) {
 8002e94:	4a26      	ldr	r2, [pc, #152]	@ (8002f30 <nextAction+0xc8>)
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	ca06      	ldmia	r2, {r1, r2}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fce0 	bl	8002860 <checkWall>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d115      	bne.n	8002ed2 <nextAction+0x6a>
            // Move forward one cell
            // Update our internal position & mark it visited
            currentXY = incrementCoord(desiredHeading, currentXY, 1);
 8002ea6:	4c22      	ldr	r4, [pc, #136]	@ (8002f30 <nextAction+0xc8>)
 8002ea8:	4638      	mov	r0, r7
 8002eaa:	4b21      	ldr	r3, [pc, #132]	@ (8002f30 <nextAction+0xc8>)
 8002eac:	7bf9      	ldrb	r1, [r7, #15]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	9200      	str	r2, [sp, #0]
 8002eb2:	cb0c      	ldmia	r3, {r2, r3}
 8002eb4:	f7ff fd1a 	bl	80028ec <incrementCoord>
 8002eb8:	4622      	mov	r2, r4
 8002eba:	463b      	mov	r3, r7
 8002ebc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002ec0:	e882 0003 	stmia.w	r2, {r0, r1}
            updateTravelArray(currentXY);
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f30 <nextAction+0xc8>)
 8002ec6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002eca:	f7ff fbf5 	bl	80026b8 <updateTravelArray>
            return FORWARD;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e02a      	b.n	8002f28 <nextAction+0xc0>
        } else {
            // There is a wall in front even though the flood-fill suggests forward.
            // For a simple fallback, just turn left. (You can decide any fallback you like.)
            return API_turnLeft();
 8002ed2:	f7ff fd4f 	bl	8002974 <API_turnLeft>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	e026      	b.n	8002f28 <nextAction+0xc0>
    }

    // 4) Otherwise, we need to turn until we face the desired heading.

    // Turning left: currentHeading + 1 == desiredHeading (mod 4).
    if ((currentHeading + 1) % 4 == desiredHeading) {
 8002eda:	4b16      	ldr	r3, [pc, #88]	@ (8002f34 <nextAction+0xcc>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	425a      	negs	r2, r3
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	f002 0203 	and.w	r2, r2, #3
 8002eea:	bf58      	it	pl
 8002eec:	4253      	negpl	r3, r2
 8002eee:	7bfa      	ldrb	r2, [r7, #15]
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d103      	bne.n	8002efc <nextAction+0x94>
        return API_turnLeft();
 8002ef4:	f7ff fd3e 	bl	8002974 <API_turnLeft>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	e015      	b.n	8002f28 <nextAction+0xc0>
    }
    // Turning right: currentHeading - 1 == desiredHeading (mod 4), 
    // or equivalently currentHeading + 3 == desiredHeading (mod 4).
    if ((currentHeading + 3) % 4 == desiredHeading) {
 8002efc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <nextAction+0xcc>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3303      	adds	r3, #3
 8002f02:	425a      	negs	r2, r3
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	f002 0203 	and.w	r2, r2, #3
 8002f0c:	bf58      	it	pl
 8002f0e:	4253      	negpl	r3, r2
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d103      	bne.n	8002f1e <nextAction+0xb6>
        return API_turnRight();
 8002f16:	f7ff fd45 	bl	80029a4 <API_turnRight>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	e004      	b.n	8002f28 <nextAction+0xc0>
    }

    // If the desired heading is 180 degrees behind us, just do two lefts (or two rights).
    API_turnLeft();
 8002f1e:	f7ff fd29 	bl	8002974 <API_turnLeft>
    API_turnLeft();
 8002f22:	f7ff fd27 	bl	8002974 <API_turnLeft>
    return TURNAROUND;
 8002f26:	2304      	movs	r3, #4
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd90      	pop	{r4, r7, pc}
 8002f30:	20000460 	.word	0x20000460
 8002f34:	20000468 	.word	0x20000468

08002f38 <checkDestination>:


// checks if the mouse has reached its target
void checkDestination()
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
    
    if (target) {
 8002f3e:	4b16      	ldr	r3, [pc, #88]	@ (8002f98 <checkDestination+0x60>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d018      	beq.n	8002f78 <checkDestination+0x40>
        if (mouseInGoal()) {
 8002f46:	f7ff fd45 	bl	80029d4 <mouseInGoal>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01e      	beq.n	8002f8e <checkDestination+0x56>
            if (RESET_AT_CENTER) {
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <checkDestination+0x32>
                currentXY = (coord){0,0};
 8002f56:	4b11      	ldr	r3, [pc, #68]	@ (8002f9c <checkDestination+0x64>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <checkDestination+0x64>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	605a      	str	r2, [r3, #4]
                currentHeading = NORTH;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <checkDestination+0x68>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	701a      	strb	r2, [r3, #0]
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y) {
        target = 1;
    }
        //returning = 0;
    
}
 8002f68:	e011      	b.n	8002f8e <checkDestination+0x56>
            else if (!STAY_AT_CENTER) {
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10e      	bne.n	8002f8e <checkDestination+0x56>
                target = 0;       
 8002f70:	4b09      	ldr	r3, [pc, #36]	@ (8002f98 <checkDestination+0x60>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
}
 8002f76:	e00a      	b.n	8002f8e <checkDestination+0x56>
    } else if (currentXY.x == STARTING_X && currentXY.y == STARTING_Y) {
 8002f78:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <checkDestination+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <checkDestination+0x56>
 8002f80:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <checkDestination+0x64>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <checkDestination+0x56>
        target = 1;
 8002f88:	4b03      	ldr	r3, [pc, #12]	@ (8002f98 <checkDestination+0x60>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	20000460 	.word	0x20000460
 8002fa0:	20000468 	.word	0x20000468

08002fa4 <solver>:


// sends the mouse's recommended next action back to main
Action solver() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
    checkDestination();
 8002fa8:	f7ff ffc6 	bl	8002f38 <checkDestination>
    updateWalls();    
 8002fac:	f7ff ff1e 	bl	8002dec <updateWalls>
    floodFill();
 8002fb0:	f7ff fe02 	bl	8002bb8 <floodFill>
    return nextAction();
 8002fb4:	f7ff ff58 	bl	8002e68 <nextAction>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
 8002fca:	4b10      	ldr	r3, [pc, #64]	@ (800300c <HAL_MspInit+0x4c>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fce:	4a0f      	ldr	r2, [pc, #60]	@ (800300c <HAL_MspInit+0x4c>)
 8002fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800300c <HAL_MspInit+0x4c>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	603b      	str	r3, [r7, #0]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <HAL_MspInit+0x4c>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	4a08      	ldr	r2, [pc, #32]	@ (800300c <HAL_MspInit+0x4c>)
 8002fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff2:	4b06      	ldr	r3, [pc, #24]	@ (800300c <HAL_MspInit+0x4c>)
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ffe:	2007      	movs	r0, #7
 8003000:	f000 fc12 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003004:	bf00      	nop
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40023800 	.word	0x40023800

08003010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08a      	sub	sp, #40	@ 0x28
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	f107 0314 	add.w	r3, r7, #20
 800301c:	2200      	movs	r2, #0
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	60da      	str	r2, [r3, #12]
 8003026:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	@ (8003094 <HAL_I2C_MspInit+0x84>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d12c      	bne.n	800308c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	613b      	str	r3, [r7, #16]
 8003036:	4b18      	ldr	r3, [pc, #96]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a17      	ldr	r2, [pc, #92]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 800303c:	f043 0302 	orr.w	r3, r3, #2
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	613b      	str	r3, [r7, #16]
 800304c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800304e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003054:	2312      	movs	r3, #18
 8003056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003060:	2304      	movs	r3, #4
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	480c      	ldr	r0, [pc, #48]	@ (800309c <HAL_I2C_MspInit+0x8c>)
 800306c:	f000 fc1e 	bl	80038ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	4b08      	ldr	r3, [pc, #32]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003078:	4a07      	ldr	r2, [pc, #28]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 800307a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800307e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_I2C_MspInit+0x88>)
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800308c:	bf00      	nop
 800308e:	3728      	adds	r7, #40	@ 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40005400 	.word	0x40005400
 8003098:	40023800 	.word	0x40023800
 800309c:	40020400 	.word	0x40020400

080030a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08c      	sub	sp, #48	@ 0x30
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 031c 	add.w	r3, r7, #28
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a32      	ldr	r2, [pc, #200]	@ (8003188 <HAL_TIM_Encoder_MspInit+0xe8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12d      	bne.n	800311e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	4b31      	ldr	r3, [pc, #196]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a30      	ldr	r2, [pc, #192]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d2:	4b2e      	ldr	r3, [pc, #184]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
 80030dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	4b2a      	ldr	r3, [pc, #168]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4a29      	ldr	r2, [pc, #164]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ee:	4b27      	ldr	r3, [pc, #156]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80030fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003108:	2300      	movs	r3, #0
 800310a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800310c:	2301      	movs	r3, #1
 800310e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	4619      	mov	r1, r3
 8003116:	481e      	ldr	r0, [pc, #120]	@ (8003190 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003118:	f000 fbc8 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800311c:	e030      	b.n	8003180 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d12b      	bne.n	8003180 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003128:	2300      	movs	r3, #0
 800312a:	613b      	str	r3, [r7, #16]
 800312c:	4b17      	ldr	r3, [pc, #92]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a16      	ldr	r2, [pc, #88]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	613b      	str	r3, [r7, #16]
 8003142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	4b10      	ldr	r3, [pc, #64]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	4a0f      	ldr	r2, [pc, #60]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 800314e:	f043 0302 	orr.w	r3, r3, #2
 8003152:	6313      	str	r3, [r2, #48]	@ 0x30
 8003154:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <HAL_TIM_Encoder_MspInit+0xec>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003160:	23c0      	movs	r3, #192	@ 0xc0
 8003162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003164:	2302      	movs	r3, #2
 8003166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003168:	2300      	movs	r3, #0
 800316a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800316c:	2300      	movs	r3, #0
 800316e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003170:	2302      	movs	r3, #2
 8003172:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	f107 031c 	add.w	r3, r7, #28
 8003178:	4619      	mov	r1, r3
 800317a:	4807      	ldr	r0, [pc, #28]	@ (8003198 <HAL_TIM_Encoder_MspInit+0xf8>)
 800317c:	f000 fb96 	bl	80038ac <HAL_GPIO_Init>
}
 8003180:	bf00      	nop
 8003182:	3730      	adds	r7, #48	@ 0x30
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40010000 	.word	0x40010000
 800318c:	40023800 	.word	0x40023800
 8003190:	40020000 	.word	0x40020000
 8003194:	40000800 	.word	0x40000800
 8003198:	40020400 	.word	0x40020400

0800319c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d10d      	bne.n	80031ca <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_TIM_PWM_MspInit+0x40>)
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	4a09      	ldr	r2, [pc, #36]	@ (80031dc <HAL_TIM_PWM_MspInit+0x40>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80031be:	4b07      	ldr	r3, [pc, #28]	@ (80031dc <HAL_TIM_PWM_MspInit+0x40>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	40000400 	.word	0x40000400
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003228 <HAL_TIM_Base_MspInit+0x48>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d115      	bne.n	800321e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <HAL_TIM_Base_MspInit+0x4c>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <HAL_TIM_Base_MspInit+0x4c>)
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	6413      	str	r3, [r2, #64]	@ 0x40
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_TIM_Base_MspInit+0x4c>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2100      	movs	r1, #0
 8003212:	2036      	movs	r0, #54	@ 0x36
 8003214:	f000 fb13 	bl	800383e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003218:	2036      	movs	r0, #54	@ 0x36
 800321a:	f000 fb2c 	bl	8003876 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40001000 	.word	0x40001000
 800322c:	40023800 	.word	0x40023800

08003230 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	@ 0x28
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003238:	f107 0314 	add.w	r3, r7, #20
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	609a      	str	r2, [r3, #8]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a21      	ldr	r2, [pc, #132]	@ (80032d4 <HAL_TIM_MspPostInit+0xa4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d13c      	bne.n	80032cc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	613b      	str	r3, [r7, #16]
 8003256:	4b20      	ldr	r3, [pc, #128]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	4a1f      	ldr	r2, [pc, #124]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 800325c:	f043 0301 	orr.w	r3, r3, #1
 8003260:	6313      	str	r3, [r2, #48]	@ 0x30
 8003262:	4b1d      	ldr	r3, [pc, #116]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b19      	ldr	r3, [pc, #100]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003276:	4a18      	ldr	r2, [pc, #96]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6313      	str	r3, [r2, #48]	@ 0x30
 800327e:	4b16      	ldr	r3, [pc, #88]	@ (80032d8 <HAL_TIM_MspPostInit+0xa8>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800328a:	23c0      	movs	r3, #192	@ 0xc0
 800328c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328e:	2302      	movs	r3, #2
 8003290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800329a:	2302      	movs	r3, #2
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	f107 0314 	add.w	r3, r7, #20
 80032a2:	4619      	mov	r1, r3
 80032a4:	480d      	ldr	r0, [pc, #52]	@ (80032dc <HAL_TIM_MspPostInit+0xac>)
 80032a6:	f000 fb01 	bl	80038ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80032ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b0:	2302      	movs	r3, #2
 80032b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b8:	2300      	movs	r3, #0
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80032bc:	2302      	movs	r3, #2
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032c0:	f107 0314 	add.w	r3, r7, #20
 80032c4:	4619      	mov	r1, r3
 80032c6:	4806      	ldr	r0, [pc, #24]	@ (80032e0 <HAL_TIM_MspPostInit+0xb0>)
 80032c8:	f000 faf0 	bl	80038ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80032cc:	bf00      	nop
 80032ce:	3728      	adds	r7, #40	@ 0x28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020000 	.word	0x40020000
 80032e0:	40020800 	.word	0x40020800

080032e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032e8:	bf00      	nop
 80032ea:	e7fd      	b.n	80032e8 <NMI_Handler+0x4>

080032ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f0:	bf00      	nop
 80032f2:	e7fd      	b.n	80032f0 <HardFault_Handler+0x4>

080032f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <MemManage_Handler+0x4>

080032fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003300:	bf00      	nop
 8003302:	e7fd      	b.n	8003300 <BusFault_Handler+0x4>

08003304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003308:	bf00      	nop
 800330a:	e7fd      	b.n	8003308 <UsageFault_Handler+0x4>

0800330c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331a:	b480      	push	{r7}
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333a:	f000 f961 	bl	8003600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800333e:	bf00      	nop
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003348:	4802      	ldr	r0, [pc, #8]	@ (8003354 <TIM6_DAC_IRQHandler+0x10>)
 800334a:	f002 fe8d 	bl	8006068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20000418 	.word	0x20000418

08003358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return 1;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_kill>:

int _kill(int pid, int sig)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003372:	f004 fdaf 	bl	8007ed4 <__errno>
 8003376:	4603      	mov	r3, r0
 8003378:	2216      	movs	r2, #22
 800337a:	601a      	str	r2, [r3, #0]
  return -1;
 800337c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003380:	4618      	mov	r0, r3
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <_exit>:

void _exit (int status)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffe7 	bl	8003368 <_kill>
  while (1) {}    /* Make sure we hang here */
 800339a:	bf00      	nop
 800339c:	e7fd      	b.n	800339a <_exit+0x12>

0800339e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
 80033ae:	e00a      	b.n	80033c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80033b0:	f3af 8000 	nop.w
 80033b4:	4601      	mov	r1, r0
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	60ba      	str	r2, [r7, #8]
 80033bc:	b2ca      	uxtb	r2, r1
 80033be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3301      	adds	r3, #1
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	dbf0      	blt.n	80033b0 <_read+0x12>
  }

  return len;
 80033ce:	687b      	ldr	r3, [r7, #4]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3718      	adds	r7, #24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033e4:	2300      	movs	r3, #0
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	e009      	b.n	80033fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	1c5a      	adds	r2, r3, #1
 80033ee:	60ba      	str	r2, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	3301      	adds	r3, #1
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	697a      	ldr	r2, [r7, #20]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	dbf1      	blt.n	80033ea <_write+0x12>
  }
  return len;
 8003406:	687b      	ldr	r3, [r7, #4]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <_close>:

int _close(int file)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003438:	605a      	str	r2, [r3, #4]
  return 0;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_isatty>:

int _isatty(int file)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003450:	2301      	movs	r3, #1
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800345e:	b480      	push	{r7}
 8003460:	b085      	sub	sp, #20
 8003462:	af00      	add	r7, sp, #0
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	60b9      	str	r1, [r7, #8]
 8003468:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003480:	4a14      	ldr	r2, [pc, #80]	@ (80034d4 <_sbrk+0x5c>)
 8003482:	4b15      	ldr	r3, [pc, #84]	@ (80034d8 <_sbrk+0x60>)
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800348c:	4b13      	ldr	r3, [pc, #76]	@ (80034dc <_sbrk+0x64>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003494:	4b11      	ldr	r3, [pc, #68]	@ (80034dc <_sbrk+0x64>)
 8003496:	4a12      	ldr	r2, [pc, #72]	@ (80034e0 <_sbrk+0x68>)
 8003498:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800349a:	4b10      	ldr	r3, [pc, #64]	@ (80034dc <_sbrk+0x64>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4413      	add	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d207      	bcs.n	80034b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034a8:	f004 fd14 	bl	8007ed4 <__errno>
 80034ac:	4603      	mov	r3, r0
 80034ae:	220c      	movs	r2, #12
 80034b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	e009      	b.n	80034cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034b8:	4b08      	ldr	r3, [pc, #32]	@ (80034dc <_sbrk+0x64>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034be:	4b07      	ldr	r3, [pc, #28]	@ (80034dc <_sbrk+0x64>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	4a05      	ldr	r2, [pc, #20]	@ (80034dc <_sbrk+0x64>)
 80034c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034ca:	68fb      	ldr	r3, [r7, #12]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20020000 	.word	0x20020000
 80034d8:	00000400 	.word	0x00000400
 80034dc:	20000520 	.word	0x20000520
 80034e0:	20000678 	.word	0x20000678

080034e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034e8:	4b06      	ldr	r3, [pc, #24]	@ (8003504 <SystemInit+0x20>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	4a05      	ldr	r2, [pc, #20]	@ (8003504 <SystemInit+0x20>)
 80034f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80034f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8003508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003540 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800350c:	f7ff ffea 	bl	80034e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003510:	480c      	ldr	r0, [pc, #48]	@ (8003544 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003512:	490d      	ldr	r1, [pc, #52]	@ (8003548 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003514:	4a0d      	ldr	r2, [pc, #52]	@ (800354c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003518:	e002      	b.n	8003520 <LoopCopyDataInit>

0800351a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800351a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800351c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800351e:	3304      	adds	r3, #4

08003520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003524:	d3f9      	bcc.n	800351a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003526:	4a0a      	ldr	r2, [pc, #40]	@ (8003550 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003528:	4c0a      	ldr	r4, [pc, #40]	@ (8003554 <LoopFillZerobss+0x22>)
  movs r3, #0
 800352a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800352c:	e001      	b.n	8003532 <LoopFillZerobss>

0800352e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800352e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003530:	3204      	adds	r2, #4

08003532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003534:	d3fb      	bcc.n	800352e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003536:	f004 fcd3 	bl	8007ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800353a:	f7fe fb8d 	bl	8001c58 <main>
  bx  lr    
 800353e:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 8003540:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003548:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800354c:	0800cd88 	.word	0x0800cd88
  ldr r2, =_sbss
 8003550:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8003554:	20000674 	.word	0x20000674

08003558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003558:	e7fe      	b.n	8003558 <ADC_IRQHandler>
	...

0800355c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <HAL_Init+0x40>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a0d      	ldr	r2, [pc, #52]	@ (800359c <HAL_Init+0x40>)
 8003566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800356a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800356c:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <HAL_Init+0x40>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0a      	ldr	r2, [pc, #40]	@ (800359c <HAL_Init+0x40>)
 8003572:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003576:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_Init+0x40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a07      	ldr	r2, [pc, #28]	@ (800359c <HAL_Init+0x40>)
 800357e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003582:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003584:	2003      	movs	r0, #3
 8003586:	f000 f94f 	bl	8003828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800358a:	2000      	movs	r0, #0
 800358c:	f000 f808 	bl	80035a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003590:	f7ff fd16 	bl	8002fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023c00 	.word	0x40023c00

080035a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035a8:	4b12      	ldr	r3, [pc, #72]	@ (80035f4 <HAL_InitTick+0x54>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <HAL_InitTick+0x58>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	4619      	mov	r1, r3
 80035b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80035ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f967 	bl	8003892 <HAL_SYSTICK_Config>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00e      	b.n	80035ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2b0f      	cmp	r3, #15
 80035d2:	d80a      	bhi.n	80035ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035d4:	2200      	movs	r2, #0
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295
 80035dc:	f000 f92f 	bl	800383e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035e0:	4a06      	ldr	r2, [pc, #24]	@ (80035fc <HAL_InitTick+0x5c>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e000      	b.n	80035ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20000004 	.word	0x20000004
 80035f8:	2000000c 	.word	0x2000000c
 80035fc:	20000008 	.word	0x20000008

08003600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_IncTick+0x20>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	461a      	mov	r2, r3
 800360a:	4b06      	ldr	r3, [pc, #24]	@ (8003624 <HAL_IncTick+0x24>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4413      	add	r3, r2
 8003610:	4a04      	ldr	r2, [pc, #16]	@ (8003624 <HAL_IncTick+0x24>)
 8003612:	6013      	str	r3, [r2, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	2000000c 	.word	0x2000000c
 8003624:	20000524 	.word	0x20000524

08003628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return uwTick;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_GetTick+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000524 	.word	0x20000524

08003640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff ffee 	bl	8003628 <HAL_GetTick>
 800364c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d005      	beq.n	8003666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800365a:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <HAL_Delay+0x44>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	461a      	mov	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003666:	bf00      	nop
 8003668:	f7ff ffde 	bl	8003628 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	429a      	cmp	r2, r3
 8003676:	d8f7      	bhi.n	8003668 <HAL_Delay+0x28>
  {
  }
}
 8003678:	bf00      	nop
 800367a:	bf00      	nop
 800367c:	3710      	adds	r7, #16
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000000c 	.word	0x2000000c

08003688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036a4:	4013      	ands	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036ba:	4a04      	ldr	r2, [pc, #16]	@ (80036cc <__NVIC_SetPriorityGrouping+0x44>)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	60d3      	str	r3, [r2, #12]
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d4:	4b04      	ldr	r3, [pc, #16]	@ (80036e8 <__NVIC_GetPriorityGrouping+0x18>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	0a1b      	lsrs	r3, r3, #8
 80036da:	f003 0307 	and.w	r3, r3, #7
}
 80036de:	4618      	mov	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	e000ed00 	.word	0xe000ed00

080036ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	f003 021f 	and.w	r2, r3, #31
 8003704:	4907      	ldr	r1, [pc, #28]	@ (8003724 <__NVIC_EnableIRQ+0x38>)
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	2001      	movs	r0, #1
 800370e:	fa00 f202 	lsl.w	r2, r0, r2
 8003712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000e100 	.word	0xe000e100

08003728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	@ (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	@ (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377c:	b480      	push	{r7}
 800377e:	b089      	sub	sp, #36	@ 0x24
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f1c3 0307 	rsb	r3, r3, #7
 8003796:	2b04      	cmp	r3, #4
 8003798:	bf28      	it	cs
 800379a:	2304      	movcs	r3, #4
 800379c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d902      	bls.n	80037ac <NVIC_EncodePriority+0x30>
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3b03      	subs	r3, #3
 80037aa:	e000      	b.n	80037ae <NVIC_EncodePriority+0x32>
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	401a      	ands	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c4:	f04f 31ff 	mov.w	r1, #4294967295
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	fa01 f303 	lsl.w	r3, r1, r3
 80037ce:	43d9      	mvns	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	4313      	orrs	r3, r2
         );
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3724      	adds	r7, #36	@ 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
	...

080037e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037f4:	d301      	bcc.n	80037fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f6:	2301      	movs	r3, #1
 80037f8:	e00f      	b.n	800381a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003824 <SysTick_Config+0x40>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3b01      	subs	r3, #1
 8003800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003802:	210f      	movs	r1, #15
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	f7ff ff8e 	bl	8003728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800380c:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <SysTick_Config+0x40>)
 800380e:	2200      	movs	r2, #0
 8003810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003812:	4b04      	ldr	r3, [pc, #16]	@ (8003824 <SysTick_Config+0x40>)
 8003814:	2207      	movs	r2, #7
 8003816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	e000e010 	.word	0xe000e010

08003828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ff29 	bl	8003688 <__NVIC_SetPriorityGrouping>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383e:	b580      	push	{r7, lr}
 8003840:	b086      	sub	sp, #24
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003850:	f7ff ff3e 	bl	80036d0 <__NVIC_GetPriorityGrouping>
 8003854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	68b9      	ldr	r1, [r7, #8]
 800385a:	6978      	ldr	r0, [r7, #20]
 800385c:	f7ff ff8e 	bl	800377c <NVIC_EncodePriority>
 8003860:	4602      	mov	r2, r0
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff ff5d 	bl	8003728 <__NVIC_SetPriority>
}
 800386e:	bf00      	nop
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff ff31 	bl	80036ec <__NVIC_EnableIRQ>
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ffa2 	bl	80037e4 <SysTick_Config>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b089      	sub	sp, #36	@ 0x24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038ba:	2300      	movs	r3, #0
 80038bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038be:	2300      	movs	r3, #0
 80038c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	2300      	movs	r3, #0
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	e165      	b.n	8003b94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	f040 8154 	bne.w	8003b8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d005      	beq.n	80038fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d130      	bne.n	8003960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	2203      	movs	r2, #3
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68da      	ldr	r2, [r3, #12]
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003934:	2201      	movs	r2, #1
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	fa02 f303 	lsl.w	r3, r2, r3
 800393c:	43db      	mvns	r3, r3
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	4013      	ands	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 0201 	and.w	r2, r3, #1
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	fa02 f303 	lsl.w	r3, r2, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d017      	beq.n	800399c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	2203      	movs	r2, #3
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d123      	bne.n	80039f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f003 0307 	and.w	r3, r3, #7
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	220f      	movs	r2, #15
 80039c0:	fa02 f303 	lsl.w	r3, r2, r3
 80039c4:	43db      	mvns	r3, r3
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	4013      	ands	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	08da      	lsrs	r2, r3, #3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	3208      	adds	r2, #8
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f003 0203 	and.w	r2, r3, #3
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f000 80ae 	beq.w	8003b8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b5d      	ldr	r3, [pc, #372]	@ (8003bac <HAL_GPIO_Init+0x300>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	4a5c      	ldr	r2, [pc, #368]	@ (8003bac <HAL_GPIO_Init+0x300>)
 8003a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a42:	4b5a      	ldr	r3, [pc, #360]	@ (8003bac <HAL_GPIO_Init+0x300>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a4e:	4a58      	ldr	r2, [pc, #352]	@ (8003bb0 <HAL_GPIO_Init+0x304>)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	220f      	movs	r2, #15
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43db      	mvns	r3, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb4 <HAL_GPIO_Init+0x308>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d025      	beq.n	8003ac6 <HAL_GPIO_Init+0x21a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb8 <HAL_GPIO_Init+0x30c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d01f      	beq.n	8003ac2 <HAL_GPIO_Init+0x216>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a4d      	ldr	r2, [pc, #308]	@ (8003bbc <HAL_GPIO_Init+0x310>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d019      	beq.n	8003abe <HAL_GPIO_Init+0x212>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bc0 <HAL_GPIO_Init+0x314>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_GPIO_Init+0x20e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc4 <HAL_GPIO_Init+0x318>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00d      	beq.n	8003ab6 <HAL_GPIO_Init+0x20a>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc8 <HAL_GPIO_Init+0x31c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <HAL_GPIO_Init+0x206>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a49      	ldr	r2, [pc, #292]	@ (8003bcc <HAL_GPIO_Init+0x320>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <HAL_GPIO_Init+0x202>
 8003aaa:	2306      	movs	r3, #6
 8003aac:	e00c      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e00a      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003ab2:	2305      	movs	r3, #5
 8003ab4:	e008      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e006      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003aba:	2303      	movs	r3, #3
 8003abc:	e004      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003abe:	2302      	movs	r3, #2
 8003ac0:	e002      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_GPIO_Init+0x21c>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	69fa      	ldr	r2, [r7, #28]
 8003aca:	f002 0203 	and.w	r2, r2, #3
 8003ace:	0092      	lsls	r2, r2, #2
 8003ad0:	4093      	lsls	r3, r2
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ad8:	4935      	ldr	r1, [pc, #212]	@ (8003bb0 <HAL_GPIO_Init+0x304>)
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	3302      	adds	r3, #2
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4013      	ands	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b0a:	4a31      	ldr	r2, [pc, #196]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b10:	4b2f      	ldr	r3, [pc, #188]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b34:	4a26      	ldr	r2, [pc, #152]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b3a:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b88:	4a11      	ldr	r2, [pc, #68]	@ (8003bd0 <HAL_GPIO_Init+0x324>)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3301      	adds	r3, #1
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f67f ae96 	bls.w	80038c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40013c00 	.word	0x40013c00

08003bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	887b      	ldrh	r3, [r7, #2]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	e001      	b.n	8003bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e12b      	b.n	8003e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff f9f0 	bl	8003010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	@ 0x24
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c68:	f001 fa10 	bl	800508c <HAL_RCC_GetPCLK1Freq>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a81      	ldr	r2, [pc, #516]	@ (8003e78 <HAL_I2C_Init+0x274>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d807      	bhi.n	8003c88 <HAL_I2C_Init+0x84>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a80      	ldr	r2, [pc, #512]	@ (8003e7c <HAL_I2C_Init+0x278>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e006      	b.n	8003c96 <HAL_I2C_Init+0x92>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e80 <HAL_I2C_Init+0x27c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0e7      	b.n	8003e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a78      	ldr	r2, [pc, #480]	@ (8003e84 <HAL_I2C_Init+0x280>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8003e78 <HAL_I2C_Init+0x274>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d802      	bhi.n	8003cd8 <HAL_I2C_Init+0xd4>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	e009      	b.n	8003cec <HAL_I2C_Init+0xe8>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	4a69      	ldr	r2, [pc, #420]	@ (8003e88 <HAL_I2C_Init+0x284>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	3301      	adds	r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003cfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	495c      	ldr	r1, [pc, #368]	@ (8003e78 <HAL_I2C_Init+0x274>)
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	d819      	bhi.n	8003d40 <HAL_I2C_Init+0x13c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e59      	subs	r1, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003d20:	400b      	ands	r3, r1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_I2C_Init+0x138>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e59      	subs	r1, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3a:	e051      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	e04f      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d111      	bne.n	8003d6c <HAL_I2C_Init+0x168>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e012      	b.n	8003d92 <HAL_I2C_Init+0x18e>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	0099      	lsls	r1, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Init+0x196>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e022      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10e      	bne.n	8003dc0 <HAL_I2C_Init+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1e58      	subs	r0, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	440b      	add	r3, r1
 8003db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db4:	3301      	adds	r3, #1
 8003db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1e58      	subs	r0, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	0099      	lsls	r1, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	6809      	ldr	r1, [r1, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003e0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6911      	ldr	r1, [r2, #16]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68d2      	ldr	r2, [r2, #12]
 8003e1a:	4311      	orrs	r1, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	000186a0 	.word	0x000186a0
 8003e7c:	001e847f 	.word	0x001e847f
 8003e80:	003d08ff 	.word	0x003d08ff
 8003e84:	431bde83 	.word	0x431bde83
 8003e88:	10624dd3 	.word	0x10624dd3

08003e8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea6:	f7ff fbbf 	bl	8003628 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 80d9 	bne.w	800406c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2319      	movs	r3, #25
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	496d      	ldr	r1, [pc, #436]	@ (8004078 <HAL_I2C_Mem_Write+0x1ec>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fdb9 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e0cc      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Mem_Write+0x56>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0c5      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d007      	beq.n	8003f08 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2221      	movs	r2, #33	@ 0x21
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	@ 0x40
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a4d      	ldr	r2, [pc, #308]	@ (800407c <HAL_I2C_Mem_Write+0x1f0>)
 8003f48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fbf0 	bl	8004740 <I2C_RequestMemoryWrite>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d052      	beq.n	800400c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e081      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 fe7e 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00d      	beq.n	8003f96 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d107      	bne.n	8003f92 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e06b      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_I2C_Mem_Write+0x180>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d017      	beq.n	800400c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe0:	781a      	ldrb	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29a      	uxth	r2, r3
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004002:	b29b      	uxth	r3, r3
 8004004:	3b01      	subs	r3, #1
 8004006:	b29a      	uxth	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1aa      	bne.n	8003f6a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 fe71 	bl	8004d00 <I2C_WaitOnBTFFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00d      	beq.n	8004040 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004028:	2b04      	cmp	r3, #4
 800402a:	d107      	bne.n	800403c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800403a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e016      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800404e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004068:	2300      	movs	r3, #0
 800406a:	e000      	b.n	800406e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800406c:	2302      	movs	r3, #2
  }
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	00100002 	.word	0x00100002
 800407c:	ffff0000 	.word	0xffff0000

08004080 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	@ 0x30
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	4608      	mov	r0, r1
 800408a:	4611      	mov	r1, r2
 800408c:	461a      	mov	r2, r3
 800408e:	4603      	mov	r3, r0
 8004090:	817b      	strh	r3, [r7, #10]
 8004092:	460b      	mov	r3, r1
 8004094:	813b      	strh	r3, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800409a:	f7ff fac5 	bl	8003628 <HAL_GetTick>
 800409e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	f040 8214 	bne.w	80044d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	2319      	movs	r3, #25
 80040b4:	2201      	movs	r2, #1
 80040b6:	497b      	ldr	r1, [pc, #492]	@ (80042a4 <HAL_I2C_Mem_Read+0x224>)
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 fcbf 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	e207      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_I2C_Mem_Read+0x56>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e200      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d007      	beq.n	80040fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2222      	movs	r2, #34	@ 0x22
 8004110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2240      	movs	r2, #64	@ 0x40
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800412c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a5b      	ldr	r2, [pc, #364]	@ (80042a8 <HAL_I2C_Mem_Read+0x228>)
 800413c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800413e:	88f8      	ldrh	r0, [r7, #6]
 8004140:	893a      	ldrh	r2, [r7, #8]
 8004142:	8979      	ldrh	r1, [r7, #10]
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4603      	mov	r3, r0
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fb8c 	bl	800486c <I2C_RequestMemoryRead>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e1bc      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	623b      	str	r3, [r7, #32]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	623b      	str	r3, [r7, #32]
 800417a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	e190      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004192:	2b01      	cmp	r3, #1
 8004194:	d11b      	bne.n	80041ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041a6:	2300      	movs	r3, #0
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e170      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d11b      	bne.n	800420e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	e150      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420e:	2300      	movs	r3, #0
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	617b      	str	r3, [r7, #20]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004224:	e144      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	2b03      	cmp	r3, #3
 800422c:	f200 80f1 	bhi.w	8004412 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004234:	2b01      	cmp	r3, #1
 8004236:	d123      	bne.n	8004280 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fda7 	bl	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e145      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691a      	ldr	r2, [r3, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	b2d2      	uxtb	r2, r2
 8004258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800427e:	e117      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	2b02      	cmp	r3, #2
 8004286:	d14e      	bne.n	8004326 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800428e:	2200      	movs	r2, #0
 8004290:	4906      	ldr	r1, [pc, #24]	@ (80042ac <HAL_I2C_Mem_Read+0x22c>)
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f000 fbd2 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e11a      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
 80042a2:	bf00      	nop
 80042a4:	00100002 	.word	0x00100002
 80042a8:	ffff0000 	.word	0xffff0000
 80042ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	691a      	ldr	r2, [r3, #16]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004324:	e0c4      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	2200      	movs	r2, #0
 800432e:	496c      	ldr	r1, [pc, #432]	@ (80044e0 <HAL_I2C_Mem_Read+0x460>)
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 fb83 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0cb      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800434e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004388:	2200      	movs	r2, #0
 800438a:	4955      	ldr	r1, [pc, #340]	@ (80044e0 <HAL_I2C_Mem_Read+0x460>)
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fb55 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e09d      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c8:	3b01      	subs	r3, #1
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	1c5a      	adds	r2, r3, #1
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	3b01      	subs	r3, #1
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004406:	b29b      	uxth	r3, r3
 8004408:	3b01      	subs	r3, #1
 800440a:	b29a      	uxth	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004410:	e04e      	b.n	80044b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004414:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 fcba 	bl	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e058      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d124      	bne.n	80044b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446a:	2b03      	cmp	r3, #3
 800446c:	d107      	bne.n	800447e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800447c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	3b01      	subs	r3, #1
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f47f aeb6 	bne.w	8004226 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80044d2:	2300      	movs	r3, #0
 80044d4:	e000      	b.n	80044d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80044d6:	2302      	movs	r3, #2
  }
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	@ 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	00010004 	.word	0x00010004

080044e4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08a      	sub	sp, #40	@ 0x28
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	460b      	mov	r3, r1
 80044f2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80044f4:	f7ff f898 	bl	8003628 <HAL_GetTick>
 80044f8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b20      	cmp	r3, #32
 8004508:	f040 8111 	bne.w	800472e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	2319      	movs	r3, #25
 8004512:	2201      	movs	r2, #1
 8004514:	4988      	ldr	r1, [pc, #544]	@ (8004738 <HAL_I2C_IsDeviceReady+0x254>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 fa90 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	e104      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_I2C_IsDeviceReady+0x50>
 8004530:	2302      	movs	r3, #2
 8004532:	e0fd      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d007      	beq.n	800455a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004568:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2224      	movs	r2, #36	@ 0x24
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	4a70      	ldr	r2, [pc, #448]	@ (800473c <HAL_I2C_IsDeviceReady+0x258>)
 800457c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800458c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2200      	movs	r2, #0
 8004596:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fa4e 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00d      	beq.n	80045c2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b4:	d103      	bne.n	80045be <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045bc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e0b6      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045c2:	897b      	ldrh	r3, [r7, #10]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045d0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80045d2:	f7ff f829 	bl	8003628 <HAL_GetTick>
 80045d6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fc:	bf0c      	ite	eq
 80045fe:	2301      	moveq	r3, #1
 8004600:	2300      	movne	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004606:	e025      	b.n	8004654 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7ff f80e 	bl	8003628 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <HAL_I2C_IsDeviceReady+0x13a>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	22a0      	movs	r2, #160	@ 0xa0
 8004622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b02      	cmp	r3, #2
 8004632:	bf0c      	ite	eq
 8004634:	2301      	moveq	r3, #1
 8004636:	2300      	movne	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2ba0      	cmp	r3, #160	@ 0xa0
 800465e:	d005      	beq.n	800466c <HAL_I2C_IsDeviceReady+0x188>
 8004660:	7dfb      	ldrb	r3, [r7, #23]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_I2C_IsDeviceReady+0x188>
 8004666:	7dbb      	ldrb	r3, [r7, #22]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0cd      	beq.n	8004608 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d129      	bne.n	80046d6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004690:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	613b      	str	r3, [r7, #16]
 80046a6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	2319      	movs	r3, #25
 80046ae:	2201      	movs	r2, #1
 80046b0:	4921      	ldr	r1, [pc, #132]	@ (8004738 <HAL_I2C_IsDeviceReady+0x254>)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f9c2 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e036      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2220      	movs	r2, #32
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e02c      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ee:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	2319      	movs	r3, #25
 80046f6:	2201      	movs	r2, #1
 80046f8:	490f      	ldr	r1, [pc, #60]	@ (8004738 <HAL_I2C_IsDeviceReady+0x254>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f99e 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e012      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	3301      	adds	r3, #1
 800470e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	429a      	cmp	r2, r3
 8004716:	f4ff af32 	bcc.w	800457e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3720      	adds	r7, #32
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000

08004740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	461a      	mov	r2, r3
 800474e:	4603      	mov	r3, r0
 8004750:	817b      	strh	r3, [r7, #10]
 8004752:	460b      	mov	r3, r1
 8004754:	813b      	strh	r3, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2200      	movs	r2, #0
 8004772:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004776:	68f8      	ldr	r0, [r7, #12]
 8004778:	f000 f960 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00d      	beq.n	800479e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004790:	d103      	bne.n	800479a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e05f      	b.n	800485e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800479e:	897b      	ldrh	r3, [r7, #10]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	492d      	ldr	r1, [pc, #180]	@ (8004868 <I2C_RequestMemoryWrite+0x128>)
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f9bb 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d001      	beq.n	80047c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e04c      	b.n	800485e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047dc:	6a39      	ldr	r1, [r7, #32]
 80047de:	68f8      	ldr	r0, [r7, #12]
 80047e0:	f000 fa46 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d107      	bne.n	8004802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e02b      	b.n	800485e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004806:	88fb      	ldrh	r3, [r7, #6]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d105      	bne.n	8004818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800480c:	893b      	ldrh	r3, [r7, #8]
 800480e:	b2da      	uxtb	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	e021      	b.n	800485c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004818:	893b      	ldrh	r3, [r7, #8]
 800481a:	0a1b      	lsrs	r3, r3, #8
 800481c:	b29b      	uxth	r3, r3
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004828:	6a39      	ldr	r1, [r7, #32]
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 fa20 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00d      	beq.n	8004852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483a:	2b04      	cmp	r3, #4
 800483c:	d107      	bne.n	800484e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800484c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e005      	b.n	800485e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3718      	adds	r7, #24
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	00010002 	.word	0x00010002

0800486c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	4608      	mov	r0, r1
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	4603      	mov	r3, r0
 800487c:	817b      	strh	r3, [r7, #10]
 800487e:	460b      	mov	r3, r1
 8004880:	813b      	strh	r3, [r7, #8]
 8004882:	4613      	mov	r3, r2
 8004884:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004894:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 f8c2 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048cc:	d103      	bne.n	80048d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0aa      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048da:	897b      	ldrh	r3, [r7, #10]
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80048e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	4952      	ldr	r1, [pc, #328]	@ (8004a38 <I2C_RequestMemoryRead+0x1cc>)
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 f91d 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e097      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004918:	6a39      	ldr	r1, [r7, #32]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f9a8 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00d      	beq.n	8004942 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492a:	2b04      	cmp	r3, #4
 800492c:	d107      	bne.n	800493e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800493c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e076      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004942:	88fb      	ldrh	r3, [r7, #6]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d105      	bne.n	8004954 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004948:	893b      	ldrh	r3, [r7, #8]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e021      	b.n	8004998 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004954:	893b      	ldrh	r3, [r7, #8]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	b29b      	uxth	r3, r3
 800495a:	b2da      	uxtb	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004964:	6a39      	ldr	r1, [r7, #32]
 8004966:	68f8      	ldr	r0, [r7, #12]
 8004968:	f000 f982 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00d      	beq.n	800498e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	2b04      	cmp	r3, #4
 8004978:	d107      	bne.n	800498a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004988:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e050      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800498e:	893b      	ldrh	r3, [r7, #8]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499a:	6a39      	ldr	r1, [r7, #32]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f967 	bl	8004c70 <I2C_WaitOnTXEFlagUntilTimeout>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d107      	bne.n	80049c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e035      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	2200      	movs	r2, #0
 80049dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f82b 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049fa:	d103      	bne.n	8004a04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a02:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e013      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a08:	897b      	ldrh	r3, [r7, #10]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	b2da      	uxtb	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	6a3a      	ldr	r2, [r7, #32]
 8004a1c:	4906      	ldr	r1, [pc, #24]	@ (8004a38 <I2C_RequestMemoryRead+0x1cc>)
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f000 f886 	bl	8004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	e048      	b.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d044      	beq.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fe fde7 	bl	8003628 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d139      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0c1b      	lsrs	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d10d      	bne.n	8004a92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	43da      	mvns	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	e00c      	b.n	8004aac <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d116      	bne.n	8004ae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004acc:	f043 0220 	orr.w	r2, r3, #32
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e023      	b.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	0c1b      	lsrs	r3, r3, #16
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d10d      	bne.n	8004b06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	43da      	mvns	r2, r3
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	4013      	ands	r3, r2
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	461a      	mov	r2, r3
 8004b04:	e00c      	b.n	8004b20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d093      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
 8004b3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b3e:	e071      	b.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4e:	d123      	bne.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b84:	f043 0204 	orr.w	r2, r3, #4
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e067      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d041      	beq.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7fe fd42 	bl	8003628 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d136      	bne.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	0c1b      	lsrs	r3, r3, #16
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d10c      	bne.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	43da      	mvns	r2, r3
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	e00b      	b.n	8004bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf14      	ite	ne
 8004bec:	2301      	movne	r3, #1
 8004bee:	2300      	moveq	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d016      	beq.n	8004c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e021      	b.n	8004c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	0c1b      	lsrs	r3, r3, #16
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10c      	bne.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	43da      	mvns	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	bf14      	ite	ne
 8004c40:	2301      	movne	r3, #1
 8004c42:	2300      	moveq	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	e00b      	b.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	43da      	mvns	r2, r3
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	4013      	ands	r3, r2
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f47f af6d 	bne.w	8004b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c7c:	e034      	b.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f8e3 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e034      	b.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c94:	d028      	beq.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c96:	f7fe fcc7 	bl	8003628 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d302      	bcc.n	8004cac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11d      	bne.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb6:	2b80      	cmp	r3, #128	@ 0x80
 8004cb8:	d016      	beq.n	8004ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f043 0220 	orr.w	r2, r3, #32
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e007      	b.n	8004cf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf2:	2b80      	cmp	r3, #128	@ 0x80
 8004cf4:	d1c3      	bne.n	8004c7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d0c:	e034      	b.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f000 f89b 	bl	8004e4a <I2C_IsAcknowledgeFailed>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e034      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d24:	d028      	beq.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d26:	f7fe fc7f 	bl	8003628 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d302      	bcc.n	8004d3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11d      	bne.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d016      	beq.n	8004d78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e007      	b.n	8004d88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d1c3      	bne.n	8004d0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3710      	adds	r7, #16
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d9c:	e049      	b.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	2b10      	cmp	r3, #16
 8004daa:	d119      	bne.n	8004de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f06f 0210 	mvn.w	r2, #16
 8004db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e030      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de0:	f7fe fc22 	bl	8003628 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d302      	bcc.n	8004df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d11d      	bne.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b40      	cmp	r3, #64	@ 0x40
 8004e02:	d016      	beq.n	8004e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	f043 0220 	orr.w	r2, r3, #32
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e007      	b.n	8004e42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3c:	2b40      	cmp	r3, #64	@ 0x40
 8004e3e:	d1ae      	bne.n	8004d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e60:	d11b      	bne.n	8004e9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	f043 0204 	orr.w	r2, r3, #4
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0cc      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ebc:	4b68      	ldr	r3, [pc, #416]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	683a      	ldr	r2, [r7, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d90c      	bls.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eca:	4b65      	ldr	r3, [pc, #404]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	b2d2      	uxtb	r2, r2
 8004ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b63      	ldr	r3, [pc, #396]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e0b8      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d020      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004efc:	4b59      	ldr	r3, [pc, #356]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	4a58      	ldr	r2, [pc, #352]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0308 	and.w	r3, r3, #8
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d005      	beq.n	8004f20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f14:	4b53      	ldr	r3, [pc, #332]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	4a52      	ldr	r2, [pc, #328]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f20:	4b50      	ldr	r3, [pc, #320]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	494d      	ldr	r1, [pc, #308]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d044      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d107      	bne.n	8004f56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f46:	4b47      	ldr	r3, [pc, #284]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e07f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f66:	4b3f      	ldr	r3, [pc, #252]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e06f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f76:	4b3b      	ldr	r3, [pc, #236]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e067      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b37      	ldr	r3, [pc, #220]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4934      	ldr	r1, [pc, #208]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f98:	f7fe fb46 	bl	8003628 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fe fb42 	bl	8003628 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e04f      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b25      	ldr	r3, [pc, #148]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d20c      	bcs.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b22      	ldr	r3, [pc, #136]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b20      	ldr	r3, [pc, #128]	@ (8005060 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e032      	b.n	8005056 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ffc:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4916      	ldr	r1, [pc, #88]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	4313      	orrs	r3, r2
 800500c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800501a:	4b12      	ldr	r3, [pc, #72]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	490e      	ldr	r1, [pc, #56]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800502e:	f000 f841 	bl	80050b4 <HAL_RCC_GetSysClockFreq>
 8005032:	4602      	mov	r2, r0
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	490a      	ldr	r1, [pc, #40]	@ (8005068 <HAL_RCC_ClockConfig+0x1c0>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	4a09      	ldr	r2, [pc, #36]	@ (800506c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800504a:	4b09      	ldr	r3, [pc, #36]	@ (8005070 <HAL_RCC_ClockConfig+0x1c8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe faa6 	bl	80035a0 <HAL_InitTick>

  return HAL_OK;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40023c00 	.word	0x40023c00
 8005064:	40023800 	.word	0x40023800
 8005068:	0800c74c 	.word	0x0800c74c
 800506c:	20000004 	.word	0x20000004
 8005070:	20000008 	.word	0x20000008

08005074 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005074:	b480      	push	{r7}
 8005076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005078:	4b03      	ldr	r3, [pc, #12]	@ (8005088 <HAL_RCC_GetHCLKFreq+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
}
 800507c:	4618      	mov	r0, r3
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000004 	.word	0x20000004

0800508c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005090:	f7ff fff0 	bl	8005074 <HAL_RCC_GetHCLKFreq>
 8005094:	4602      	mov	r2, r0
 8005096:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	0a9b      	lsrs	r3, r3, #10
 800509c:	f003 0307 	and.w	r3, r3, #7
 80050a0:	4903      	ldr	r1, [pc, #12]	@ (80050b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050a2:	5ccb      	ldrb	r3, [r1, r3]
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40023800 	.word	0x40023800
 80050b0:	0800c75c 	.word	0x0800c75c

080050b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050b8:	b0ae      	sub	sp, #184	@ 0xb8
 80050ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050da:	4bcb      	ldr	r3, [pc, #812]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
 80050e2:	2b0c      	cmp	r3, #12
 80050e4:	f200 8206 	bhi.w	80054f4 <HAL_RCC_GetSysClockFreq+0x440>
 80050e8:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005125 	.word	0x08005125
 80050f4:	080054f5 	.word	0x080054f5
 80050f8:	080054f5 	.word	0x080054f5
 80050fc:	080054f5 	.word	0x080054f5
 8005100:	0800512d 	.word	0x0800512d
 8005104:	080054f5 	.word	0x080054f5
 8005108:	080054f5 	.word	0x080054f5
 800510c:	080054f5 	.word	0x080054f5
 8005110:	08005135 	.word	0x08005135
 8005114:	080054f5 	.word	0x080054f5
 8005118:	080054f5 	.word	0x080054f5
 800511c:	080054f5 	.word	0x080054f5
 8005120:	08005325 	.word	0x08005325
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005124:	4bb9      	ldr	r3, [pc, #740]	@ (800540c <HAL_RCC_GetSysClockFreq+0x358>)
 8005126:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800512a:	e1e7      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800512c:	4bb8      	ldr	r3, [pc, #736]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x35c>)
 800512e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005132:	e1e3      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005134:	4bb4      	ldr	r3, [pc, #720]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800513c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005140:	4bb1      	ldr	r3, [pc, #708]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d071      	beq.n	8005230 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800514c:	4bae      	ldr	r3, [pc, #696]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	099b      	lsrs	r3, r3, #6
 8005152:	2200      	movs	r2, #0
 8005154:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005158:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800515c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005164:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005168:	2300      	movs	r3, #0
 800516a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800516e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005172:	4622      	mov	r2, r4
 8005174:	462b      	mov	r3, r5
 8005176:	f04f 0000 	mov.w	r0, #0
 800517a:	f04f 0100 	mov.w	r1, #0
 800517e:	0159      	lsls	r1, r3, #5
 8005180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005184:	0150      	lsls	r0, r2, #5
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4621      	mov	r1, r4
 800518c:	1a51      	subs	r1, r2, r1
 800518e:	6439      	str	r1, [r7, #64]	@ 0x40
 8005190:	4629      	mov	r1, r5
 8005192:	eb63 0301 	sbc.w	r3, r3, r1
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
 8005198:	f04f 0200 	mov.w	r2, #0
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80051a4:	4649      	mov	r1, r9
 80051a6:	018b      	lsls	r3, r1, #6
 80051a8:	4641      	mov	r1, r8
 80051aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051ae:	4641      	mov	r1, r8
 80051b0:	018a      	lsls	r2, r1, #6
 80051b2:	4641      	mov	r1, r8
 80051b4:	1a51      	subs	r1, r2, r1
 80051b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b8:	4649      	mov	r1, r9
 80051ba:	eb63 0301 	sbc.w	r3, r3, r1
 80051be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051c0:	f04f 0200 	mov.w	r2, #0
 80051c4:	f04f 0300 	mov.w	r3, #0
 80051c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80051cc:	4649      	mov	r1, r9
 80051ce:	00cb      	lsls	r3, r1, #3
 80051d0:	4641      	mov	r1, r8
 80051d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051d6:	4641      	mov	r1, r8
 80051d8:	00ca      	lsls	r2, r1, #3
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	4622      	mov	r2, r4
 80051e2:	189b      	adds	r3, r3, r2
 80051e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051e6:	462b      	mov	r3, r5
 80051e8:	460a      	mov	r2, r1
 80051ea:	eb42 0303 	adc.w	r3, r2, r3
 80051ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	f04f 0300 	mov.w	r3, #0
 80051f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051fc:	4629      	mov	r1, r5
 80051fe:	024b      	lsls	r3, r1, #9
 8005200:	4621      	mov	r1, r4
 8005202:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005206:	4621      	mov	r1, r4
 8005208:	024a      	lsls	r2, r1, #9
 800520a:	4610      	mov	r0, r2
 800520c:	4619      	mov	r1, r3
 800520e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005212:	2200      	movs	r2, #0
 8005214:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005218:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800521c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8005220:	f7fb fd52 	bl	8000cc8 <__aeabi_uldivmod>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4613      	mov	r3, r2
 800522a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800522e:	e067      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005230:	4b75      	ldr	r3, [pc, #468]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800523c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8005240:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005248:	67bb      	str	r3, [r7, #120]	@ 0x78
 800524a:	2300      	movs	r3, #0
 800524c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800524e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8005252:	4622      	mov	r2, r4
 8005254:	462b      	mov	r3, r5
 8005256:	f04f 0000 	mov.w	r0, #0
 800525a:	f04f 0100 	mov.w	r1, #0
 800525e:	0159      	lsls	r1, r3, #5
 8005260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005264:	0150      	lsls	r0, r2, #5
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4621      	mov	r1, r4
 800526c:	1a51      	subs	r1, r2, r1
 800526e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005270:	4629      	mov	r1, r5
 8005272:	eb63 0301 	sbc.w	r3, r3, r1
 8005276:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8005284:	4649      	mov	r1, r9
 8005286:	018b      	lsls	r3, r1, #6
 8005288:	4641      	mov	r1, r8
 800528a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800528e:	4641      	mov	r1, r8
 8005290:	018a      	lsls	r2, r1, #6
 8005292:	4641      	mov	r1, r8
 8005294:	ebb2 0a01 	subs.w	sl, r2, r1
 8005298:	4649      	mov	r1, r9
 800529a:	eb63 0b01 	sbc.w	fp, r3, r1
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052aa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b2:	4692      	mov	sl, r2
 80052b4:	469b      	mov	fp, r3
 80052b6:	4623      	mov	r3, r4
 80052b8:	eb1a 0303 	adds.w	r3, sl, r3
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	462b      	mov	r3, r5
 80052c0:	eb4b 0303 	adc.w	r3, fp, r3
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80052d2:	4629      	mov	r1, r5
 80052d4:	028b      	lsls	r3, r1, #10
 80052d6:	4621      	mov	r1, r4
 80052d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052dc:	4621      	mov	r1, r4
 80052de:	028a      	lsls	r2, r1, #10
 80052e0:	4610      	mov	r0, r2
 80052e2:	4619      	mov	r1, r3
 80052e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052e8:	2200      	movs	r2, #0
 80052ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80052ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80052ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80052f2:	f7fb fce9 	bl	8000cc8 <__aeabi_uldivmod>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4613      	mov	r3, r2
 80052fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005300:	4b41      	ldr	r3, [pc, #260]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8005312:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8005322:	e0eb      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005324:	4b38      	ldr	r3, [pc, #224]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800532c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005330:	4b35      	ldr	r3, [pc, #212]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d06b      	beq.n	8005414 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533c:	4b32      	ldr	r3, [pc, #200]	@ (8005408 <HAL_RCC_GetSysClockFreq+0x354>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	099b      	lsrs	r3, r3, #6
 8005342:	2200      	movs	r2, #0
 8005344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005346:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005348:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800534a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005350:	2300      	movs	r3, #0
 8005352:	667b      	str	r3, [r7, #100]	@ 0x64
 8005354:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8005358:	4622      	mov	r2, r4
 800535a:	462b      	mov	r3, r5
 800535c:	f04f 0000 	mov.w	r0, #0
 8005360:	f04f 0100 	mov.w	r1, #0
 8005364:	0159      	lsls	r1, r3, #5
 8005366:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800536a:	0150      	lsls	r0, r2, #5
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4621      	mov	r1, r4
 8005372:	1a51      	subs	r1, r2, r1
 8005374:	61b9      	str	r1, [r7, #24]
 8005376:	4629      	mov	r1, r5
 8005378:	eb63 0301 	sbc.w	r3, r3, r1
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	f04f 0200 	mov.w	r2, #0
 8005382:	f04f 0300 	mov.w	r3, #0
 8005386:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800538a:	4659      	mov	r1, fp
 800538c:	018b      	lsls	r3, r1, #6
 800538e:	4651      	mov	r1, sl
 8005390:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005394:	4651      	mov	r1, sl
 8005396:	018a      	lsls	r2, r1, #6
 8005398:	4651      	mov	r1, sl
 800539a:	ebb2 0801 	subs.w	r8, r2, r1
 800539e:	4659      	mov	r1, fp
 80053a0:	eb63 0901 	sbc.w	r9, r3, r1
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053b8:	4690      	mov	r8, r2
 80053ba:	4699      	mov	r9, r3
 80053bc:	4623      	mov	r3, r4
 80053be:	eb18 0303 	adds.w	r3, r8, r3
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	462b      	mov	r3, r5
 80053c6:	eb49 0303 	adc.w	r3, r9, r3
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80053d8:	4629      	mov	r1, r5
 80053da:	024b      	lsls	r3, r1, #9
 80053dc:	4621      	mov	r1, r4
 80053de:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80053e2:	4621      	mov	r1, r4
 80053e4:	024a      	lsls	r2, r1, #9
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053ee:	2200      	movs	r2, #0
 80053f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80053f2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80053f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80053f8:	f7fb fc66 	bl	8000cc8 <__aeabi_uldivmod>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4613      	mov	r3, r2
 8005402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005406:	e065      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x420>
 8005408:	40023800 	.word	0x40023800
 800540c:	00f42400 	.word	0x00f42400
 8005410:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005414:	4b3d      	ldr	r3, [pc, #244]	@ (800550c <HAL_RCC_GetSysClockFreq+0x458>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	099b      	lsrs	r3, r3, #6
 800541a:	2200      	movs	r2, #0
 800541c:	4618      	mov	r0, r3
 800541e:	4611      	mov	r1, r2
 8005420:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005424:	653b      	str	r3, [r7, #80]	@ 0x50
 8005426:	2300      	movs	r3, #0
 8005428:	657b      	str	r3, [r7, #84]	@ 0x54
 800542a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800542e:	4642      	mov	r2, r8
 8005430:	464b      	mov	r3, r9
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	0159      	lsls	r1, r3, #5
 800543c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005440:	0150      	lsls	r0, r2, #5
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4641      	mov	r1, r8
 8005448:	1a51      	subs	r1, r2, r1
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	4649      	mov	r1, r9
 800544e:	eb63 0301 	sbc.w	r3, r3, r1
 8005452:	60fb      	str	r3, [r7, #12]
 8005454:	f04f 0200 	mov.w	r2, #0
 8005458:	f04f 0300 	mov.w	r3, #0
 800545c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005460:	4659      	mov	r1, fp
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	4651      	mov	r1, sl
 8005466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800546a:	4651      	mov	r1, sl
 800546c:	018a      	lsls	r2, r1, #6
 800546e:	4651      	mov	r1, sl
 8005470:	1a54      	subs	r4, r2, r1
 8005472:	4659      	mov	r1, fp
 8005474:	eb63 0501 	sbc.w	r5, r3, r1
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	00eb      	lsls	r3, r5, #3
 8005482:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005486:	00e2      	lsls	r2, r4, #3
 8005488:	4614      	mov	r4, r2
 800548a:	461d      	mov	r5, r3
 800548c:	4643      	mov	r3, r8
 800548e:	18e3      	adds	r3, r4, r3
 8005490:	603b      	str	r3, [r7, #0]
 8005492:	464b      	mov	r3, r9
 8005494:	eb45 0303 	adc.w	r3, r5, r3
 8005498:	607b      	str	r3, [r7, #4]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	f04f 0300 	mov.w	r3, #0
 80054a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054a6:	4629      	mov	r1, r5
 80054a8:	028b      	lsls	r3, r1, #10
 80054aa:	4621      	mov	r1, r4
 80054ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054b0:	4621      	mov	r1, r4
 80054b2:	028a      	lsls	r2, r1, #10
 80054b4:	4610      	mov	r0, r2
 80054b6:	4619      	mov	r1, r3
 80054b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054bc:	2200      	movs	r2, #0
 80054be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80054c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80054c6:	f7fb fbff 	bl	8000cc8 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4613      	mov	r3, r2
 80054d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80054d4:	4b0d      	ldr	r3, [pc, #52]	@ (800550c <HAL_RCC_GetSysClockFreq+0x458>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	0f1b      	lsrs	r3, r3, #28
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80054e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054f2:	e003      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054f4:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCC_GetSysClockFreq+0x45c>)
 80054f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80054fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8005500:	4618      	mov	r0, r3
 8005502:	37b8      	adds	r7, #184	@ 0xb8
 8005504:	46bd      	mov	sp, r7
 8005506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550a:	bf00      	nop
 800550c:	40023800 	.word	0x40023800
 8005510:	00f42400 	.word	0x00f42400

08005514 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e28d      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8083 	beq.w	800563a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005534:	4b94      	ldr	r3, [pc, #592]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b04      	cmp	r3, #4
 800553e:	d019      	beq.n	8005574 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005540:	4b91      	ldr	r3, [pc, #580]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
        || \
 8005548:	2b08      	cmp	r3, #8
 800554a:	d106      	bne.n	800555a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800554c:	4b8e      	ldr	r3, [pc, #568]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005558:	d00c      	beq.n	8005574 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4b8b      	ldr	r3, [pc, #556]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8005562:	2b0c      	cmp	r3, #12
 8005564:	d112      	bne.n	800558c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b88      	ldr	r3, [pc, #544]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b84      	ldr	r3, [pc, #528]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x124>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e25a      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x90>
 8005596:	4b7c      	ldr	r3, [pc, #496]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a7b      	ldr	r2, [pc, #492]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xcc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0xb4>
 80055ae:	4b76      	ldr	r3, [pc, #472]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a75      	ldr	r2, [pc, #468]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b73      	ldr	r3, [pc, #460]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a72      	ldr	r2, [pc, #456]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xcc>
 80055c8:	4b6f      	ldr	r3, [pc, #444]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a6e      	ldr	r2, [pc, #440]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6b      	ldr	r2, [pc, #428]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e8:	f7fe f81e 	bl	8003628 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055f0:	f7fe f81a 	bl	8003628 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	@ 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e21f      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b61      	ldr	r3, [pc, #388]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xdc>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005610:	f7fe f80a 	bl	8003628 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005618:	f7fe f806 	bl	8003628 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e20b      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b57      	ldr	r3, [pc, #348]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x104>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d06f      	beq.n	8005726 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005646:	4b50      	ldr	r3, [pc, #320]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d017      	beq.n	8005682 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005652:	4b4d      	ldr	r3, [pc, #308]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
        || \
 800565a:	2b08      	cmp	r3, #8
 800565c:	d105      	bne.n	800566a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800565e:	4b4a      	ldr	r3, [pc, #296]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00b      	beq.n	8005682 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800566a:	4b47      	ldr	r3, [pc, #284]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8005672:	2b0c      	cmp	r3, #12
 8005674:	d11c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005676:	4b44      	ldr	r3, [pc, #272]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d116      	bne.n	80056b0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005682:	4b41      	ldr	r3, [pc, #260]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_RCC_OscConfig+0x186>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d001      	beq.n	800569a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e1d3      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	4b3b      	ldr	r3, [pc, #236]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	4937      	ldr	r1, [pc, #220]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ae:	e03a      	b.n	8005726 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d020      	beq.n	80056fa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b8:	4b34      	ldr	r3, [pc, #208]	@ (800578c <HAL_RCC_OscConfig+0x278>)
 80056ba:	2201      	movs	r2, #1
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fd ffb3 	bl	8003628 <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fd ffaf 	bl	8003628 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e1b4      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0302 	and.w	r3, r3, #2
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b28      	ldr	r3, [pc, #160]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	4925      	ldr	r1, [pc, #148]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	600b      	str	r3, [r1, #0]
 80056f8:	e015      	b.n	8005726 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fa:	4b24      	ldr	r3, [pc, #144]	@ (800578c <HAL_RCC_OscConfig+0x278>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005700:	f7fd ff92 	bl	8003628 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005708:	f7fd ff8e 	bl	8003628 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e193      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800571a:	4b1b      	ldr	r3, [pc, #108]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1f0      	bne.n	8005708 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d036      	beq.n	80057a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d016      	beq.n	8005768 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800573a:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800573c:	2201      	movs	r2, #1
 800573e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005740:	f7fd ff72 	bl	8003628 <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005748:	f7fd ff6e 	bl	8003628 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e173      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575a:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCC_OscConfig+0x274>)
 800575c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0f0      	beq.n	8005748 <HAL_RCC_OscConfig+0x234>
 8005766:	e01b      	b.n	80057a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005768:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <HAL_RCC_OscConfig+0x27c>)
 800576a:	2200      	movs	r2, #0
 800576c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800576e:	f7fd ff5b 	bl	8003628 <HAL_GetTick>
 8005772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005774:	e00e      	b.n	8005794 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005776:	f7fd ff57 	bl	8003628 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	2b02      	cmp	r3, #2
 8005782:	d907      	bls.n	8005794 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e15c      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
 8005788:	40023800 	.word	0x40023800
 800578c:	42470000 	.word	0x42470000
 8005790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005794:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ea      	bne.n	8005776 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0304 	and.w	r3, r3, #4
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8097 	beq.w	80058dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ae:	2300      	movs	r3, #0
 80057b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b2:	4b83      	ldr	r3, [pc, #524]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057be:	2300      	movs	r3, #0
 80057c0:	60bb      	str	r3, [r7, #8]
 80057c2:	4b7f      	ldr	r3, [pc, #508]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c6:	4a7e      	ldr	r2, [pc, #504]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80057ce:	4b7c      	ldr	r3, [pc, #496]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057de:	4b79      	ldr	r3, [pc, #484]	@ (80059c4 <HAL_RCC_OscConfig+0x4b0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d118      	bne.n	800581c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ea:	4b76      	ldr	r3, [pc, #472]	@ (80059c4 <HAL_RCC_OscConfig+0x4b0>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a75      	ldr	r2, [pc, #468]	@ (80059c4 <HAL_RCC_OscConfig+0x4b0>)
 80057f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f6:	f7fd ff17 	bl	8003628 <HAL_GetTick>
 80057fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7fd ff13 	bl	8003628 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e118      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b6c      	ldr	r3, [pc, #432]	@ (80059c4 <HAL_RCC_OscConfig+0x4b0>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d106      	bne.n	8005832 <HAL_RCC_OscConfig+0x31e>
 8005824:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005828:	4a65      	ldr	r2, [pc, #404]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800582a:	f043 0301 	orr.w	r3, r3, #1
 800582e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005830:	e01c      	b.n	800586c <HAL_RCC_OscConfig+0x358>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	2b05      	cmp	r3, #5
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0x340>
 800583a:	4b61      	ldr	r3, [pc, #388]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800583e:	4a60      	ldr	r2, [pc, #384]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005840:	f043 0304 	orr.w	r3, r3, #4
 8005844:	6713      	str	r3, [r2, #112]	@ 0x70
 8005846:	4b5e      	ldr	r3, [pc, #376]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800584a:	4a5d      	ldr	r2, [pc, #372]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800584c:	f043 0301 	orr.w	r3, r3, #1
 8005850:	6713      	str	r3, [r2, #112]	@ 0x70
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0x358>
 8005854:	4b5a      	ldr	r3, [pc, #360]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005858:	4a59      	ldr	r2, [pc, #356]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800585a:	f023 0301 	bic.w	r3, r3, #1
 800585e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005860:	4b57      	ldr	r3, [pc, #348]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005864:	4a56      	ldr	r2, [pc, #344]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005866:	f023 0304 	bic.w	r3, r3, #4
 800586a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d015      	beq.n	80058a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005874:	f7fd fed8 	bl	8003628 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800587a:	e00a      	b.n	8005892 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587c:	f7fd fed4 	bl	8003628 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800588a:	4293      	cmp	r3, r2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e0d7      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005892:	4b4b      	ldr	r3, [pc, #300]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0ee      	beq.n	800587c <HAL_RCC_OscConfig+0x368>
 800589e:	e014      	b.n	80058ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fd fec2 	bl	8003628 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058a6:	e00a      	b.n	80058be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a8:	f7fd febe 	bl	8003628 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e0c1      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058be:	4b40      	ldr	r3, [pc, #256]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80058c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c2:	f003 0302 	and.w	r3, r3, #2
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1ee      	bne.n	80058a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058ca:	7dfb      	ldrb	r3, [r7, #23]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d105      	bne.n	80058dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d0:	4b3b      	ldr	r3, [pc, #236]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80058d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d4:	4a3a      	ldr	r2, [pc, #232]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80058d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80ad 	beq.w	8005a40 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058e6:	4b36      	ldr	r3, [pc, #216]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d060      	beq.n	80059b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d145      	bne.n	8005986 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058fa:	4b33      	ldr	r3, [pc, #204]	@ (80059c8 <HAL_RCC_OscConfig+0x4b4>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005900:	f7fd fe92 	bl	8003628 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005908:	f7fd fe8e 	bl	8003628 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e093      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800591a:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1f0      	bne.n	8005908 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	019b      	lsls	r3, r3, #6
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	3b01      	subs	r3, #1
 8005940:	041b      	lsls	r3, r3, #16
 8005942:	431a      	orrs	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	061b      	lsls	r3, r3, #24
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	071b      	lsls	r3, r3, #28
 8005952:	491b      	ldr	r1, [pc, #108]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 8005954:	4313      	orrs	r3, r2
 8005956:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005958:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <HAL_RCC_OscConfig+0x4b4>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800595e:	f7fd fe63 	bl	8003628 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005966:	f7fd fe5f 	bl	8003628 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e064      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x452>
 8005984:	e05c      	b.n	8005a40 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005986:	4b10      	ldr	r3, [pc, #64]	@ (80059c8 <HAL_RCC_OscConfig+0x4b4>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fd fe4c 	bl	8003628 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005994:	f7fd fe48 	bl	8003628 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e04d      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059a6:	4b06      	ldr	r3, [pc, #24]	@ (80059c0 <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x480>
 80059b2:	e045      	b.n	8005a40 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d107      	bne.n	80059cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e040      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40007000 	.word	0x40007000
 80059c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059cc:	4b1f      	ldr	r3, [pc, #124]	@ (8005a4c <HAL_RCC_OscConfig+0x538>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d030      	beq.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d129      	bne.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d122      	bne.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059fc:	4013      	ands	r3, r2
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d119      	bne.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	3b01      	subs	r3, #1
 8005a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d10f      	bne.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d107      	bne.n	8005a3c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d001      	beq.n	8005a40 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e000      	b.n	8005a42 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023800 	.word	0x40023800

08005a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e041      	b.n	8005ae6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7fd fbb2 	bl	80031e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f000 fcc4 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
	...

08005af0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d001      	beq.n	8005b08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e04e      	b.n	8005ba6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a23      	ldr	r2, [pc, #140]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d022      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b32:	d01d      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d018      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a1e      	ldr	r2, [pc, #120]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xcc>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d00e      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a1b      	ldr	r2, [pc, #108]	@ (8005bc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d009      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a19      	ldr	r2, [pc, #100]	@ (8005bc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d004      	beq.n	8005b70 <HAL_TIM_Base_Start_IT+0x80>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	@ (8005bcc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d111      	bne.n	8005b94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b06      	cmp	r3, #6
 8005b80:	d010      	beq.n	8005ba4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0201 	orr.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b92:	e007      	b.n	8005ba4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0201 	orr.w	r2, r2, #1
 8005ba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	40010000 	.word	0x40010000
 8005bb8:	40000400 	.word	0x40000400
 8005bbc:	40000800 	.word	0x40000800
 8005bc0:	40000c00 	.word	0x40000c00
 8005bc4:	40010400 	.word	0x40010400
 8005bc8:	40014000 	.word	0x40014000
 8005bcc:	40001800 	.word	0x40001800

08005bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e041      	b.n	8005c66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d106      	bne.n	8005bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f7fd fad0 	bl	800319c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	3304      	adds	r3, #4
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4610      	mov	r0, r2
 8005c10:	f000 fc04 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
	...

08005c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_TIM_PWM_Start+0x24>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	bf14      	ite	ne
 8005c8c:	2301      	movne	r3, #1
 8005c8e:	2300      	moveq	r3, #0
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e022      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	2b04      	cmp	r3, #4
 8005c98:	d109      	bne.n	8005cae <HAL_TIM_PWM_Start+0x3e>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	bf14      	ite	ne
 8005ca6:	2301      	movne	r3, #1
 8005ca8:	2300      	moveq	r3, #0
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	e015      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	2b08      	cmp	r3, #8
 8005cb2:	d109      	bne.n	8005cc8 <HAL_TIM_PWM_Start+0x58>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	bf14      	ite	ne
 8005cc0:	2301      	movne	r3, #1
 8005cc2:	2300      	moveq	r3, #0
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	e008      	b.n	8005cda <HAL_TIM_PWM_Start+0x6a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e07c      	b.n	8005ddc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d104      	bne.n	8005cf2 <HAL_TIM_PWM_Start+0x82>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf0:	e013      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x92>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b08      	cmp	r3, #8
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start+0xa2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d10:	e003      	b.n	8005d1a <HAL_TIM_PWM_Start+0xaa>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	6839      	ldr	r1, [r7, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fdd6 	bl	80068d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8005de4 <HAL_TIM_PWM_Start+0x174>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d004      	beq.n	8005d3c <HAL_TIM_PWM_Start+0xcc>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a2c      	ldr	r2, [pc, #176]	@ (8005de8 <HAL_TIM_PWM_Start+0x178>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d101      	bne.n	8005d40 <HAL_TIM_PWM_Start+0xd0>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <HAL_TIM_PWM_Start+0xd2>
 8005d40:	2300      	movs	r3, #0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d007      	beq.n	8005d56 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a22      	ldr	r2, [pc, #136]	@ (8005de4 <HAL_TIM_PWM_Start+0x174>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d022      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d68:	d01d      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8005dec <HAL_TIM_PWM_Start+0x17c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d018      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1d      	ldr	r2, [pc, #116]	@ (8005df0 <HAL_TIM_PWM_Start+0x180>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d013      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a1c      	ldr	r2, [pc, #112]	@ (8005df4 <HAL_TIM_PWM_Start+0x184>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d00e      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	@ (8005de8 <HAL_TIM_PWM_Start+0x178>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <HAL_TIM_PWM_Start+0x188>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d004      	beq.n	8005da6 <HAL_TIM_PWM_Start+0x136>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a16      	ldr	r2, [pc, #88]	@ (8005dfc <HAL_TIM_PWM_Start+0x18c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d111      	bne.n	8005dca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2b06      	cmp	r3, #6
 8005db6:	d010      	beq.n	8005dda <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f042 0201 	orr.w	r2, r2, #1
 8005dc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	e007      	b.n	8005dda <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f042 0201 	orr.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3710      	adds	r7, #16
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40001800 	.word	0x40001800

08005e00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e097      	b.n	8005f44 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7fd f939 	bl	80030a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2202      	movs	r2, #2
 8005e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e44:	f023 0307 	bic.w	r3, r3, #7
 8005e48:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f000 fae1 	bl	800641c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6a1b      	ldr	r3, [r3, #32]
 8005e70:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	697a      	ldr	r2, [r7, #20]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e82:	f023 0303 	bic.w	r3, r3, #3
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	4313      	orrs	r3, r2
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005ea0:	f023 030c 	bic.w	r3, r3, #12
 8005ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005eac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	021b      	lsls	r3, r3, #8
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	011a      	lsls	r2, r3, #4
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	6a1b      	ldr	r3, [r3, #32]
 8005ece:	031b      	lsls	r3, r3, #12
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	695b      	ldr	r3, [r3, #20]
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3718      	adds	r7, #24
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f5c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f64:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f6c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005f74:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d110      	bne.n	8005f9e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f82:	7b7b      	ldrb	r3, [r7, #13]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d001      	beq.n	8005f8c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e069      	b.n	8006060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f9c:	e031      	b.n	8006002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b04      	cmp	r3, #4
 8005fa2:	d110      	bne.n	8005fc6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d102      	bne.n	8005fb0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005faa:	7b3b      	ldrb	r3, [r7, #12]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e055      	b.n	8006060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fc4:	e01d      	b.n	8006002 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d108      	bne.n	8005fde <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fcc:	7bbb      	ldrb	r3, [r7, #14]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d105      	bne.n	8005fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fd2:	7b7b      	ldrb	r3, [r7, #13]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d102      	bne.n	8005fde <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fd8:	7b3b      	ldrb	r3, [r7, #12]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d001      	beq.n	8005fe2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e03e      	b.n	8006060 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2202      	movs	r2, #2
 8005fe6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_TIM_Encoder_Start+0xc4>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b04      	cmp	r3, #4
 800600c:	d008      	beq.n	8006020 <HAL_TIM_Encoder_Start+0xd4>
 800600e:	e00f      	b.n	8006030 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2201      	movs	r2, #1
 8006016:	2100      	movs	r1, #0
 8006018:	4618      	mov	r0, r3
 800601a:	f000 fc5b 	bl	80068d4 <TIM_CCxChannelCmd>
      break;
 800601e:	e016      	b.n	800604e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2201      	movs	r2, #1
 8006026:	2104      	movs	r1, #4
 8006028:	4618      	mov	r0, r3
 800602a:	f000 fc53 	bl	80068d4 <TIM_CCxChannelCmd>
      break;
 800602e:	e00e      	b.n	800604e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	2100      	movs	r1, #0
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fc4b 	bl	80068d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2201      	movs	r2, #1
 8006044:	2104      	movs	r1, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fc44 	bl	80068d4 <TIM_CCxChannelCmd>
      break;
 800604c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0201 	orr.w	r2, r2, #1
 800605c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d020      	beq.n	80060cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0302 	and.w	r3, r3, #2
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0202 	mvn.w	r2, #2
 800609c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f994 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f986 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f997 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0304 	and.w	r3, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d020      	beq.n	8006118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0204 	mvn.w	r2, #4
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f96e 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8006104:	e005      	b.n	8006112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f960 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f971 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d020      	beq.n	8006164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0308 	and.w	r3, r3, #8
 8006128:	2b00      	cmp	r3, #0
 800612a:	d01b      	beq.n	8006164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0208 	mvn.w	r2, #8
 8006134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2204      	movs	r2, #4
 800613a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f003 0303 	and.w	r3, r3, #3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d003      	beq.n	8006152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f948 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8006150:	e005      	b.n	800615e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f93a 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f94b 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 0310 	and.w	r3, r3, #16
 800616a:	2b00      	cmp	r3, #0
 800616c:	d020      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01b      	beq.n	80061b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0210 	mvn.w	r2, #16
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2208      	movs	r2, #8
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f922 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f914 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 f925 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00c      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0201 	mvn.w	r2, #1
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fb fa38 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00c      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fc1a 	bl	8006a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d00c      	beq.n	800621c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8f6 	bl	8006408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00c      	beq.n	8006240 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f003 0320 	and.w	r3, r3, #32
 800622c:	2b00      	cmp	r3, #0
 800622e:	d007      	beq.n	8006240 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f06f 0220 	mvn.w	r2, #32
 8006238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fbec 	bl	8006a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006240:	bf00      	nop
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006262:	2302      	movs	r3, #2
 8006264:	e0ae      	b.n	80063c4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b0c      	cmp	r3, #12
 8006272:	f200 809f 	bhi.w	80063b4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006276:	a201      	add	r2, pc, #4	@ (adr r2, 800627c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	080062b1 	.word	0x080062b1
 8006280:	080063b5 	.word	0x080063b5
 8006284:	080063b5 	.word	0x080063b5
 8006288:	080063b5 	.word	0x080063b5
 800628c:	080062f1 	.word	0x080062f1
 8006290:	080063b5 	.word	0x080063b5
 8006294:	080063b5 	.word	0x080063b5
 8006298:	080063b5 	.word	0x080063b5
 800629c:	08006333 	.word	0x08006333
 80062a0:	080063b5 	.word	0x080063b5
 80062a4:	080063b5 	.word	0x080063b5
 80062a8:	080063b5 	.word	0x080063b5
 80062ac:	08006373 	.word	0x08006373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 f95c 	bl	8006574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0208 	orr.w	r2, r2, #8
 80062ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f022 0204 	bic.w	r2, r2, #4
 80062da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6999      	ldr	r1, [r3, #24]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	619a      	str	r2, [r3, #24]
      break;
 80062ee:	e064      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68b9      	ldr	r1, [r7, #8]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f9ac 	bl	8006654 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800630a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	699a      	ldr	r2, [r3, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800631a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	6999      	ldr	r1, [r3, #24]
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	021a      	lsls	r2, r3, #8
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	619a      	str	r2, [r3, #24]
      break;
 8006330:	e043      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 fa01 	bl	8006740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f042 0208 	orr.w	r2, r2, #8
 800634c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0204 	bic.w	r2, r2, #4
 800635c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69d9      	ldr	r1, [r3, #28]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	430a      	orrs	r2, r1
 800636e:	61da      	str	r2, [r3, #28]
      break;
 8006370:	e023      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	68b9      	ldr	r1, [r7, #8]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fa55 	bl	8006828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800638c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69da      	ldr	r2, [r3, #28]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800639c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69d9      	ldr	r1, [r3, #28]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	021a      	lsls	r2, r3, #8
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	61da      	str	r2, [r3, #28]
      break;
 80063b2:	e002      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80063c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a46      	ldr	r2, [pc, #280]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d013      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a43      	ldr	r2, [pc, #268]	@ (800654c <TIM_Base_SetConfig+0x130>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a42      	ldr	r2, [pc, #264]	@ (8006550 <TIM_Base_SetConfig+0x134>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a41      	ldr	r2, [pc, #260]	@ (8006554 <TIM_Base_SetConfig+0x138>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a40      	ldr	r2, [pc, #256]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d108      	bne.n	800646e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	68fa      	ldr	r2, [r7, #12]
 800646a:	4313      	orrs	r3, r2
 800646c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a35      	ldr	r2, [pc, #212]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800647c:	d027      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a32      	ldr	r2, [pc, #200]	@ (800654c <TIM_Base_SetConfig+0x130>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d023      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a31      	ldr	r2, [pc, #196]	@ (8006550 <TIM_Base_SetConfig+0x134>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a30      	ldr	r2, [pc, #192]	@ (8006554 <TIM_Base_SetConfig+0x138>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d01b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2f      	ldr	r2, [pc, #188]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d017      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2e      	ldr	r2, [pc, #184]	@ (800655c <TIM_Base_SetConfig+0x140>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d013      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2d      	ldr	r2, [pc, #180]	@ (8006560 <TIM_Base_SetConfig+0x144>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00f      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	@ (8006564 <TIM_Base_SetConfig+0x148>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d00b      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006568 <TIM_Base_SetConfig+0x14c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d007      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	@ (800656c <TIM_Base_SetConfig+0x150>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d003      	beq.n	80064ce <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a29      	ldr	r2, [pc, #164]	@ (8006570 <TIM_Base_SetConfig+0x154>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d108      	bne.n	80064e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a10      	ldr	r2, [pc, #64]	@ (8006548 <TIM_Base_SetConfig+0x12c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0xf8>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a12      	ldr	r2, [pc, #72]	@ (8006558 <TIM_Base_SetConfig+0x13c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d103      	bne.n	800651c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	691a      	ldr	r2, [r3, #16]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b01      	cmp	r3, #1
 800652c:	d105      	bne.n	800653a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f023 0201 	bic.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]
  }
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800
 8006568:	40001800 	.word	0x40001800
 800656c:	40001c00 	.word	0x40001c00
 8006570:	40002000 	.word	0x40002000

08006574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f023 0201 	bic.w	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 0302 	bic.w	r3, r3, #2
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a20      	ldr	r2, [pc, #128]	@ (800664c <TIM_OC1_SetConfig+0xd8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC1_SetConfig+0x64>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10c      	bne.n	80065f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0308 	bic.w	r3, r3, #8
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	@ (800664c <TIM_OC1_SetConfig+0xd8>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC1_SetConfig+0x8e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a14      	ldr	r2, [pc, #80]	@ (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d111      	bne.n	8006626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	621a      	str	r2, [r3, #32]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	40010000 	.word	0x40010000
 8006650:	40010400 	.word	0x40010400

08006654 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	f023 0210 	bic.w	r2, r3, #16
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800668a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	021b      	lsls	r3, r3, #8
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	4313      	orrs	r3, r2
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	f023 0320 	bic.w	r3, r3, #32
 800669e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	011b      	lsls	r3, r3, #4
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <TIM_OC2_SetConfig+0xe4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC2_SetConfig+0x68>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a21      	ldr	r2, [pc, #132]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10d      	bne.n	80066d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a17      	ldr	r2, [pc, #92]	@ (8006738 <TIM_OC2_SetConfig+0xe4>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d003      	beq.n	80066e8 <TIM_OC2_SetConfig+0x94>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a16      	ldr	r2, [pc, #88]	@ (800673c <TIM_OC2_SetConfig+0xe8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d113      	bne.n	8006710 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4313      	orrs	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	4313      	orrs	r3, r2
 800670e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	693a      	ldr	r2, [r7, #16]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	40010000 	.word	0x40010000
 800673c:	40010400 	.word	0x40010400

08006740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006740:	b480      	push	{r7}
 8006742:	b087      	sub	sp, #28
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0303 	bic.w	r3, r3, #3
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	021b      	lsls	r3, r3, #8
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	4313      	orrs	r3, r2
 8006794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a21      	ldr	r2, [pc, #132]	@ (8006820 <TIM_OC3_SetConfig+0xe0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d003      	beq.n	80067a6 <TIM_OC3_SetConfig+0x66>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a20      	ldr	r2, [pc, #128]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10d      	bne.n	80067c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	021b      	lsls	r3, r3, #8
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a16      	ldr	r2, [pc, #88]	@ (8006820 <TIM_OC3_SetConfig+0xe0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC3_SetConfig+0x92>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <TIM_OC3_SetConfig+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d113      	bne.n	80067fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	011b      	lsls	r3, r3, #4
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	621a      	str	r2, [r3, #32]
}
 8006814:	bf00      	nop
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40010000 	.word	0x40010000
 8006824:	40010400 	.word	0x40010400

08006828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a12      	ldr	r2, [pc, #72]	@ (80068cc <TIM_OC4_SetConfig+0xa4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC4_SetConfig+0x68>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a11      	ldr	r2, [pc, #68]	@ (80068d0 <TIM_OC4_SetConfig+0xa8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d109      	bne.n	80068a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006896:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	019b      	lsls	r3, r3, #6
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40010400 	.word	0x40010400

080068d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2201      	movs	r2, #1
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6a1a      	ldr	r2, [r3, #32]
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	43db      	mvns	r3, r3
 80068f6:	401a      	ands	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	431a      	orrs	r2, r3
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
	...

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e05a      	b.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006984:	d01d      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a17      	ldr	r2, [pc, #92]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10c      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40001800 	.word	0x40001800

08006a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <abort>:
 8006a40:	b508      	push	{r3, lr}
 8006a42:	2006      	movs	r0, #6
 8006a44:	f001 f9d0 	bl	8007de8 <raise>
 8006a48:	2001      	movs	r0, #1
 8006a4a:	f7fc fc9d 	bl	8003388 <_exit>
	...

08006a50 <malloc>:
 8006a50:	4b02      	ldr	r3, [pc, #8]	@ (8006a5c <malloc+0xc>)
 8006a52:	4601      	mov	r1, r0
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	f000 b82d 	b.w	8006ab4 <_malloc_r>
 8006a5a:	bf00      	nop
 8006a5c:	2000001c 	.word	0x2000001c

08006a60 <free>:
 8006a60:	4b02      	ldr	r3, [pc, #8]	@ (8006a6c <free+0xc>)
 8006a62:	4601      	mov	r1, r0
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	f002 b8b7 	b.w	8008bd8 <_free_r>
 8006a6a:	bf00      	nop
 8006a6c:	2000001c 	.word	0x2000001c

08006a70 <sbrk_aligned>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	4e0f      	ldr	r6, [pc, #60]	@ (8006ab0 <sbrk_aligned+0x40>)
 8006a74:	460c      	mov	r4, r1
 8006a76:	6831      	ldr	r1, [r6, #0]
 8006a78:	4605      	mov	r5, r0
 8006a7a:	b911      	cbnz	r1, 8006a82 <sbrk_aligned+0x12>
 8006a7c:	f001 fa08 	bl	8007e90 <_sbrk_r>
 8006a80:	6030      	str	r0, [r6, #0]
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f001 fa03 	bl	8007e90 <_sbrk_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d103      	bne.n	8006a96 <sbrk_aligned+0x26>
 8006a8e:	f04f 34ff 	mov.w	r4, #4294967295
 8006a92:	4620      	mov	r0, r4
 8006a94:	bd70      	pop	{r4, r5, r6, pc}
 8006a96:	1cc4      	adds	r4, r0, #3
 8006a98:	f024 0403 	bic.w	r4, r4, #3
 8006a9c:	42a0      	cmp	r0, r4
 8006a9e:	d0f8      	beq.n	8006a92 <sbrk_aligned+0x22>
 8006aa0:	1a21      	subs	r1, r4, r0
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f001 f9f4 	bl	8007e90 <_sbrk_r>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d1f2      	bne.n	8006a92 <sbrk_aligned+0x22>
 8006aac:	e7ef      	b.n	8006a8e <sbrk_aligned+0x1e>
 8006aae:	bf00      	nop
 8006ab0:	20000528 	.word	0x20000528

08006ab4 <_malloc_r>:
 8006ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ab8:	1ccd      	adds	r5, r1, #3
 8006aba:	f025 0503 	bic.w	r5, r5, #3
 8006abe:	3508      	adds	r5, #8
 8006ac0:	2d0c      	cmp	r5, #12
 8006ac2:	bf38      	it	cc
 8006ac4:	250c      	movcc	r5, #12
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	4606      	mov	r6, r0
 8006aca:	db01      	blt.n	8006ad0 <_malloc_r+0x1c>
 8006acc:	42a9      	cmp	r1, r5
 8006ace:	d904      	bls.n	8006ada <_malloc_r+0x26>
 8006ad0:	230c      	movs	r3, #12
 8006ad2:	6033      	str	r3, [r6, #0]
 8006ad4:	2000      	movs	r0, #0
 8006ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ada:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bb0 <_malloc_r+0xfc>
 8006ade:	f000 f869 	bl	8006bb4 <__malloc_lock>
 8006ae2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ae6:	461c      	mov	r4, r3
 8006ae8:	bb44      	cbnz	r4, 8006b3c <_malloc_r+0x88>
 8006aea:	4629      	mov	r1, r5
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff ffbf 	bl	8006a70 <sbrk_aligned>
 8006af2:	1c43      	adds	r3, r0, #1
 8006af4:	4604      	mov	r4, r0
 8006af6:	d158      	bne.n	8006baa <_malloc_r+0xf6>
 8006af8:	f8d8 4000 	ldr.w	r4, [r8]
 8006afc:	4627      	mov	r7, r4
 8006afe:	2f00      	cmp	r7, #0
 8006b00:	d143      	bne.n	8006b8a <_malloc_r+0xd6>
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	d04b      	beq.n	8006b9e <_malloc_r+0xea>
 8006b06:	6823      	ldr	r3, [r4, #0]
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	eb04 0903 	add.w	r9, r4, r3
 8006b10:	f001 f9be 	bl	8007e90 <_sbrk_r>
 8006b14:	4581      	cmp	r9, r0
 8006b16:	d142      	bne.n	8006b9e <_malloc_r+0xea>
 8006b18:	6821      	ldr	r1, [r4, #0]
 8006b1a:	1a6d      	subs	r5, r5, r1
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4630      	mov	r0, r6
 8006b20:	f7ff ffa6 	bl	8006a70 <sbrk_aligned>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d03a      	beq.n	8006b9e <_malloc_r+0xea>
 8006b28:	6823      	ldr	r3, [r4, #0]
 8006b2a:	442b      	add	r3, r5
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b32:	685a      	ldr	r2, [r3, #4]
 8006b34:	bb62      	cbnz	r2, 8006b90 <_malloc_r+0xdc>
 8006b36:	f8c8 7000 	str.w	r7, [r8]
 8006b3a:	e00f      	b.n	8006b5c <_malloc_r+0xa8>
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	1b52      	subs	r2, r2, r5
 8006b40:	d420      	bmi.n	8006b84 <_malloc_r+0xd0>
 8006b42:	2a0b      	cmp	r2, #11
 8006b44:	d917      	bls.n	8006b76 <_malloc_r+0xc2>
 8006b46:	1961      	adds	r1, r4, r5
 8006b48:	42a3      	cmp	r3, r4
 8006b4a:	6025      	str	r5, [r4, #0]
 8006b4c:	bf18      	it	ne
 8006b4e:	6059      	strne	r1, [r3, #4]
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	bf08      	it	eq
 8006b54:	f8c8 1000 	streq.w	r1, [r8]
 8006b58:	5162      	str	r2, [r4, r5]
 8006b5a:	604b      	str	r3, [r1, #4]
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	f000 f82f 	bl	8006bc0 <__malloc_unlock>
 8006b62:	f104 000b 	add.w	r0, r4, #11
 8006b66:	1d23      	adds	r3, r4, #4
 8006b68:	f020 0007 	bic.w	r0, r0, #7
 8006b6c:	1ac2      	subs	r2, r0, r3
 8006b6e:	bf1c      	itt	ne
 8006b70:	1a1b      	subne	r3, r3, r0
 8006b72:	50a3      	strne	r3, [r4, r2]
 8006b74:	e7af      	b.n	8006ad6 <_malloc_r+0x22>
 8006b76:	6862      	ldr	r2, [r4, #4]
 8006b78:	42a3      	cmp	r3, r4
 8006b7a:	bf0c      	ite	eq
 8006b7c:	f8c8 2000 	streq.w	r2, [r8]
 8006b80:	605a      	strne	r2, [r3, #4]
 8006b82:	e7eb      	b.n	8006b5c <_malloc_r+0xa8>
 8006b84:	4623      	mov	r3, r4
 8006b86:	6864      	ldr	r4, [r4, #4]
 8006b88:	e7ae      	b.n	8006ae8 <_malloc_r+0x34>
 8006b8a:	463c      	mov	r4, r7
 8006b8c:	687f      	ldr	r7, [r7, #4]
 8006b8e:	e7b6      	b.n	8006afe <_malloc_r+0x4a>
 8006b90:	461a      	mov	r2, r3
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	42a3      	cmp	r3, r4
 8006b96:	d1fb      	bne.n	8006b90 <_malloc_r+0xdc>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6053      	str	r3, [r2, #4]
 8006b9c:	e7de      	b.n	8006b5c <_malloc_r+0xa8>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	6033      	str	r3, [r6, #0]
 8006ba2:	4630      	mov	r0, r6
 8006ba4:	f000 f80c 	bl	8006bc0 <__malloc_unlock>
 8006ba8:	e794      	b.n	8006ad4 <_malloc_r+0x20>
 8006baa:	6005      	str	r5, [r0, #0]
 8006bac:	e7d6      	b.n	8006b5c <_malloc_r+0xa8>
 8006bae:	bf00      	nop
 8006bb0:	2000052c 	.word	0x2000052c

08006bb4 <__malloc_lock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	@ (8006bbc <__malloc_lock+0x8>)
 8006bb6:	f001 b9b8 	b.w	8007f2a <__retarget_lock_acquire_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000670 	.word	0x20000670

08006bc0 <__malloc_unlock>:
 8006bc0:	4801      	ldr	r0, [pc, #4]	@ (8006bc8 <__malloc_unlock+0x8>)
 8006bc2:	f001 b9b3 	b.w	8007f2c <__retarget_lock_release_recursive>
 8006bc6:	bf00      	nop
 8006bc8:	20000670 	.word	0x20000670

08006bcc <__cvt>:
 8006bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bd0:	ec57 6b10 	vmov	r6, r7, d0
 8006bd4:	2f00      	cmp	r7, #0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	4619      	mov	r1, r3
 8006bda:	463b      	mov	r3, r7
 8006bdc:	bfbb      	ittet	lt
 8006bde:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006be2:	461f      	movlt	r7, r3
 8006be4:	2300      	movge	r3, #0
 8006be6:	232d      	movlt	r3, #45	@ 0x2d
 8006be8:	700b      	strb	r3, [r1, #0]
 8006bea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006bf0:	4691      	mov	r9, r2
 8006bf2:	f023 0820 	bic.w	r8, r3, #32
 8006bf6:	bfbc      	itt	lt
 8006bf8:	4632      	movlt	r2, r6
 8006bfa:	4616      	movlt	r6, r2
 8006bfc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c00:	d005      	beq.n	8006c0e <__cvt+0x42>
 8006c02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c06:	d100      	bne.n	8006c0a <__cvt+0x3e>
 8006c08:	3401      	adds	r4, #1
 8006c0a:	2102      	movs	r1, #2
 8006c0c:	e000      	b.n	8006c10 <__cvt+0x44>
 8006c0e:	2103      	movs	r1, #3
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9301      	str	r3, [sp, #4]
 8006c14:	ab02      	add	r3, sp, #8
 8006c16:	9300      	str	r3, [sp, #0]
 8006c18:	ec47 6b10 	vmov	d0, r6, r7
 8006c1c:	4653      	mov	r3, sl
 8006c1e:	4622      	mov	r2, r4
 8006c20:	f001 fa16 	bl	8008050 <_dtoa_r>
 8006c24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006c28:	4605      	mov	r5, r0
 8006c2a:	d119      	bne.n	8006c60 <__cvt+0x94>
 8006c2c:	f019 0f01 	tst.w	r9, #1
 8006c30:	d00e      	beq.n	8006c50 <__cvt+0x84>
 8006c32:	eb00 0904 	add.w	r9, r0, r4
 8006c36:	2200      	movs	r2, #0
 8006c38:	2300      	movs	r3, #0
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 ff63 	bl	8000b08 <__aeabi_dcmpeq>
 8006c42:	b108      	cbz	r0, 8006c48 <__cvt+0x7c>
 8006c44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c48:	2230      	movs	r2, #48	@ 0x30
 8006c4a:	9b03      	ldr	r3, [sp, #12]
 8006c4c:	454b      	cmp	r3, r9
 8006c4e:	d31e      	bcc.n	8006c8e <__cvt+0xc2>
 8006c50:	9b03      	ldr	r3, [sp, #12]
 8006c52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c54:	1b5b      	subs	r3, r3, r5
 8006c56:	4628      	mov	r0, r5
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	b004      	add	sp, #16
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c64:	eb00 0904 	add.w	r9, r0, r4
 8006c68:	d1e5      	bne.n	8006c36 <__cvt+0x6a>
 8006c6a:	7803      	ldrb	r3, [r0, #0]
 8006c6c:	2b30      	cmp	r3, #48	@ 0x30
 8006c6e:	d10a      	bne.n	8006c86 <__cvt+0xba>
 8006c70:	2200      	movs	r2, #0
 8006c72:	2300      	movs	r3, #0
 8006c74:	4630      	mov	r0, r6
 8006c76:	4639      	mov	r1, r7
 8006c78:	f7f9 ff46 	bl	8000b08 <__aeabi_dcmpeq>
 8006c7c:	b918      	cbnz	r0, 8006c86 <__cvt+0xba>
 8006c7e:	f1c4 0401 	rsb	r4, r4, #1
 8006c82:	f8ca 4000 	str.w	r4, [sl]
 8006c86:	f8da 3000 	ldr.w	r3, [sl]
 8006c8a:	4499      	add	r9, r3
 8006c8c:	e7d3      	b.n	8006c36 <__cvt+0x6a>
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	9103      	str	r1, [sp, #12]
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e7d9      	b.n	8006c4a <__cvt+0x7e>

08006c96 <__exponent>:
 8006c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c98:	2900      	cmp	r1, #0
 8006c9a:	bfba      	itte	lt
 8006c9c:	4249      	neglt	r1, r1
 8006c9e:	232d      	movlt	r3, #45	@ 0x2d
 8006ca0:	232b      	movge	r3, #43	@ 0x2b
 8006ca2:	2909      	cmp	r1, #9
 8006ca4:	7002      	strb	r2, [r0, #0]
 8006ca6:	7043      	strb	r3, [r0, #1]
 8006ca8:	dd29      	ble.n	8006cfe <__exponent+0x68>
 8006caa:	f10d 0307 	add.w	r3, sp, #7
 8006cae:	461d      	mov	r5, r3
 8006cb0:	270a      	movs	r7, #10
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8006cb8:	fb07 1416 	mls	r4, r7, r6, r1
 8006cbc:	3430      	adds	r4, #48	@ 0x30
 8006cbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006cc2:	460c      	mov	r4, r1
 8006cc4:	2c63      	cmp	r4, #99	@ 0x63
 8006cc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cca:	4631      	mov	r1, r6
 8006ccc:	dcf1      	bgt.n	8006cb2 <__exponent+0x1c>
 8006cce:	3130      	adds	r1, #48	@ 0x30
 8006cd0:	1e94      	subs	r4, r2, #2
 8006cd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006cd6:	1c41      	adds	r1, r0, #1
 8006cd8:	4623      	mov	r3, r4
 8006cda:	42ab      	cmp	r3, r5
 8006cdc:	d30a      	bcc.n	8006cf4 <__exponent+0x5e>
 8006cde:	f10d 0309 	add.w	r3, sp, #9
 8006ce2:	1a9b      	subs	r3, r3, r2
 8006ce4:	42ac      	cmp	r4, r5
 8006ce6:	bf88      	it	hi
 8006ce8:	2300      	movhi	r3, #0
 8006cea:	3302      	adds	r3, #2
 8006cec:	4403      	add	r3, r0
 8006cee:	1a18      	subs	r0, r3, r0
 8006cf0:	b003      	add	sp, #12
 8006cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cf4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006cf8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006cfc:	e7ed      	b.n	8006cda <__exponent+0x44>
 8006cfe:	2330      	movs	r3, #48	@ 0x30
 8006d00:	3130      	adds	r1, #48	@ 0x30
 8006d02:	7083      	strb	r3, [r0, #2]
 8006d04:	70c1      	strb	r1, [r0, #3]
 8006d06:	1d03      	adds	r3, r0, #4
 8006d08:	e7f1      	b.n	8006cee <__exponent+0x58>
	...

08006d0c <_printf_float>:
 8006d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d10:	b08d      	sub	sp, #52	@ 0x34
 8006d12:	460c      	mov	r4, r1
 8006d14:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006d18:	4616      	mov	r6, r2
 8006d1a:	461f      	mov	r7, r3
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	f001 f86b 	bl	8007df8 <_localeconv_r>
 8006d22:	6803      	ldr	r3, [r0, #0]
 8006d24:	9304      	str	r3, [sp, #16]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7f9 fac2 	bl	80002b0 <strlen>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d30:	f8d8 3000 	ldr.w	r3, [r8]
 8006d34:	9005      	str	r0, [sp, #20]
 8006d36:	3307      	adds	r3, #7
 8006d38:	f023 0307 	bic.w	r3, r3, #7
 8006d3c:	f103 0208 	add.w	r2, r3, #8
 8006d40:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006d44:	f8d4 b000 	ldr.w	fp, [r4]
 8006d48:	f8c8 2000 	str.w	r2, [r8]
 8006d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d50:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006d54:	9307      	str	r3, [sp, #28]
 8006d56:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d5a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006d5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d62:	4b9c      	ldr	r3, [pc, #624]	@ (8006fd4 <_printf_float+0x2c8>)
 8006d64:	f04f 32ff 	mov.w	r2, #4294967295
 8006d68:	f7f9 ff00 	bl	8000b6c <__aeabi_dcmpun>
 8006d6c:	bb70      	cbnz	r0, 8006dcc <_printf_float+0xc0>
 8006d6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d72:	4b98      	ldr	r3, [pc, #608]	@ (8006fd4 <_printf_float+0x2c8>)
 8006d74:	f04f 32ff 	mov.w	r2, #4294967295
 8006d78:	f7f9 feda 	bl	8000b30 <__aeabi_dcmple>
 8006d7c:	bb30      	cbnz	r0, 8006dcc <_printf_float+0xc0>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2300      	movs	r3, #0
 8006d82:	4640      	mov	r0, r8
 8006d84:	4649      	mov	r1, r9
 8006d86:	f7f9 fec9 	bl	8000b1c <__aeabi_dcmplt>
 8006d8a:	b110      	cbz	r0, 8006d92 <_printf_float+0x86>
 8006d8c:	232d      	movs	r3, #45	@ 0x2d
 8006d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d92:	4a91      	ldr	r2, [pc, #580]	@ (8006fd8 <_printf_float+0x2cc>)
 8006d94:	4b91      	ldr	r3, [pc, #580]	@ (8006fdc <_printf_float+0x2d0>)
 8006d96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006d9a:	bf94      	ite	ls
 8006d9c:	4690      	movls	r8, r2
 8006d9e:	4698      	movhi	r8, r3
 8006da0:	2303      	movs	r3, #3
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	f02b 0304 	bic.w	r3, fp, #4
 8006da8:	6023      	str	r3, [r4, #0]
 8006daa:	f04f 0900 	mov.w	r9, #0
 8006dae:	9700      	str	r7, [sp, #0]
 8006db0:	4633      	mov	r3, r6
 8006db2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006db4:	4621      	mov	r1, r4
 8006db6:	4628      	mov	r0, r5
 8006db8:	f000 f9d2 	bl	8007160 <_printf_common>
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f040 808d 	bne.w	8006edc <_printf_float+0x1d0>
 8006dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8006dc6:	b00d      	add	sp, #52	@ 0x34
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	4640      	mov	r0, r8
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	f7f9 feca 	bl	8000b6c <__aeabi_dcmpun>
 8006dd8:	b140      	cbz	r0, 8006dec <_printf_float+0xe0>
 8006dda:	464b      	mov	r3, r9
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	bfbc      	itt	lt
 8006de0:	232d      	movlt	r3, #45	@ 0x2d
 8006de2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006de6:	4a7e      	ldr	r2, [pc, #504]	@ (8006fe0 <_printf_float+0x2d4>)
 8006de8:	4b7e      	ldr	r3, [pc, #504]	@ (8006fe4 <_printf_float+0x2d8>)
 8006dea:	e7d4      	b.n	8006d96 <_printf_float+0x8a>
 8006dec:	6863      	ldr	r3, [r4, #4]
 8006dee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006df2:	9206      	str	r2, [sp, #24]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	d13b      	bne.n	8006e70 <_printf_float+0x164>
 8006df8:	2306      	movs	r3, #6
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e00:	2300      	movs	r3, #0
 8006e02:	6022      	str	r2, [r4, #0]
 8006e04:	9303      	str	r3, [sp, #12]
 8006e06:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e08:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e0c:	ab09      	add	r3, sp, #36	@ 0x24
 8006e0e:	9300      	str	r3, [sp, #0]
 8006e10:	6861      	ldr	r1, [r4, #4]
 8006e12:	ec49 8b10 	vmov	d0, r8, r9
 8006e16:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f7ff fed6 	bl	8006bcc <__cvt>
 8006e20:	9b06      	ldr	r3, [sp, #24]
 8006e22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e24:	2b47      	cmp	r3, #71	@ 0x47
 8006e26:	4680      	mov	r8, r0
 8006e28:	d129      	bne.n	8006e7e <_printf_float+0x172>
 8006e2a:	1cc8      	adds	r0, r1, #3
 8006e2c:	db02      	blt.n	8006e34 <_printf_float+0x128>
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	4299      	cmp	r1, r3
 8006e32:	dd41      	ble.n	8006eb8 <_printf_float+0x1ac>
 8006e34:	f1aa 0a02 	sub.w	sl, sl, #2
 8006e38:	fa5f fa8a 	uxtb.w	sl, sl
 8006e3c:	3901      	subs	r1, #1
 8006e3e:	4652      	mov	r2, sl
 8006e40:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006e44:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e46:	f7ff ff26 	bl	8006c96 <__exponent>
 8006e4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e4c:	1813      	adds	r3, r2, r0
 8006e4e:	2a01      	cmp	r2, #1
 8006e50:	4681      	mov	r9, r0
 8006e52:	6123      	str	r3, [r4, #16]
 8006e54:	dc02      	bgt.n	8006e5c <_printf_float+0x150>
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	07d2      	lsls	r2, r2, #31
 8006e5a:	d501      	bpl.n	8006e60 <_printf_float+0x154>
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0a2      	beq.n	8006dae <_printf_float+0xa2>
 8006e68:	232d      	movs	r3, #45	@ 0x2d
 8006e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6e:	e79e      	b.n	8006dae <_printf_float+0xa2>
 8006e70:	9a06      	ldr	r2, [sp, #24]
 8006e72:	2a47      	cmp	r2, #71	@ 0x47
 8006e74:	d1c2      	bne.n	8006dfc <_printf_float+0xf0>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1c0      	bne.n	8006dfc <_printf_float+0xf0>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e7bd      	b.n	8006dfa <_printf_float+0xee>
 8006e7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e82:	d9db      	bls.n	8006e3c <_printf_float+0x130>
 8006e84:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006e88:	d118      	bne.n	8006ebc <_printf_float+0x1b0>
 8006e8a:	2900      	cmp	r1, #0
 8006e8c:	6863      	ldr	r3, [r4, #4]
 8006e8e:	dd0b      	ble.n	8006ea8 <_printf_float+0x19c>
 8006e90:	6121      	str	r1, [r4, #16]
 8006e92:	b913      	cbnz	r3, 8006e9a <_printf_float+0x18e>
 8006e94:	6822      	ldr	r2, [r4, #0]
 8006e96:	07d0      	lsls	r0, r2, #31
 8006e98:	d502      	bpl.n	8006ea0 <_printf_float+0x194>
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	440b      	add	r3, r1
 8006e9e:	6123      	str	r3, [r4, #16]
 8006ea0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006ea2:	f04f 0900 	mov.w	r9, #0
 8006ea6:	e7db      	b.n	8006e60 <_printf_float+0x154>
 8006ea8:	b913      	cbnz	r3, 8006eb0 <_printf_float+0x1a4>
 8006eaa:	6822      	ldr	r2, [r4, #0]
 8006eac:	07d2      	lsls	r2, r2, #31
 8006eae:	d501      	bpl.n	8006eb4 <_printf_float+0x1a8>
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7f4      	b.n	8006e9e <_printf_float+0x192>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e7f2      	b.n	8006e9e <_printf_float+0x192>
 8006eb8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ebe:	4299      	cmp	r1, r3
 8006ec0:	db05      	blt.n	8006ece <_printf_float+0x1c2>
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	6121      	str	r1, [r4, #16]
 8006ec6:	07d8      	lsls	r0, r3, #31
 8006ec8:	d5ea      	bpl.n	8006ea0 <_printf_float+0x194>
 8006eca:	1c4b      	adds	r3, r1, #1
 8006ecc:	e7e7      	b.n	8006e9e <_printf_float+0x192>
 8006ece:	2900      	cmp	r1, #0
 8006ed0:	bfd4      	ite	le
 8006ed2:	f1c1 0202 	rsble	r2, r1, #2
 8006ed6:	2201      	movgt	r2, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	e7e0      	b.n	8006e9e <_printf_float+0x192>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	055a      	lsls	r2, r3, #21
 8006ee0:	d407      	bmi.n	8006ef2 <_printf_float+0x1e6>
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	4642      	mov	r2, r8
 8006ee6:	4631      	mov	r1, r6
 8006ee8:	4628      	mov	r0, r5
 8006eea:	47b8      	blx	r7
 8006eec:	3001      	adds	r0, #1
 8006eee:	d12b      	bne.n	8006f48 <_printf_float+0x23c>
 8006ef0:	e767      	b.n	8006dc2 <_printf_float+0xb6>
 8006ef2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006ef6:	f240 80dd 	bls.w	80070b4 <_printf_float+0x3a8>
 8006efa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	f7f9 fe01 	bl	8000b08 <__aeabi_dcmpeq>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	d033      	beq.n	8006f72 <_printf_float+0x266>
 8006f0a:	4a37      	ldr	r2, [pc, #220]	@ (8006fe8 <_printf_float+0x2dc>)
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f af54 	beq.w	8006dc2 <_printf_float+0xb6>
 8006f1a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006f1e:	4543      	cmp	r3, r8
 8006f20:	db02      	blt.n	8006f28 <_printf_float+0x21c>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	07d8      	lsls	r0, r3, #31
 8006f26:	d50f      	bpl.n	8006f48 <_printf_float+0x23c>
 8006f28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f2c:	4631      	mov	r1, r6
 8006f2e:	4628      	mov	r0, r5
 8006f30:	47b8      	blx	r7
 8006f32:	3001      	adds	r0, #1
 8006f34:	f43f af45 	beq.w	8006dc2 <_printf_float+0xb6>
 8006f38:	f04f 0900 	mov.w	r9, #0
 8006f3c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006f40:	f104 0a1a 	add.w	sl, r4, #26
 8006f44:	45c8      	cmp	r8, r9
 8006f46:	dc09      	bgt.n	8006f5c <_printf_float+0x250>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	079b      	lsls	r3, r3, #30
 8006f4c:	f100 8103 	bmi.w	8007156 <_printf_float+0x44a>
 8006f50:	68e0      	ldr	r0, [r4, #12]
 8006f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f54:	4298      	cmp	r0, r3
 8006f56:	bfb8      	it	lt
 8006f58:	4618      	movlt	r0, r3
 8006f5a:	e734      	b.n	8006dc6 <_printf_float+0xba>
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	4652      	mov	r2, sl
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af2b 	beq.w	8006dc2 <_printf_float+0xb6>
 8006f6c:	f109 0901 	add.w	r9, r9, #1
 8006f70:	e7e8      	b.n	8006f44 <_printf_float+0x238>
 8006f72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	dc39      	bgt.n	8006fec <_printf_float+0x2e0>
 8006f78:	4a1b      	ldr	r2, [pc, #108]	@ (8006fe8 <_printf_float+0x2dc>)
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4628      	mov	r0, r5
 8006f80:	47b8      	blx	r7
 8006f82:	3001      	adds	r0, #1
 8006f84:	f43f af1d 	beq.w	8006dc2 <_printf_float+0xb6>
 8006f88:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006f8c:	ea59 0303 	orrs.w	r3, r9, r3
 8006f90:	d102      	bne.n	8006f98 <_printf_float+0x28c>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	07d9      	lsls	r1, r3, #31
 8006f96:	d5d7      	bpl.n	8006f48 <_printf_float+0x23c>
 8006f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	f43f af0d 	beq.w	8006dc2 <_printf_float+0xb6>
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	f104 0b1a 	add.w	fp, r4, #26
 8006fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb2:	425b      	negs	r3, r3
 8006fb4:	4553      	cmp	r3, sl
 8006fb6:	dc01      	bgt.n	8006fbc <_printf_float+0x2b0>
 8006fb8:	464b      	mov	r3, r9
 8006fba:	e793      	b.n	8006ee4 <_printf_float+0x1d8>
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	465a      	mov	r2, fp
 8006fc0:	4631      	mov	r1, r6
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	f43f aefb 	beq.w	8006dc2 <_printf_float+0xb6>
 8006fcc:	f10a 0a01 	add.w	sl, sl, #1
 8006fd0:	e7ee      	b.n	8006fb0 <_printf_float+0x2a4>
 8006fd2:	bf00      	nop
 8006fd4:	7fefffff 	.word	0x7fefffff
 8006fd8:	0800c764 	.word	0x0800c764
 8006fdc:	0800c768 	.word	0x0800c768
 8006fe0:	0800c76c 	.word	0x0800c76c
 8006fe4:	0800c770 	.word	0x0800c770
 8006fe8:	0800c774 	.word	0x0800c774
 8006fec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006fee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ff2:	4553      	cmp	r3, sl
 8006ff4:	bfa8      	it	ge
 8006ff6:	4653      	movge	r3, sl
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	4699      	mov	r9, r3
 8006ffc:	dc36      	bgt.n	800706c <_printf_float+0x360>
 8006ffe:	f04f 0b00 	mov.w	fp, #0
 8007002:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007006:	f104 021a 	add.w	r2, r4, #26
 800700a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800700c:	9306      	str	r3, [sp, #24]
 800700e:	eba3 0309 	sub.w	r3, r3, r9
 8007012:	455b      	cmp	r3, fp
 8007014:	dc31      	bgt.n	800707a <_printf_float+0x36e>
 8007016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007018:	459a      	cmp	sl, r3
 800701a:	dc3a      	bgt.n	8007092 <_printf_float+0x386>
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	07da      	lsls	r2, r3, #31
 8007020:	d437      	bmi.n	8007092 <_printf_float+0x386>
 8007022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007024:	ebaa 0903 	sub.w	r9, sl, r3
 8007028:	9b06      	ldr	r3, [sp, #24]
 800702a:	ebaa 0303 	sub.w	r3, sl, r3
 800702e:	4599      	cmp	r9, r3
 8007030:	bfa8      	it	ge
 8007032:	4699      	movge	r9, r3
 8007034:	f1b9 0f00 	cmp.w	r9, #0
 8007038:	dc33      	bgt.n	80070a2 <_printf_float+0x396>
 800703a:	f04f 0800 	mov.w	r8, #0
 800703e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007042:	f104 0b1a 	add.w	fp, r4, #26
 8007046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007048:	ebaa 0303 	sub.w	r3, sl, r3
 800704c:	eba3 0309 	sub.w	r3, r3, r9
 8007050:	4543      	cmp	r3, r8
 8007052:	f77f af79 	ble.w	8006f48 <_printf_float+0x23c>
 8007056:	2301      	movs	r3, #1
 8007058:	465a      	mov	r2, fp
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f aeae 	beq.w	8006dc2 <_printf_float+0xb6>
 8007066:	f108 0801 	add.w	r8, r8, #1
 800706a:	e7ec      	b.n	8007046 <_printf_float+0x33a>
 800706c:	4642      	mov	r2, r8
 800706e:	4631      	mov	r1, r6
 8007070:	4628      	mov	r0, r5
 8007072:	47b8      	blx	r7
 8007074:	3001      	adds	r0, #1
 8007076:	d1c2      	bne.n	8006ffe <_printf_float+0x2f2>
 8007078:	e6a3      	b.n	8006dc2 <_printf_float+0xb6>
 800707a:	2301      	movs	r3, #1
 800707c:	4631      	mov	r1, r6
 800707e:	4628      	mov	r0, r5
 8007080:	9206      	str	r2, [sp, #24]
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	f43f ae9c 	beq.w	8006dc2 <_printf_float+0xb6>
 800708a:	9a06      	ldr	r2, [sp, #24]
 800708c:	f10b 0b01 	add.w	fp, fp, #1
 8007090:	e7bb      	b.n	800700a <_printf_float+0x2fe>
 8007092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007096:	4631      	mov	r1, r6
 8007098:	4628      	mov	r0, r5
 800709a:	47b8      	blx	r7
 800709c:	3001      	adds	r0, #1
 800709e:	d1c0      	bne.n	8007022 <_printf_float+0x316>
 80070a0:	e68f      	b.n	8006dc2 <_printf_float+0xb6>
 80070a2:	9a06      	ldr	r2, [sp, #24]
 80070a4:	464b      	mov	r3, r9
 80070a6:	4442      	add	r2, r8
 80070a8:	4631      	mov	r1, r6
 80070aa:	4628      	mov	r0, r5
 80070ac:	47b8      	blx	r7
 80070ae:	3001      	adds	r0, #1
 80070b0:	d1c3      	bne.n	800703a <_printf_float+0x32e>
 80070b2:	e686      	b.n	8006dc2 <_printf_float+0xb6>
 80070b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80070b8:	f1ba 0f01 	cmp.w	sl, #1
 80070bc:	dc01      	bgt.n	80070c2 <_printf_float+0x3b6>
 80070be:	07db      	lsls	r3, r3, #31
 80070c0:	d536      	bpl.n	8007130 <_printf_float+0x424>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4642      	mov	r2, r8
 80070c6:	4631      	mov	r1, r6
 80070c8:	4628      	mov	r0, r5
 80070ca:	47b8      	blx	r7
 80070cc:	3001      	adds	r0, #1
 80070ce:	f43f ae78 	beq.w	8006dc2 <_printf_float+0xb6>
 80070d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d6:	4631      	mov	r1, r6
 80070d8:	4628      	mov	r0, r5
 80070da:	47b8      	blx	r7
 80070dc:	3001      	adds	r0, #1
 80070de:	f43f ae70 	beq.w	8006dc2 <_printf_float+0xb6>
 80070e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070ee:	f7f9 fd0b 	bl	8000b08 <__aeabi_dcmpeq>
 80070f2:	b9c0      	cbnz	r0, 8007126 <_printf_float+0x41a>
 80070f4:	4653      	mov	r3, sl
 80070f6:	f108 0201 	add.w	r2, r8, #1
 80070fa:	4631      	mov	r1, r6
 80070fc:	4628      	mov	r0, r5
 80070fe:	47b8      	blx	r7
 8007100:	3001      	adds	r0, #1
 8007102:	d10c      	bne.n	800711e <_printf_float+0x412>
 8007104:	e65d      	b.n	8006dc2 <_printf_float+0xb6>
 8007106:	2301      	movs	r3, #1
 8007108:	465a      	mov	r2, fp
 800710a:	4631      	mov	r1, r6
 800710c:	4628      	mov	r0, r5
 800710e:	47b8      	blx	r7
 8007110:	3001      	adds	r0, #1
 8007112:	f43f ae56 	beq.w	8006dc2 <_printf_float+0xb6>
 8007116:	f108 0801 	add.w	r8, r8, #1
 800711a:	45d0      	cmp	r8, sl
 800711c:	dbf3      	blt.n	8007106 <_printf_float+0x3fa>
 800711e:	464b      	mov	r3, r9
 8007120:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007124:	e6df      	b.n	8006ee6 <_printf_float+0x1da>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	f104 0b1a 	add.w	fp, r4, #26
 800712e:	e7f4      	b.n	800711a <_printf_float+0x40e>
 8007130:	2301      	movs	r3, #1
 8007132:	4642      	mov	r2, r8
 8007134:	e7e1      	b.n	80070fa <_printf_float+0x3ee>
 8007136:	2301      	movs	r3, #1
 8007138:	464a      	mov	r2, r9
 800713a:	4631      	mov	r1, r6
 800713c:	4628      	mov	r0, r5
 800713e:	47b8      	blx	r7
 8007140:	3001      	adds	r0, #1
 8007142:	f43f ae3e 	beq.w	8006dc2 <_printf_float+0xb6>
 8007146:	f108 0801 	add.w	r8, r8, #1
 800714a:	68e3      	ldr	r3, [r4, #12]
 800714c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800714e:	1a5b      	subs	r3, r3, r1
 8007150:	4543      	cmp	r3, r8
 8007152:	dcf0      	bgt.n	8007136 <_printf_float+0x42a>
 8007154:	e6fc      	b.n	8006f50 <_printf_float+0x244>
 8007156:	f04f 0800 	mov.w	r8, #0
 800715a:	f104 0919 	add.w	r9, r4, #25
 800715e:	e7f4      	b.n	800714a <_printf_float+0x43e>

08007160 <_printf_common>:
 8007160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007164:	4616      	mov	r6, r2
 8007166:	4698      	mov	r8, r3
 8007168:	688a      	ldr	r2, [r1, #8]
 800716a:	690b      	ldr	r3, [r1, #16]
 800716c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007170:	4293      	cmp	r3, r2
 8007172:	bfb8      	it	lt
 8007174:	4613      	movlt	r3, r2
 8007176:	6033      	str	r3, [r6, #0]
 8007178:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800717c:	4607      	mov	r7, r0
 800717e:	460c      	mov	r4, r1
 8007180:	b10a      	cbz	r2, 8007186 <_printf_common+0x26>
 8007182:	3301      	adds	r3, #1
 8007184:	6033      	str	r3, [r6, #0]
 8007186:	6823      	ldr	r3, [r4, #0]
 8007188:	0699      	lsls	r1, r3, #26
 800718a:	bf42      	ittt	mi
 800718c:	6833      	ldrmi	r3, [r6, #0]
 800718e:	3302      	addmi	r3, #2
 8007190:	6033      	strmi	r3, [r6, #0]
 8007192:	6825      	ldr	r5, [r4, #0]
 8007194:	f015 0506 	ands.w	r5, r5, #6
 8007198:	d106      	bne.n	80071a8 <_printf_common+0x48>
 800719a:	f104 0a19 	add.w	sl, r4, #25
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	6832      	ldr	r2, [r6, #0]
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	42ab      	cmp	r3, r5
 80071a6:	dc26      	bgt.n	80071f6 <_printf_common+0x96>
 80071a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80071ac:	6822      	ldr	r2, [r4, #0]
 80071ae:	3b00      	subs	r3, #0
 80071b0:	bf18      	it	ne
 80071b2:	2301      	movne	r3, #1
 80071b4:	0692      	lsls	r2, r2, #26
 80071b6:	d42b      	bmi.n	8007210 <_printf_common+0xb0>
 80071b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80071bc:	4641      	mov	r1, r8
 80071be:	4638      	mov	r0, r7
 80071c0:	47c8      	blx	r9
 80071c2:	3001      	adds	r0, #1
 80071c4:	d01e      	beq.n	8007204 <_printf_common+0xa4>
 80071c6:	6823      	ldr	r3, [r4, #0]
 80071c8:	6922      	ldr	r2, [r4, #16]
 80071ca:	f003 0306 	and.w	r3, r3, #6
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	bf02      	ittt	eq
 80071d2:	68e5      	ldreq	r5, [r4, #12]
 80071d4:	6833      	ldreq	r3, [r6, #0]
 80071d6:	1aed      	subeq	r5, r5, r3
 80071d8:	68a3      	ldr	r3, [r4, #8]
 80071da:	bf0c      	ite	eq
 80071dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071e0:	2500      	movne	r5, #0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	bfc4      	itt	gt
 80071e6:	1a9b      	subgt	r3, r3, r2
 80071e8:	18ed      	addgt	r5, r5, r3
 80071ea:	2600      	movs	r6, #0
 80071ec:	341a      	adds	r4, #26
 80071ee:	42b5      	cmp	r5, r6
 80071f0:	d11a      	bne.n	8007228 <_printf_common+0xc8>
 80071f2:	2000      	movs	r0, #0
 80071f4:	e008      	b.n	8007208 <_printf_common+0xa8>
 80071f6:	2301      	movs	r3, #1
 80071f8:	4652      	mov	r2, sl
 80071fa:	4641      	mov	r1, r8
 80071fc:	4638      	mov	r0, r7
 80071fe:	47c8      	blx	r9
 8007200:	3001      	adds	r0, #1
 8007202:	d103      	bne.n	800720c <_printf_common+0xac>
 8007204:	f04f 30ff 	mov.w	r0, #4294967295
 8007208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800720c:	3501      	adds	r5, #1
 800720e:	e7c6      	b.n	800719e <_printf_common+0x3e>
 8007210:	18e1      	adds	r1, r4, r3
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	2030      	movs	r0, #48	@ 0x30
 8007216:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800721a:	4422      	add	r2, r4
 800721c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007220:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007224:	3302      	adds	r3, #2
 8007226:	e7c7      	b.n	80071b8 <_printf_common+0x58>
 8007228:	2301      	movs	r3, #1
 800722a:	4622      	mov	r2, r4
 800722c:	4641      	mov	r1, r8
 800722e:	4638      	mov	r0, r7
 8007230:	47c8      	blx	r9
 8007232:	3001      	adds	r0, #1
 8007234:	d0e6      	beq.n	8007204 <_printf_common+0xa4>
 8007236:	3601      	adds	r6, #1
 8007238:	e7d9      	b.n	80071ee <_printf_common+0x8e>
	...

0800723c <_printf_i>:
 800723c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007240:	7e0f      	ldrb	r7, [r1, #24]
 8007242:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007244:	2f78      	cmp	r7, #120	@ 0x78
 8007246:	4691      	mov	r9, r2
 8007248:	4680      	mov	r8, r0
 800724a:	460c      	mov	r4, r1
 800724c:	469a      	mov	sl, r3
 800724e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007252:	d807      	bhi.n	8007264 <_printf_i+0x28>
 8007254:	2f62      	cmp	r7, #98	@ 0x62
 8007256:	d80a      	bhi.n	800726e <_printf_i+0x32>
 8007258:	2f00      	cmp	r7, #0
 800725a:	f000 80d2 	beq.w	8007402 <_printf_i+0x1c6>
 800725e:	2f58      	cmp	r7, #88	@ 0x58
 8007260:	f000 80b9 	beq.w	80073d6 <_printf_i+0x19a>
 8007264:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007268:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800726c:	e03a      	b.n	80072e4 <_printf_i+0xa8>
 800726e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007272:	2b15      	cmp	r3, #21
 8007274:	d8f6      	bhi.n	8007264 <_printf_i+0x28>
 8007276:	a101      	add	r1, pc, #4	@ (adr r1, 800727c <_printf_i+0x40>)
 8007278:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800727c:	080072d5 	.word	0x080072d5
 8007280:	080072e9 	.word	0x080072e9
 8007284:	08007265 	.word	0x08007265
 8007288:	08007265 	.word	0x08007265
 800728c:	08007265 	.word	0x08007265
 8007290:	08007265 	.word	0x08007265
 8007294:	080072e9 	.word	0x080072e9
 8007298:	08007265 	.word	0x08007265
 800729c:	08007265 	.word	0x08007265
 80072a0:	08007265 	.word	0x08007265
 80072a4:	08007265 	.word	0x08007265
 80072a8:	080073e9 	.word	0x080073e9
 80072ac:	08007313 	.word	0x08007313
 80072b0:	080073a3 	.word	0x080073a3
 80072b4:	08007265 	.word	0x08007265
 80072b8:	08007265 	.word	0x08007265
 80072bc:	0800740b 	.word	0x0800740b
 80072c0:	08007265 	.word	0x08007265
 80072c4:	08007313 	.word	0x08007313
 80072c8:	08007265 	.word	0x08007265
 80072cc:	08007265 	.word	0x08007265
 80072d0:	080073ab 	.word	0x080073ab
 80072d4:	6833      	ldr	r3, [r6, #0]
 80072d6:	1d1a      	adds	r2, r3, #4
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6032      	str	r2, [r6, #0]
 80072dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80072e4:	2301      	movs	r3, #1
 80072e6:	e09d      	b.n	8007424 <_printf_i+0x1e8>
 80072e8:	6833      	ldr	r3, [r6, #0]
 80072ea:	6820      	ldr	r0, [r4, #0]
 80072ec:	1d19      	adds	r1, r3, #4
 80072ee:	6031      	str	r1, [r6, #0]
 80072f0:	0606      	lsls	r6, r0, #24
 80072f2:	d501      	bpl.n	80072f8 <_printf_i+0xbc>
 80072f4:	681d      	ldr	r5, [r3, #0]
 80072f6:	e003      	b.n	8007300 <_printf_i+0xc4>
 80072f8:	0645      	lsls	r5, r0, #25
 80072fa:	d5fb      	bpl.n	80072f4 <_printf_i+0xb8>
 80072fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007300:	2d00      	cmp	r5, #0
 8007302:	da03      	bge.n	800730c <_printf_i+0xd0>
 8007304:	232d      	movs	r3, #45	@ 0x2d
 8007306:	426d      	negs	r5, r5
 8007308:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800730c:	4859      	ldr	r0, [pc, #356]	@ (8007474 <_printf_i+0x238>)
 800730e:	230a      	movs	r3, #10
 8007310:	e011      	b.n	8007336 <_printf_i+0xfa>
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	6833      	ldr	r3, [r6, #0]
 8007316:	0608      	lsls	r0, r1, #24
 8007318:	f853 5b04 	ldr.w	r5, [r3], #4
 800731c:	d402      	bmi.n	8007324 <_printf_i+0xe8>
 800731e:	0649      	lsls	r1, r1, #25
 8007320:	bf48      	it	mi
 8007322:	b2ad      	uxthmi	r5, r5
 8007324:	2f6f      	cmp	r7, #111	@ 0x6f
 8007326:	4853      	ldr	r0, [pc, #332]	@ (8007474 <_printf_i+0x238>)
 8007328:	6033      	str	r3, [r6, #0]
 800732a:	bf14      	ite	ne
 800732c:	230a      	movne	r3, #10
 800732e:	2308      	moveq	r3, #8
 8007330:	2100      	movs	r1, #0
 8007332:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007336:	6866      	ldr	r6, [r4, #4]
 8007338:	60a6      	str	r6, [r4, #8]
 800733a:	2e00      	cmp	r6, #0
 800733c:	bfa2      	ittt	ge
 800733e:	6821      	ldrge	r1, [r4, #0]
 8007340:	f021 0104 	bicge.w	r1, r1, #4
 8007344:	6021      	strge	r1, [r4, #0]
 8007346:	b90d      	cbnz	r5, 800734c <_printf_i+0x110>
 8007348:	2e00      	cmp	r6, #0
 800734a:	d04b      	beq.n	80073e4 <_printf_i+0x1a8>
 800734c:	4616      	mov	r6, r2
 800734e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007352:	fb03 5711 	mls	r7, r3, r1, r5
 8007356:	5dc7      	ldrb	r7, [r0, r7]
 8007358:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800735c:	462f      	mov	r7, r5
 800735e:	42bb      	cmp	r3, r7
 8007360:	460d      	mov	r5, r1
 8007362:	d9f4      	bls.n	800734e <_printf_i+0x112>
 8007364:	2b08      	cmp	r3, #8
 8007366:	d10b      	bne.n	8007380 <_printf_i+0x144>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07df      	lsls	r7, r3, #31
 800736c:	d508      	bpl.n	8007380 <_printf_i+0x144>
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	6861      	ldr	r1, [r4, #4]
 8007372:	4299      	cmp	r1, r3
 8007374:	bfde      	ittt	le
 8007376:	2330      	movle	r3, #48	@ 0x30
 8007378:	f806 3c01 	strble.w	r3, [r6, #-1]
 800737c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007380:	1b92      	subs	r2, r2, r6
 8007382:	6122      	str	r2, [r4, #16]
 8007384:	f8cd a000 	str.w	sl, [sp]
 8007388:	464b      	mov	r3, r9
 800738a:	aa03      	add	r2, sp, #12
 800738c:	4621      	mov	r1, r4
 800738e:	4640      	mov	r0, r8
 8007390:	f7ff fee6 	bl	8007160 <_printf_common>
 8007394:	3001      	adds	r0, #1
 8007396:	d14a      	bne.n	800742e <_printf_i+0x1f2>
 8007398:	f04f 30ff 	mov.w	r0, #4294967295
 800739c:	b004      	add	sp, #16
 800739e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	f043 0320 	orr.w	r3, r3, #32
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	4833      	ldr	r0, [pc, #204]	@ (8007478 <_printf_i+0x23c>)
 80073ac:	2778      	movs	r7, #120	@ 0x78
 80073ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	6831      	ldr	r1, [r6, #0]
 80073b6:	061f      	lsls	r7, r3, #24
 80073b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80073bc:	d402      	bmi.n	80073c4 <_printf_i+0x188>
 80073be:	065f      	lsls	r7, r3, #25
 80073c0:	bf48      	it	mi
 80073c2:	b2ad      	uxthmi	r5, r5
 80073c4:	6031      	str	r1, [r6, #0]
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	bf44      	itt	mi
 80073ca:	f043 0320 	orrmi.w	r3, r3, #32
 80073ce:	6023      	strmi	r3, [r4, #0]
 80073d0:	b11d      	cbz	r5, 80073da <_printf_i+0x19e>
 80073d2:	2310      	movs	r3, #16
 80073d4:	e7ac      	b.n	8007330 <_printf_i+0xf4>
 80073d6:	4827      	ldr	r0, [pc, #156]	@ (8007474 <_printf_i+0x238>)
 80073d8:	e7e9      	b.n	80073ae <_printf_i+0x172>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	f023 0320 	bic.w	r3, r3, #32
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	e7f6      	b.n	80073d2 <_printf_i+0x196>
 80073e4:	4616      	mov	r6, r2
 80073e6:	e7bd      	b.n	8007364 <_printf_i+0x128>
 80073e8:	6833      	ldr	r3, [r6, #0]
 80073ea:	6825      	ldr	r5, [r4, #0]
 80073ec:	6961      	ldr	r1, [r4, #20]
 80073ee:	1d18      	adds	r0, r3, #4
 80073f0:	6030      	str	r0, [r6, #0]
 80073f2:	062e      	lsls	r6, r5, #24
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	d501      	bpl.n	80073fc <_printf_i+0x1c0>
 80073f8:	6019      	str	r1, [r3, #0]
 80073fa:	e002      	b.n	8007402 <_printf_i+0x1c6>
 80073fc:	0668      	lsls	r0, r5, #25
 80073fe:	d5fb      	bpl.n	80073f8 <_printf_i+0x1bc>
 8007400:	8019      	strh	r1, [r3, #0]
 8007402:	2300      	movs	r3, #0
 8007404:	6123      	str	r3, [r4, #16]
 8007406:	4616      	mov	r6, r2
 8007408:	e7bc      	b.n	8007384 <_printf_i+0x148>
 800740a:	6833      	ldr	r3, [r6, #0]
 800740c:	1d1a      	adds	r2, r3, #4
 800740e:	6032      	str	r2, [r6, #0]
 8007410:	681e      	ldr	r6, [r3, #0]
 8007412:	6862      	ldr	r2, [r4, #4]
 8007414:	2100      	movs	r1, #0
 8007416:	4630      	mov	r0, r6
 8007418:	f7f8 fefa 	bl	8000210 <memchr>
 800741c:	b108      	cbz	r0, 8007422 <_printf_i+0x1e6>
 800741e:	1b80      	subs	r0, r0, r6
 8007420:	6060      	str	r0, [r4, #4]
 8007422:	6863      	ldr	r3, [r4, #4]
 8007424:	6123      	str	r3, [r4, #16]
 8007426:	2300      	movs	r3, #0
 8007428:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800742c:	e7aa      	b.n	8007384 <_printf_i+0x148>
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	4632      	mov	r2, r6
 8007432:	4649      	mov	r1, r9
 8007434:	4640      	mov	r0, r8
 8007436:	47d0      	blx	sl
 8007438:	3001      	adds	r0, #1
 800743a:	d0ad      	beq.n	8007398 <_printf_i+0x15c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	079b      	lsls	r3, r3, #30
 8007440:	d413      	bmi.n	800746a <_printf_i+0x22e>
 8007442:	68e0      	ldr	r0, [r4, #12]
 8007444:	9b03      	ldr	r3, [sp, #12]
 8007446:	4298      	cmp	r0, r3
 8007448:	bfb8      	it	lt
 800744a:	4618      	movlt	r0, r3
 800744c:	e7a6      	b.n	800739c <_printf_i+0x160>
 800744e:	2301      	movs	r3, #1
 8007450:	4632      	mov	r2, r6
 8007452:	4649      	mov	r1, r9
 8007454:	4640      	mov	r0, r8
 8007456:	47d0      	blx	sl
 8007458:	3001      	adds	r0, #1
 800745a:	d09d      	beq.n	8007398 <_printf_i+0x15c>
 800745c:	3501      	adds	r5, #1
 800745e:	68e3      	ldr	r3, [r4, #12]
 8007460:	9903      	ldr	r1, [sp, #12]
 8007462:	1a5b      	subs	r3, r3, r1
 8007464:	42ab      	cmp	r3, r5
 8007466:	dcf2      	bgt.n	800744e <_printf_i+0x212>
 8007468:	e7eb      	b.n	8007442 <_printf_i+0x206>
 800746a:	2500      	movs	r5, #0
 800746c:	f104 0619 	add.w	r6, r4, #25
 8007470:	e7f5      	b.n	800745e <_printf_i+0x222>
 8007472:	bf00      	nop
 8007474:	0800c776 	.word	0x0800c776
 8007478:	0800c787 	.word	0x0800c787

0800747c <_scanf_float>:
 800747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	b087      	sub	sp, #28
 8007482:	4617      	mov	r7, r2
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	688b      	ldr	r3, [r1, #8]
 8007488:	1e5a      	subs	r2, r3, #1
 800748a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800748e:	bf81      	itttt	hi
 8007490:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007494:	eb03 0b05 	addhi.w	fp, r3, r5
 8007498:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800749c:	608b      	strhi	r3, [r1, #8]
 800749e:	680b      	ldr	r3, [r1, #0]
 80074a0:	460a      	mov	r2, r1
 80074a2:	f04f 0500 	mov.w	r5, #0
 80074a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80074aa:	f842 3b1c 	str.w	r3, [r2], #28
 80074ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80074b2:	4680      	mov	r8, r0
 80074b4:	460c      	mov	r4, r1
 80074b6:	bf98      	it	ls
 80074b8:	f04f 0b00 	movls.w	fp, #0
 80074bc:	9201      	str	r2, [sp, #4]
 80074be:	4616      	mov	r6, r2
 80074c0:	46aa      	mov	sl, r5
 80074c2:	46a9      	mov	r9, r5
 80074c4:	9502      	str	r5, [sp, #8]
 80074c6:	68a2      	ldr	r2, [r4, #8]
 80074c8:	b152      	cbz	r2, 80074e0 <_scanf_float+0x64>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80074d0:	d864      	bhi.n	800759c <_scanf_float+0x120>
 80074d2:	2b40      	cmp	r3, #64	@ 0x40
 80074d4:	d83c      	bhi.n	8007550 <_scanf_float+0xd4>
 80074d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80074da:	b2c8      	uxtb	r0, r1
 80074dc:	280e      	cmp	r0, #14
 80074de:	d93a      	bls.n	8007556 <_scanf_float+0xda>
 80074e0:	f1b9 0f00 	cmp.w	r9, #0
 80074e4:	d003      	beq.n	80074ee <_scanf_float+0x72>
 80074e6:	6823      	ldr	r3, [r4, #0]
 80074e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074f2:	f1ba 0f01 	cmp.w	sl, #1
 80074f6:	f200 8117 	bhi.w	8007728 <_scanf_float+0x2ac>
 80074fa:	9b01      	ldr	r3, [sp, #4]
 80074fc:	429e      	cmp	r6, r3
 80074fe:	f200 8108 	bhi.w	8007712 <_scanf_float+0x296>
 8007502:	2001      	movs	r0, #1
 8007504:	b007      	add	sp, #28
 8007506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800750e:	2a0d      	cmp	r2, #13
 8007510:	d8e6      	bhi.n	80074e0 <_scanf_float+0x64>
 8007512:	a101      	add	r1, pc, #4	@ (adr r1, 8007518 <_scanf_float+0x9c>)
 8007514:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007518:	0800765f 	.word	0x0800765f
 800751c:	080074e1 	.word	0x080074e1
 8007520:	080074e1 	.word	0x080074e1
 8007524:	080074e1 	.word	0x080074e1
 8007528:	080076bf 	.word	0x080076bf
 800752c:	08007697 	.word	0x08007697
 8007530:	080074e1 	.word	0x080074e1
 8007534:	080074e1 	.word	0x080074e1
 8007538:	0800766d 	.word	0x0800766d
 800753c:	080074e1 	.word	0x080074e1
 8007540:	080074e1 	.word	0x080074e1
 8007544:	080074e1 	.word	0x080074e1
 8007548:	080074e1 	.word	0x080074e1
 800754c:	08007625 	.word	0x08007625
 8007550:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007554:	e7db      	b.n	800750e <_scanf_float+0x92>
 8007556:	290e      	cmp	r1, #14
 8007558:	d8c2      	bhi.n	80074e0 <_scanf_float+0x64>
 800755a:	a001      	add	r0, pc, #4	@ (adr r0, 8007560 <_scanf_float+0xe4>)
 800755c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007560:	08007615 	.word	0x08007615
 8007564:	080074e1 	.word	0x080074e1
 8007568:	08007615 	.word	0x08007615
 800756c:	080076ab 	.word	0x080076ab
 8007570:	080074e1 	.word	0x080074e1
 8007574:	080075bd 	.word	0x080075bd
 8007578:	080075fb 	.word	0x080075fb
 800757c:	080075fb 	.word	0x080075fb
 8007580:	080075fb 	.word	0x080075fb
 8007584:	080075fb 	.word	0x080075fb
 8007588:	080075fb 	.word	0x080075fb
 800758c:	080075fb 	.word	0x080075fb
 8007590:	080075fb 	.word	0x080075fb
 8007594:	080075fb 	.word	0x080075fb
 8007598:	080075fb 	.word	0x080075fb
 800759c:	2b6e      	cmp	r3, #110	@ 0x6e
 800759e:	d809      	bhi.n	80075b4 <_scanf_float+0x138>
 80075a0:	2b60      	cmp	r3, #96	@ 0x60
 80075a2:	d8b2      	bhi.n	800750a <_scanf_float+0x8e>
 80075a4:	2b54      	cmp	r3, #84	@ 0x54
 80075a6:	d07b      	beq.n	80076a0 <_scanf_float+0x224>
 80075a8:	2b59      	cmp	r3, #89	@ 0x59
 80075aa:	d199      	bne.n	80074e0 <_scanf_float+0x64>
 80075ac:	2d07      	cmp	r5, #7
 80075ae:	d197      	bne.n	80074e0 <_scanf_float+0x64>
 80075b0:	2508      	movs	r5, #8
 80075b2:	e02c      	b.n	800760e <_scanf_float+0x192>
 80075b4:	2b74      	cmp	r3, #116	@ 0x74
 80075b6:	d073      	beq.n	80076a0 <_scanf_float+0x224>
 80075b8:	2b79      	cmp	r3, #121	@ 0x79
 80075ba:	e7f6      	b.n	80075aa <_scanf_float+0x12e>
 80075bc:	6821      	ldr	r1, [r4, #0]
 80075be:	05c8      	lsls	r0, r1, #23
 80075c0:	d51b      	bpl.n	80075fa <_scanf_float+0x17e>
 80075c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80075c6:	6021      	str	r1, [r4, #0]
 80075c8:	f109 0901 	add.w	r9, r9, #1
 80075cc:	f1bb 0f00 	cmp.w	fp, #0
 80075d0:	d003      	beq.n	80075da <_scanf_float+0x15e>
 80075d2:	3201      	adds	r2, #1
 80075d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075d8:	60a2      	str	r2, [r4, #8]
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	3b01      	subs	r3, #1
 80075de:	60a3      	str	r3, [r4, #8]
 80075e0:	6923      	ldr	r3, [r4, #16]
 80075e2:	3301      	adds	r3, #1
 80075e4:	6123      	str	r3, [r4, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
 80075ee:	f340 8087 	ble.w	8007700 <_scanf_float+0x284>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	3301      	adds	r3, #1
 80075f6:	603b      	str	r3, [r7, #0]
 80075f8:	e765      	b.n	80074c6 <_scanf_float+0x4a>
 80075fa:	eb1a 0105 	adds.w	r1, sl, r5
 80075fe:	f47f af6f 	bne.w	80074e0 <_scanf_float+0x64>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007608:	6022      	str	r2, [r4, #0]
 800760a:	460d      	mov	r5, r1
 800760c:	468a      	mov	sl, r1
 800760e:	f806 3b01 	strb.w	r3, [r6], #1
 8007612:	e7e2      	b.n	80075da <_scanf_float+0x15e>
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	0610      	lsls	r0, r2, #24
 8007618:	f57f af62 	bpl.w	80074e0 <_scanf_float+0x64>
 800761c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007620:	6022      	str	r2, [r4, #0]
 8007622:	e7f4      	b.n	800760e <_scanf_float+0x192>
 8007624:	f1ba 0f00 	cmp.w	sl, #0
 8007628:	d10e      	bne.n	8007648 <_scanf_float+0x1cc>
 800762a:	f1b9 0f00 	cmp.w	r9, #0
 800762e:	d10e      	bne.n	800764e <_scanf_float+0x1d2>
 8007630:	6822      	ldr	r2, [r4, #0]
 8007632:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007636:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800763a:	d108      	bne.n	800764e <_scanf_float+0x1d2>
 800763c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007640:	6022      	str	r2, [r4, #0]
 8007642:	f04f 0a01 	mov.w	sl, #1
 8007646:	e7e2      	b.n	800760e <_scanf_float+0x192>
 8007648:	f1ba 0f02 	cmp.w	sl, #2
 800764c:	d055      	beq.n	80076fa <_scanf_float+0x27e>
 800764e:	2d01      	cmp	r5, #1
 8007650:	d002      	beq.n	8007658 <_scanf_float+0x1dc>
 8007652:	2d04      	cmp	r5, #4
 8007654:	f47f af44 	bne.w	80074e0 <_scanf_float+0x64>
 8007658:	3501      	adds	r5, #1
 800765a:	b2ed      	uxtb	r5, r5
 800765c:	e7d7      	b.n	800760e <_scanf_float+0x192>
 800765e:	f1ba 0f01 	cmp.w	sl, #1
 8007662:	f47f af3d 	bne.w	80074e0 <_scanf_float+0x64>
 8007666:	f04f 0a02 	mov.w	sl, #2
 800766a:	e7d0      	b.n	800760e <_scanf_float+0x192>
 800766c:	b97d      	cbnz	r5, 800768e <_scanf_float+0x212>
 800766e:	f1b9 0f00 	cmp.w	r9, #0
 8007672:	f47f af38 	bne.w	80074e6 <_scanf_float+0x6a>
 8007676:	6822      	ldr	r2, [r4, #0]
 8007678:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800767c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007680:	f040 8108 	bne.w	8007894 <_scanf_float+0x418>
 8007684:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007688:	6022      	str	r2, [r4, #0]
 800768a:	2501      	movs	r5, #1
 800768c:	e7bf      	b.n	800760e <_scanf_float+0x192>
 800768e:	2d03      	cmp	r5, #3
 8007690:	d0e2      	beq.n	8007658 <_scanf_float+0x1dc>
 8007692:	2d05      	cmp	r5, #5
 8007694:	e7de      	b.n	8007654 <_scanf_float+0x1d8>
 8007696:	2d02      	cmp	r5, #2
 8007698:	f47f af22 	bne.w	80074e0 <_scanf_float+0x64>
 800769c:	2503      	movs	r5, #3
 800769e:	e7b6      	b.n	800760e <_scanf_float+0x192>
 80076a0:	2d06      	cmp	r5, #6
 80076a2:	f47f af1d 	bne.w	80074e0 <_scanf_float+0x64>
 80076a6:	2507      	movs	r5, #7
 80076a8:	e7b1      	b.n	800760e <_scanf_float+0x192>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	0591      	lsls	r1, r2, #22
 80076ae:	f57f af17 	bpl.w	80074e0 <_scanf_float+0x64>
 80076b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80076b6:	6022      	str	r2, [r4, #0]
 80076b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80076bc:	e7a7      	b.n	800760e <_scanf_float+0x192>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80076c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80076c8:	d006      	beq.n	80076d8 <_scanf_float+0x25c>
 80076ca:	0550      	lsls	r0, r2, #21
 80076cc:	f57f af08 	bpl.w	80074e0 <_scanf_float+0x64>
 80076d0:	f1b9 0f00 	cmp.w	r9, #0
 80076d4:	f000 80de 	beq.w	8007894 <_scanf_float+0x418>
 80076d8:	0591      	lsls	r1, r2, #22
 80076da:	bf58      	it	pl
 80076dc:	9902      	ldrpl	r1, [sp, #8]
 80076de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076e2:	bf58      	it	pl
 80076e4:	eba9 0101 	subpl.w	r1, r9, r1
 80076e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80076ec:	bf58      	it	pl
 80076ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076f2:	6022      	str	r2, [r4, #0]
 80076f4:	f04f 0900 	mov.w	r9, #0
 80076f8:	e789      	b.n	800760e <_scanf_float+0x192>
 80076fa:	f04f 0a03 	mov.w	sl, #3
 80076fe:	e786      	b.n	800760e <_scanf_float+0x192>
 8007700:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007704:	4639      	mov	r1, r7
 8007706:	4640      	mov	r0, r8
 8007708:	4798      	blx	r3
 800770a:	2800      	cmp	r0, #0
 800770c:	f43f aedb 	beq.w	80074c6 <_scanf_float+0x4a>
 8007710:	e6e6      	b.n	80074e0 <_scanf_float+0x64>
 8007712:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007716:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800771a:	463a      	mov	r2, r7
 800771c:	4640      	mov	r0, r8
 800771e:	4798      	blx	r3
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	3b01      	subs	r3, #1
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	e6e8      	b.n	80074fa <_scanf_float+0x7e>
 8007728:	1e6b      	subs	r3, r5, #1
 800772a:	2b06      	cmp	r3, #6
 800772c:	d824      	bhi.n	8007778 <_scanf_float+0x2fc>
 800772e:	2d02      	cmp	r5, #2
 8007730:	d836      	bhi.n	80077a0 <_scanf_float+0x324>
 8007732:	9b01      	ldr	r3, [sp, #4]
 8007734:	429e      	cmp	r6, r3
 8007736:	f67f aee4 	bls.w	8007502 <_scanf_float+0x86>
 800773a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800773e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007742:	463a      	mov	r2, r7
 8007744:	4640      	mov	r0, r8
 8007746:	4798      	blx	r3
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	3b01      	subs	r3, #1
 800774c:	6123      	str	r3, [r4, #16]
 800774e:	e7f0      	b.n	8007732 <_scanf_float+0x2b6>
 8007750:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007754:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007758:	463a      	mov	r2, r7
 800775a:	4640      	mov	r0, r8
 800775c:	4798      	blx	r3
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	3b01      	subs	r3, #1
 8007762:	6123      	str	r3, [r4, #16]
 8007764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007768:	fa5f fa8a 	uxtb.w	sl, sl
 800776c:	f1ba 0f02 	cmp.w	sl, #2
 8007770:	d1ee      	bne.n	8007750 <_scanf_float+0x2d4>
 8007772:	3d03      	subs	r5, #3
 8007774:	b2ed      	uxtb	r5, r5
 8007776:	1b76      	subs	r6, r6, r5
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	05da      	lsls	r2, r3, #23
 800777c:	d530      	bpl.n	80077e0 <_scanf_float+0x364>
 800777e:	055b      	lsls	r3, r3, #21
 8007780:	d511      	bpl.n	80077a6 <_scanf_float+0x32a>
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	429e      	cmp	r6, r3
 8007786:	f67f aebc 	bls.w	8007502 <_scanf_float+0x86>
 800778a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800778e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007792:	463a      	mov	r2, r7
 8007794:	4640      	mov	r0, r8
 8007796:	4798      	blx	r3
 8007798:	6923      	ldr	r3, [r4, #16]
 800779a:	3b01      	subs	r3, #1
 800779c:	6123      	str	r3, [r4, #16]
 800779e:	e7f0      	b.n	8007782 <_scanf_float+0x306>
 80077a0:	46aa      	mov	sl, r5
 80077a2:	46b3      	mov	fp, r6
 80077a4:	e7de      	b.n	8007764 <_scanf_float+0x2e8>
 80077a6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80077aa:	6923      	ldr	r3, [r4, #16]
 80077ac:	2965      	cmp	r1, #101	@ 0x65
 80077ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80077b2:	f106 35ff 	add.w	r5, r6, #4294967295
 80077b6:	6123      	str	r3, [r4, #16]
 80077b8:	d00c      	beq.n	80077d4 <_scanf_float+0x358>
 80077ba:	2945      	cmp	r1, #69	@ 0x45
 80077bc:	d00a      	beq.n	80077d4 <_scanf_float+0x358>
 80077be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077c2:	463a      	mov	r2, r7
 80077c4:	4640      	mov	r0, r8
 80077c6:	4798      	blx	r3
 80077c8:	6923      	ldr	r3, [r4, #16]
 80077ca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077ce:	3b01      	subs	r3, #1
 80077d0:	1eb5      	subs	r5, r6, #2
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077d8:	463a      	mov	r2, r7
 80077da:	4640      	mov	r0, r8
 80077dc:	4798      	blx	r3
 80077de:	462e      	mov	r6, r5
 80077e0:	6822      	ldr	r2, [r4, #0]
 80077e2:	f012 0210 	ands.w	r2, r2, #16
 80077e6:	d001      	beq.n	80077ec <_scanf_float+0x370>
 80077e8:	2000      	movs	r0, #0
 80077ea:	e68b      	b.n	8007504 <_scanf_float+0x88>
 80077ec:	7032      	strb	r2, [r6, #0]
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80077f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077f8:	d11c      	bne.n	8007834 <_scanf_float+0x3b8>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	454b      	cmp	r3, r9
 80077fe:	eba3 0209 	sub.w	r2, r3, r9
 8007802:	d123      	bne.n	800784c <_scanf_float+0x3d0>
 8007804:	9901      	ldr	r1, [sp, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	4640      	mov	r0, r8
 800780a:	f002 fce5 	bl	800a1d8 <_strtod_r>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	6821      	ldr	r1, [r4, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f011 0f02 	tst.w	r1, #2
 8007818:	ec57 6b10 	vmov	r6, r7, d0
 800781c:	f103 0204 	add.w	r2, r3, #4
 8007820:	d01f      	beq.n	8007862 <_scanf_float+0x3e6>
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	600a      	str	r2, [r1, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	e9c3 6700 	strd	r6, r7, [r3]
 800782c:	68e3      	ldr	r3, [r4, #12]
 800782e:	3301      	adds	r3, #1
 8007830:	60e3      	str	r3, [r4, #12]
 8007832:	e7d9      	b.n	80077e8 <_scanf_float+0x36c>
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0e4      	beq.n	8007804 <_scanf_float+0x388>
 800783a:	9905      	ldr	r1, [sp, #20]
 800783c:	230a      	movs	r3, #10
 800783e:	3101      	adds	r1, #1
 8007840:	4640      	mov	r0, r8
 8007842:	f002 fd49 	bl	800a2d8 <_strtol_r>
 8007846:	9b04      	ldr	r3, [sp, #16]
 8007848:	9e05      	ldr	r6, [sp, #20]
 800784a:	1ac2      	subs	r2, r0, r3
 800784c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007850:	429e      	cmp	r6, r3
 8007852:	bf28      	it	cs
 8007854:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007858:	4910      	ldr	r1, [pc, #64]	@ (800789c <_scanf_float+0x420>)
 800785a:	4630      	mov	r0, r6
 800785c:	f000 f99c 	bl	8007b98 <siprintf>
 8007860:	e7d0      	b.n	8007804 <_scanf_float+0x388>
 8007862:	f011 0f04 	tst.w	r1, #4
 8007866:	9903      	ldr	r1, [sp, #12]
 8007868:	600a      	str	r2, [r1, #0]
 800786a:	d1dc      	bne.n	8007826 <_scanf_float+0x3aa>
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	4632      	mov	r2, r6
 8007870:	463b      	mov	r3, r7
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f979 	bl	8000b6c <__aeabi_dcmpun>
 800787a:	b128      	cbz	r0, 8007888 <_scanf_float+0x40c>
 800787c:	4808      	ldr	r0, [pc, #32]	@ (80078a0 <_scanf_float+0x424>)
 800787e:	f000 fb57 	bl	8007f30 <nanf>
 8007882:	ed85 0a00 	vstr	s0, [r5]
 8007886:	e7d1      	b.n	800782c <_scanf_float+0x3b0>
 8007888:	4630      	mov	r0, r6
 800788a:	4639      	mov	r1, r7
 800788c:	f7f9 f9cc 	bl	8000c28 <__aeabi_d2f>
 8007890:	6028      	str	r0, [r5, #0]
 8007892:	e7cb      	b.n	800782c <_scanf_float+0x3b0>
 8007894:	f04f 0900 	mov.w	r9, #0
 8007898:	e629      	b.n	80074ee <_scanf_float+0x72>
 800789a:	bf00      	nop
 800789c:	0800c798 	.word	0x0800c798
 80078a0:	0800cb2d 	.word	0x0800cb2d

080078a4 <std>:
 80078a4:	2300      	movs	r3, #0
 80078a6:	b510      	push	{r4, lr}
 80078a8:	4604      	mov	r4, r0
 80078aa:	e9c0 3300 	strd	r3, r3, [r0]
 80078ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078b2:	6083      	str	r3, [r0, #8]
 80078b4:	8181      	strh	r1, [r0, #12]
 80078b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80078b8:	81c2      	strh	r2, [r0, #14]
 80078ba:	6183      	str	r3, [r0, #24]
 80078bc:	4619      	mov	r1, r3
 80078be:	2208      	movs	r2, #8
 80078c0:	305c      	adds	r0, #92	@ 0x5c
 80078c2:	f000 fa61 	bl	8007d88 <memset>
 80078c6:	4b0d      	ldr	r3, [pc, #52]	@ (80078fc <std+0x58>)
 80078c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80078ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007900 <std+0x5c>)
 80078cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80078ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007904 <std+0x60>)
 80078d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80078d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007908 <std+0x64>)
 80078d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <std+0x68>)
 80078d8:	6224      	str	r4, [r4, #32]
 80078da:	429c      	cmp	r4, r3
 80078dc:	d006      	beq.n	80078ec <std+0x48>
 80078de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80078e2:	4294      	cmp	r4, r2
 80078e4:	d002      	beq.n	80078ec <std+0x48>
 80078e6:	33d0      	adds	r3, #208	@ 0xd0
 80078e8:	429c      	cmp	r4, r3
 80078ea:	d105      	bne.n	80078f8 <std+0x54>
 80078ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80078f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f4:	f000 bb18 	b.w	8007f28 <__retarget_lock_init_recursive>
 80078f8:	bd10      	pop	{r4, pc}
 80078fa:	bf00      	nop
 80078fc:	08007bd9 	.word	0x08007bd9
 8007900:	08007bfb 	.word	0x08007bfb
 8007904:	08007c33 	.word	0x08007c33
 8007908:	08007c57 	.word	0x08007c57
 800790c:	20000530 	.word	0x20000530

08007910 <stdio_exit_handler>:
 8007910:	4a02      	ldr	r2, [pc, #8]	@ (800791c <stdio_exit_handler+0xc>)
 8007912:	4903      	ldr	r1, [pc, #12]	@ (8007920 <stdio_exit_handler+0x10>)
 8007914:	4803      	ldr	r0, [pc, #12]	@ (8007924 <stdio_exit_handler+0x14>)
 8007916:	f000 b869 	b.w	80079ec <_fwalk_sglue>
 800791a:	bf00      	nop
 800791c:	20000010 	.word	0x20000010
 8007920:	0800a695 	.word	0x0800a695
 8007924:	20000020 	.word	0x20000020

08007928 <cleanup_stdio>:
 8007928:	6841      	ldr	r1, [r0, #4]
 800792a:	4b0c      	ldr	r3, [pc, #48]	@ (800795c <cleanup_stdio+0x34>)
 800792c:	4299      	cmp	r1, r3
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	d001      	beq.n	8007938 <cleanup_stdio+0x10>
 8007934:	f002 feae 	bl	800a694 <_fflush_r>
 8007938:	68a1      	ldr	r1, [r4, #8]
 800793a:	4b09      	ldr	r3, [pc, #36]	@ (8007960 <cleanup_stdio+0x38>)
 800793c:	4299      	cmp	r1, r3
 800793e:	d002      	beq.n	8007946 <cleanup_stdio+0x1e>
 8007940:	4620      	mov	r0, r4
 8007942:	f002 fea7 	bl	800a694 <_fflush_r>
 8007946:	68e1      	ldr	r1, [r4, #12]
 8007948:	4b06      	ldr	r3, [pc, #24]	@ (8007964 <cleanup_stdio+0x3c>)
 800794a:	4299      	cmp	r1, r3
 800794c:	d004      	beq.n	8007958 <cleanup_stdio+0x30>
 800794e:	4620      	mov	r0, r4
 8007950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007954:	f002 be9e 	b.w	800a694 <_fflush_r>
 8007958:	bd10      	pop	{r4, pc}
 800795a:	bf00      	nop
 800795c:	20000530 	.word	0x20000530
 8007960:	20000598 	.word	0x20000598
 8007964:	20000600 	.word	0x20000600

08007968 <global_stdio_init.part.0>:
 8007968:	b510      	push	{r4, lr}
 800796a:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <global_stdio_init.part.0+0x30>)
 800796c:	4c0b      	ldr	r4, [pc, #44]	@ (800799c <global_stdio_init.part.0+0x34>)
 800796e:	4a0c      	ldr	r2, [pc, #48]	@ (80079a0 <global_stdio_init.part.0+0x38>)
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	4620      	mov	r0, r4
 8007974:	2200      	movs	r2, #0
 8007976:	2104      	movs	r1, #4
 8007978:	f7ff ff94 	bl	80078a4 <std>
 800797c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007980:	2201      	movs	r2, #1
 8007982:	2109      	movs	r1, #9
 8007984:	f7ff ff8e 	bl	80078a4 <std>
 8007988:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800798c:	2202      	movs	r2, #2
 800798e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007992:	2112      	movs	r1, #18
 8007994:	f7ff bf86 	b.w	80078a4 <std>
 8007998:	20000668 	.word	0x20000668
 800799c:	20000530 	.word	0x20000530
 80079a0:	08007911 	.word	0x08007911

080079a4 <__sfp_lock_acquire>:
 80079a4:	4801      	ldr	r0, [pc, #4]	@ (80079ac <__sfp_lock_acquire+0x8>)
 80079a6:	f000 bac0 	b.w	8007f2a <__retarget_lock_acquire_recursive>
 80079aa:	bf00      	nop
 80079ac:	20000671 	.word	0x20000671

080079b0 <__sfp_lock_release>:
 80079b0:	4801      	ldr	r0, [pc, #4]	@ (80079b8 <__sfp_lock_release+0x8>)
 80079b2:	f000 babb 	b.w	8007f2c <__retarget_lock_release_recursive>
 80079b6:	bf00      	nop
 80079b8:	20000671 	.word	0x20000671

080079bc <__sinit>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	f7ff fff0 	bl	80079a4 <__sfp_lock_acquire>
 80079c4:	6a23      	ldr	r3, [r4, #32]
 80079c6:	b11b      	cbz	r3, 80079d0 <__sinit+0x14>
 80079c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079cc:	f7ff bff0 	b.w	80079b0 <__sfp_lock_release>
 80079d0:	4b04      	ldr	r3, [pc, #16]	@ (80079e4 <__sinit+0x28>)
 80079d2:	6223      	str	r3, [r4, #32]
 80079d4:	4b04      	ldr	r3, [pc, #16]	@ (80079e8 <__sinit+0x2c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d1f5      	bne.n	80079c8 <__sinit+0xc>
 80079dc:	f7ff ffc4 	bl	8007968 <global_stdio_init.part.0>
 80079e0:	e7f2      	b.n	80079c8 <__sinit+0xc>
 80079e2:	bf00      	nop
 80079e4:	08007929 	.word	0x08007929
 80079e8:	20000668 	.word	0x20000668

080079ec <_fwalk_sglue>:
 80079ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079f0:	4607      	mov	r7, r0
 80079f2:	4688      	mov	r8, r1
 80079f4:	4614      	mov	r4, r2
 80079f6:	2600      	movs	r6, #0
 80079f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079fc:	f1b9 0901 	subs.w	r9, r9, #1
 8007a00:	d505      	bpl.n	8007a0e <_fwalk_sglue+0x22>
 8007a02:	6824      	ldr	r4, [r4, #0]
 8007a04:	2c00      	cmp	r4, #0
 8007a06:	d1f7      	bne.n	80079f8 <_fwalk_sglue+0xc>
 8007a08:	4630      	mov	r0, r6
 8007a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	89ab      	ldrh	r3, [r5, #12]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d907      	bls.n	8007a24 <_fwalk_sglue+0x38>
 8007a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	d003      	beq.n	8007a24 <_fwalk_sglue+0x38>
 8007a1c:	4629      	mov	r1, r5
 8007a1e:	4638      	mov	r0, r7
 8007a20:	47c0      	blx	r8
 8007a22:	4306      	orrs	r6, r0
 8007a24:	3568      	adds	r5, #104	@ 0x68
 8007a26:	e7e9      	b.n	80079fc <_fwalk_sglue+0x10>

08007a28 <_fwrite_r>:
 8007a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2c:	9c08      	ldr	r4, [sp, #32]
 8007a2e:	468a      	mov	sl, r1
 8007a30:	4690      	mov	r8, r2
 8007a32:	fb02 f903 	mul.w	r9, r2, r3
 8007a36:	4606      	mov	r6, r0
 8007a38:	b118      	cbz	r0, 8007a42 <_fwrite_r+0x1a>
 8007a3a:	6a03      	ldr	r3, [r0, #32]
 8007a3c:	b90b      	cbnz	r3, 8007a42 <_fwrite_r+0x1a>
 8007a3e:	f7ff ffbd 	bl	80079bc <__sinit>
 8007a42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a44:	07dd      	lsls	r5, r3, #31
 8007a46:	d405      	bmi.n	8007a54 <_fwrite_r+0x2c>
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	0598      	lsls	r0, r3, #22
 8007a4c:	d402      	bmi.n	8007a54 <_fwrite_r+0x2c>
 8007a4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a50:	f000 fa6b 	bl	8007f2a <__retarget_lock_acquire_recursive>
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	0719      	lsls	r1, r3, #28
 8007a58:	d516      	bpl.n	8007a88 <_fwrite_r+0x60>
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	b1a3      	cbz	r3, 8007a88 <_fwrite_r+0x60>
 8007a5e:	2500      	movs	r5, #0
 8007a60:	454d      	cmp	r5, r9
 8007a62:	d01f      	beq.n	8007aa4 <_fwrite_r+0x7c>
 8007a64:	68a7      	ldr	r7, [r4, #8]
 8007a66:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8007a6a:	3f01      	subs	r7, #1
 8007a6c:	2f00      	cmp	r7, #0
 8007a6e:	60a7      	str	r7, [r4, #8]
 8007a70:	da04      	bge.n	8007a7c <_fwrite_r+0x54>
 8007a72:	69a3      	ldr	r3, [r4, #24]
 8007a74:	429f      	cmp	r7, r3
 8007a76:	db0f      	blt.n	8007a98 <_fwrite_r+0x70>
 8007a78:	290a      	cmp	r1, #10
 8007a7a:	d00d      	beq.n	8007a98 <_fwrite_r+0x70>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	6022      	str	r2, [r4, #0]
 8007a82:	7019      	strb	r1, [r3, #0]
 8007a84:	3501      	adds	r5, #1
 8007a86:	e7eb      	b.n	8007a60 <_fwrite_r+0x38>
 8007a88:	4621      	mov	r1, r4
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f000 f926 	bl	8007cdc <__swsetup_r>
 8007a90:	2800      	cmp	r0, #0
 8007a92:	d0e4      	beq.n	8007a5e <_fwrite_r+0x36>
 8007a94:	2500      	movs	r5, #0
 8007a96:	e005      	b.n	8007aa4 <_fwrite_r+0x7c>
 8007a98:	4622      	mov	r2, r4
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	f000 f8df 	bl	8007c5e <__swbuf_r>
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d1ef      	bne.n	8007a84 <_fwrite_r+0x5c>
 8007aa4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aa6:	07da      	lsls	r2, r3, #31
 8007aa8:	d405      	bmi.n	8007ab6 <_fwrite_r+0x8e>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	059b      	lsls	r3, r3, #22
 8007aae:	d402      	bmi.n	8007ab6 <_fwrite_r+0x8e>
 8007ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ab2:	f000 fa3b 	bl	8007f2c <__retarget_lock_release_recursive>
 8007ab6:	fbb5 f0f8 	udiv	r0, r5, r8
 8007aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007ac0 <fwrite>:
 8007ac0:	b507      	push	{r0, r1, r2, lr}
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	460a      	mov	r2, r1
 8007ac8:	4601      	mov	r1, r0
 8007aca:	4803      	ldr	r0, [pc, #12]	@ (8007ad8 <fwrite+0x18>)
 8007acc:	6800      	ldr	r0, [r0, #0]
 8007ace:	f7ff ffab 	bl	8007a28 <_fwrite_r>
 8007ad2:	b003      	add	sp, #12
 8007ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ad8:	2000001c 	.word	0x2000001c

08007adc <_puts_r>:
 8007adc:	6a03      	ldr	r3, [r0, #32]
 8007ade:	b570      	push	{r4, r5, r6, lr}
 8007ae0:	6884      	ldr	r4, [r0, #8]
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	460e      	mov	r6, r1
 8007ae6:	b90b      	cbnz	r3, 8007aec <_puts_r+0x10>
 8007ae8:	f7ff ff68 	bl	80079bc <__sinit>
 8007aec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d405      	bmi.n	8007afe <_puts_r+0x22>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	0598      	lsls	r0, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_puts_r+0x22>
 8007af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007afa:	f000 fa16 	bl	8007f2a <__retarget_lock_acquire_recursive>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	0719      	lsls	r1, r3, #28
 8007b02:	d502      	bpl.n	8007b0a <_puts_r+0x2e>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d135      	bne.n	8007b76 <_puts_r+0x9a>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f000 f8e5 	bl	8007cdc <__swsetup_r>
 8007b12:	b380      	cbz	r0, 8007b76 <_puts_r+0x9a>
 8007b14:	f04f 35ff 	mov.w	r5, #4294967295
 8007b18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b1a:	07da      	lsls	r2, r3, #31
 8007b1c:	d405      	bmi.n	8007b2a <_puts_r+0x4e>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	059b      	lsls	r3, r3, #22
 8007b22:	d402      	bmi.n	8007b2a <_puts_r+0x4e>
 8007b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b26:	f000 fa01 	bl	8007f2c <__retarget_lock_release_recursive>
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	bd70      	pop	{r4, r5, r6, pc}
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	da04      	bge.n	8007b3c <_puts_r+0x60>
 8007b32:	69a2      	ldr	r2, [r4, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	dc17      	bgt.n	8007b68 <_puts_r+0x8c>
 8007b38:	290a      	cmp	r1, #10
 8007b3a:	d015      	beq.n	8007b68 <_puts_r+0x8c>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	6022      	str	r2, [r4, #0]
 8007b42:	7019      	strb	r1, [r3, #0]
 8007b44:	68a3      	ldr	r3, [r4, #8]
 8007b46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	d1ed      	bne.n	8007b2e <_puts_r+0x52>
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	da11      	bge.n	8007b7a <_puts_r+0x9e>
 8007b56:	4622      	mov	r2, r4
 8007b58:	210a      	movs	r1, #10
 8007b5a:	4628      	mov	r0, r5
 8007b5c:	f000 f87f 	bl	8007c5e <__swbuf_r>
 8007b60:	3001      	adds	r0, #1
 8007b62:	d0d7      	beq.n	8007b14 <_puts_r+0x38>
 8007b64:	250a      	movs	r5, #10
 8007b66:	e7d7      	b.n	8007b18 <_puts_r+0x3c>
 8007b68:	4622      	mov	r2, r4
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 f877 	bl	8007c5e <__swbuf_r>
 8007b70:	3001      	adds	r0, #1
 8007b72:	d1e7      	bne.n	8007b44 <_puts_r+0x68>
 8007b74:	e7ce      	b.n	8007b14 <_puts_r+0x38>
 8007b76:	3e01      	subs	r6, #1
 8007b78:	e7e4      	b.n	8007b44 <_puts_r+0x68>
 8007b7a:	6823      	ldr	r3, [r4, #0]
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	6022      	str	r2, [r4, #0]
 8007b80:	220a      	movs	r2, #10
 8007b82:	701a      	strb	r2, [r3, #0]
 8007b84:	e7ee      	b.n	8007b64 <_puts_r+0x88>
	...

08007b88 <puts>:
 8007b88:	4b02      	ldr	r3, [pc, #8]	@ (8007b94 <puts+0xc>)
 8007b8a:	4601      	mov	r1, r0
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	f7ff bfa5 	b.w	8007adc <_puts_r>
 8007b92:	bf00      	nop
 8007b94:	2000001c 	.word	0x2000001c

08007b98 <siprintf>:
 8007b98:	b40e      	push	{r1, r2, r3}
 8007b9a:	b500      	push	{lr}
 8007b9c:	b09c      	sub	sp, #112	@ 0x70
 8007b9e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ba0:	9002      	str	r0, [sp, #8]
 8007ba2:	9006      	str	r0, [sp, #24]
 8007ba4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ba8:	4809      	ldr	r0, [pc, #36]	@ (8007bd0 <siprintf+0x38>)
 8007baa:	9107      	str	r1, [sp, #28]
 8007bac:	9104      	str	r1, [sp, #16]
 8007bae:	4909      	ldr	r1, [pc, #36]	@ (8007bd4 <siprintf+0x3c>)
 8007bb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bb4:	9105      	str	r1, [sp, #20]
 8007bb6:	6800      	ldr	r0, [r0, #0]
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	a902      	add	r1, sp, #8
 8007bbc:	f002 fbea 	bl	800a394 <_svfiprintf_r>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
 8007bc6:	b01c      	add	sp, #112	@ 0x70
 8007bc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bcc:	b003      	add	sp, #12
 8007bce:	4770      	bx	lr
 8007bd0:	2000001c 	.word	0x2000001c
 8007bd4:	ffff0208 	.word	0xffff0208

08007bd8 <__sread>:
 8007bd8:	b510      	push	{r4, lr}
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be0:	f000 f930 	bl	8007e44 <_read_r>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	bfab      	itete	ge
 8007be8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007bea:	89a3      	ldrhlt	r3, [r4, #12]
 8007bec:	181b      	addge	r3, r3, r0
 8007bee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007bf2:	bfac      	ite	ge
 8007bf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007bf6:	81a3      	strhlt	r3, [r4, #12]
 8007bf8:	bd10      	pop	{r4, pc}

08007bfa <__swrite>:
 8007bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfe:	461f      	mov	r7, r3
 8007c00:	898b      	ldrh	r3, [r1, #12]
 8007c02:	05db      	lsls	r3, r3, #23
 8007c04:	4605      	mov	r5, r0
 8007c06:	460c      	mov	r4, r1
 8007c08:	4616      	mov	r6, r2
 8007c0a:	d505      	bpl.n	8007c18 <__swrite+0x1e>
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	2302      	movs	r3, #2
 8007c12:	2200      	movs	r2, #0
 8007c14:	f000 f904 	bl	8007e20 <_lseek_r>
 8007c18:	89a3      	ldrh	r3, [r4, #12]
 8007c1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c22:	81a3      	strh	r3, [r4, #12]
 8007c24:	4632      	mov	r2, r6
 8007c26:	463b      	mov	r3, r7
 8007c28:	4628      	mov	r0, r5
 8007c2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2e:	f000 b93f 	b.w	8007eb0 <_write_r>

08007c32 <__sseek>:
 8007c32:	b510      	push	{r4, lr}
 8007c34:	460c      	mov	r4, r1
 8007c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c3a:	f000 f8f1 	bl	8007e20 <_lseek_r>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	bf15      	itete	ne
 8007c44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c4e:	81a3      	strheq	r3, [r4, #12]
 8007c50:	bf18      	it	ne
 8007c52:	81a3      	strhne	r3, [r4, #12]
 8007c54:	bd10      	pop	{r4, pc}

08007c56 <__sclose>:
 8007c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5a:	f000 b8d1 	b.w	8007e00 <_close_r>

08007c5e <__swbuf_r>:
 8007c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c60:	460e      	mov	r6, r1
 8007c62:	4614      	mov	r4, r2
 8007c64:	4605      	mov	r5, r0
 8007c66:	b118      	cbz	r0, 8007c70 <__swbuf_r+0x12>
 8007c68:	6a03      	ldr	r3, [r0, #32]
 8007c6a:	b90b      	cbnz	r3, 8007c70 <__swbuf_r+0x12>
 8007c6c:	f7ff fea6 	bl	80079bc <__sinit>
 8007c70:	69a3      	ldr	r3, [r4, #24]
 8007c72:	60a3      	str	r3, [r4, #8]
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	071a      	lsls	r2, r3, #28
 8007c78:	d501      	bpl.n	8007c7e <__swbuf_r+0x20>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	b943      	cbnz	r3, 8007c90 <__swbuf_r+0x32>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 f82b 	bl	8007cdc <__swsetup_r>
 8007c86:	b118      	cbz	r0, 8007c90 <__swbuf_r+0x32>
 8007c88:	f04f 37ff 	mov.w	r7, #4294967295
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c90:	6823      	ldr	r3, [r4, #0]
 8007c92:	6922      	ldr	r2, [r4, #16]
 8007c94:	1a98      	subs	r0, r3, r2
 8007c96:	6963      	ldr	r3, [r4, #20]
 8007c98:	b2f6      	uxtb	r6, r6
 8007c9a:	4283      	cmp	r3, r0
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	dc05      	bgt.n	8007cac <__swbuf_r+0x4e>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f002 fcf6 	bl	800a694 <_fflush_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d1ed      	bne.n	8007c88 <__swbuf_r+0x2a>
 8007cac:	68a3      	ldr	r3, [r4, #8]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	60a3      	str	r3, [r4, #8]
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	1c5a      	adds	r2, r3, #1
 8007cb6:	6022      	str	r2, [r4, #0]
 8007cb8:	701e      	strb	r6, [r3, #0]
 8007cba:	6962      	ldr	r2, [r4, #20]
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d004      	beq.n	8007ccc <__swbuf_r+0x6e>
 8007cc2:	89a3      	ldrh	r3, [r4, #12]
 8007cc4:	07db      	lsls	r3, r3, #31
 8007cc6:	d5e1      	bpl.n	8007c8c <__swbuf_r+0x2e>
 8007cc8:	2e0a      	cmp	r6, #10
 8007cca:	d1df      	bne.n	8007c8c <__swbuf_r+0x2e>
 8007ccc:	4621      	mov	r1, r4
 8007cce:	4628      	mov	r0, r5
 8007cd0:	f002 fce0 	bl	800a694 <_fflush_r>
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	d0d9      	beq.n	8007c8c <__swbuf_r+0x2e>
 8007cd8:	e7d6      	b.n	8007c88 <__swbuf_r+0x2a>
	...

08007cdc <__swsetup_r>:
 8007cdc:	b538      	push	{r3, r4, r5, lr}
 8007cde:	4b29      	ldr	r3, [pc, #164]	@ (8007d84 <__swsetup_r+0xa8>)
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	6818      	ldr	r0, [r3, #0]
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	b118      	cbz	r0, 8007cf0 <__swsetup_r+0x14>
 8007ce8:	6a03      	ldr	r3, [r0, #32]
 8007cea:	b90b      	cbnz	r3, 8007cf0 <__swsetup_r+0x14>
 8007cec:	f7ff fe66 	bl	80079bc <__sinit>
 8007cf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cf4:	0719      	lsls	r1, r3, #28
 8007cf6:	d422      	bmi.n	8007d3e <__swsetup_r+0x62>
 8007cf8:	06da      	lsls	r2, r3, #27
 8007cfa:	d407      	bmi.n	8007d0c <__swsetup_r+0x30>
 8007cfc:	2209      	movs	r2, #9
 8007cfe:	602a      	str	r2, [r5, #0]
 8007d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d04:	81a3      	strh	r3, [r4, #12]
 8007d06:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0a:	e033      	b.n	8007d74 <__swsetup_r+0x98>
 8007d0c:	0758      	lsls	r0, r3, #29
 8007d0e:	d512      	bpl.n	8007d36 <__swsetup_r+0x5a>
 8007d10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d12:	b141      	cbz	r1, 8007d26 <__swsetup_r+0x4a>
 8007d14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007d18:	4299      	cmp	r1, r3
 8007d1a:	d002      	beq.n	8007d22 <__swsetup_r+0x46>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	f000 ff5b 	bl	8008bd8 <_free_r>
 8007d22:	2300      	movs	r3, #0
 8007d24:	6363      	str	r3, [r4, #52]	@ 0x34
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007d2c:	81a3      	strh	r3, [r4, #12]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	6063      	str	r3, [r4, #4]
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	6023      	str	r3, [r4, #0]
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	f043 0308 	orr.w	r3, r3, #8
 8007d3c:	81a3      	strh	r3, [r4, #12]
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	b94b      	cbnz	r3, 8007d56 <__swsetup_r+0x7a>
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d4c:	d003      	beq.n	8007d56 <__swsetup_r+0x7a>
 8007d4e:	4621      	mov	r1, r4
 8007d50:	4628      	mov	r0, r5
 8007d52:	f002 fced 	bl	800a730 <__smakebuf_r>
 8007d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5a:	f013 0201 	ands.w	r2, r3, #1
 8007d5e:	d00a      	beq.n	8007d76 <__swsetup_r+0x9a>
 8007d60:	2200      	movs	r2, #0
 8007d62:	60a2      	str	r2, [r4, #8]
 8007d64:	6962      	ldr	r2, [r4, #20]
 8007d66:	4252      	negs	r2, r2
 8007d68:	61a2      	str	r2, [r4, #24]
 8007d6a:	6922      	ldr	r2, [r4, #16]
 8007d6c:	b942      	cbnz	r2, 8007d80 <__swsetup_r+0xa4>
 8007d6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d72:	d1c5      	bne.n	8007d00 <__swsetup_r+0x24>
 8007d74:	bd38      	pop	{r3, r4, r5, pc}
 8007d76:	0799      	lsls	r1, r3, #30
 8007d78:	bf58      	it	pl
 8007d7a:	6962      	ldrpl	r2, [r4, #20]
 8007d7c:	60a2      	str	r2, [r4, #8]
 8007d7e:	e7f4      	b.n	8007d6a <__swsetup_r+0x8e>
 8007d80:	2000      	movs	r0, #0
 8007d82:	e7f7      	b.n	8007d74 <__swsetup_r+0x98>
 8007d84:	2000001c 	.word	0x2000001c

08007d88 <memset>:
 8007d88:	4402      	add	r2, r0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d100      	bne.n	8007d92 <memset+0xa>
 8007d90:	4770      	bx	lr
 8007d92:	f803 1b01 	strb.w	r1, [r3], #1
 8007d96:	e7f9      	b.n	8007d8c <memset+0x4>

08007d98 <_raise_r>:
 8007d98:	291f      	cmp	r1, #31
 8007d9a:	b538      	push	{r3, r4, r5, lr}
 8007d9c:	4605      	mov	r5, r0
 8007d9e:	460c      	mov	r4, r1
 8007da0:	d904      	bls.n	8007dac <_raise_r+0x14>
 8007da2:	2316      	movs	r3, #22
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007dae:	b112      	cbz	r2, 8007db6 <_raise_r+0x1e>
 8007db0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007db4:	b94b      	cbnz	r3, 8007dca <_raise_r+0x32>
 8007db6:	4628      	mov	r0, r5
 8007db8:	f000 f868 	bl	8007e8c <_getpid_r>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dc6:	f000 b84f 	b.w	8007e68 <_kill_r>
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d00a      	beq.n	8007de4 <_raise_r+0x4c>
 8007dce:	1c59      	adds	r1, r3, #1
 8007dd0:	d103      	bne.n	8007dda <_raise_r+0x42>
 8007dd2:	2316      	movs	r3, #22
 8007dd4:	6003      	str	r3, [r0, #0]
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7e7      	b.n	8007daa <_raise_r+0x12>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007de0:	4620      	mov	r0, r4
 8007de2:	4798      	blx	r3
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7e0      	b.n	8007daa <_raise_r+0x12>

08007de8 <raise>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	@ (8007df4 <raise+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f7ff bfd3 	b.w	8007d98 <_raise_r>
 8007df2:	bf00      	nop
 8007df4:	2000001c 	.word	0x2000001c

08007df8 <_localeconv_r>:
 8007df8:	4800      	ldr	r0, [pc, #0]	@ (8007dfc <_localeconv_r+0x4>)
 8007dfa:	4770      	bx	lr
 8007dfc:	2000015c 	.word	0x2000015c

08007e00 <_close_r>:
 8007e00:	b538      	push	{r3, r4, r5, lr}
 8007e02:	4d06      	ldr	r5, [pc, #24]	@ (8007e1c <_close_r+0x1c>)
 8007e04:	2300      	movs	r3, #0
 8007e06:	4604      	mov	r4, r0
 8007e08:	4608      	mov	r0, r1
 8007e0a:	602b      	str	r3, [r5, #0]
 8007e0c:	f7fb fb00 	bl	8003410 <_close>
 8007e10:	1c43      	adds	r3, r0, #1
 8007e12:	d102      	bne.n	8007e1a <_close_r+0x1a>
 8007e14:	682b      	ldr	r3, [r5, #0]
 8007e16:	b103      	cbz	r3, 8007e1a <_close_r+0x1a>
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	bd38      	pop	{r3, r4, r5, pc}
 8007e1c:	2000066c 	.word	0x2000066c

08007e20 <_lseek_r>:
 8007e20:	b538      	push	{r3, r4, r5, lr}
 8007e22:	4d07      	ldr	r5, [pc, #28]	@ (8007e40 <_lseek_r+0x20>)
 8007e24:	4604      	mov	r4, r0
 8007e26:	4608      	mov	r0, r1
 8007e28:	4611      	mov	r1, r2
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	602a      	str	r2, [r5, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	f7fb fb15 	bl	800345e <_lseek>
 8007e34:	1c43      	adds	r3, r0, #1
 8007e36:	d102      	bne.n	8007e3e <_lseek_r+0x1e>
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	b103      	cbz	r3, 8007e3e <_lseek_r+0x1e>
 8007e3c:	6023      	str	r3, [r4, #0]
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	2000066c 	.word	0x2000066c

08007e44 <_read_r>:
 8007e44:	b538      	push	{r3, r4, r5, lr}
 8007e46:	4d07      	ldr	r5, [pc, #28]	@ (8007e64 <_read_r+0x20>)
 8007e48:	4604      	mov	r4, r0
 8007e4a:	4608      	mov	r0, r1
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	2200      	movs	r2, #0
 8007e50:	602a      	str	r2, [r5, #0]
 8007e52:	461a      	mov	r2, r3
 8007e54:	f7fb faa3 	bl	800339e <_read>
 8007e58:	1c43      	adds	r3, r0, #1
 8007e5a:	d102      	bne.n	8007e62 <_read_r+0x1e>
 8007e5c:	682b      	ldr	r3, [r5, #0]
 8007e5e:	b103      	cbz	r3, 8007e62 <_read_r+0x1e>
 8007e60:	6023      	str	r3, [r4, #0]
 8007e62:	bd38      	pop	{r3, r4, r5, pc}
 8007e64:	2000066c 	.word	0x2000066c

08007e68 <_kill_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4d07      	ldr	r5, [pc, #28]	@ (8007e88 <_kill_r+0x20>)
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	4604      	mov	r4, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	4611      	mov	r1, r2
 8007e74:	602b      	str	r3, [r5, #0]
 8007e76:	f7fb fa77 	bl	8003368 <_kill>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d102      	bne.n	8007e84 <_kill_r+0x1c>
 8007e7e:	682b      	ldr	r3, [r5, #0]
 8007e80:	b103      	cbz	r3, 8007e84 <_kill_r+0x1c>
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	bd38      	pop	{r3, r4, r5, pc}
 8007e86:	bf00      	nop
 8007e88:	2000066c 	.word	0x2000066c

08007e8c <_getpid_r>:
 8007e8c:	f7fb ba64 	b.w	8003358 <_getpid>

08007e90 <_sbrk_r>:
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4d06      	ldr	r5, [pc, #24]	@ (8007eac <_sbrk_r+0x1c>)
 8007e94:	2300      	movs	r3, #0
 8007e96:	4604      	mov	r4, r0
 8007e98:	4608      	mov	r0, r1
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	f7fb faec 	bl	8003478 <_sbrk>
 8007ea0:	1c43      	adds	r3, r0, #1
 8007ea2:	d102      	bne.n	8007eaa <_sbrk_r+0x1a>
 8007ea4:	682b      	ldr	r3, [r5, #0]
 8007ea6:	b103      	cbz	r3, 8007eaa <_sbrk_r+0x1a>
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	bd38      	pop	{r3, r4, r5, pc}
 8007eac:	2000066c 	.word	0x2000066c

08007eb0 <_write_r>:
 8007eb0:	b538      	push	{r3, r4, r5, lr}
 8007eb2:	4d07      	ldr	r5, [pc, #28]	@ (8007ed0 <_write_r+0x20>)
 8007eb4:	4604      	mov	r4, r0
 8007eb6:	4608      	mov	r0, r1
 8007eb8:	4611      	mov	r1, r2
 8007eba:	2200      	movs	r2, #0
 8007ebc:	602a      	str	r2, [r5, #0]
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	f7fb fa8a 	bl	80033d8 <_write>
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	d102      	bne.n	8007ece <_write_r+0x1e>
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	b103      	cbz	r3, 8007ece <_write_r+0x1e>
 8007ecc:	6023      	str	r3, [r4, #0]
 8007ece:	bd38      	pop	{r3, r4, r5, pc}
 8007ed0:	2000066c 	.word	0x2000066c

08007ed4 <__errno>:
 8007ed4:	4b01      	ldr	r3, [pc, #4]	@ (8007edc <__errno+0x8>)
 8007ed6:	6818      	ldr	r0, [r3, #0]
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	2000001c 	.word	0x2000001c

08007ee0 <__libc_init_array>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8007f18 <__libc_init_array+0x38>)
 8007ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8007f1c <__libc_init_array+0x3c>)
 8007ee6:	1b64      	subs	r4, r4, r5
 8007ee8:	10a4      	asrs	r4, r4, #2
 8007eea:	2600      	movs	r6, #0
 8007eec:	42a6      	cmp	r6, r4
 8007eee:	d109      	bne.n	8007f04 <__libc_init_array+0x24>
 8007ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8007f20 <__libc_init_array+0x40>)
 8007ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8007f24 <__libc_init_array+0x44>)
 8007ef4:	f004 fb8c 	bl	800c610 <_init>
 8007ef8:	1b64      	subs	r4, r4, r5
 8007efa:	10a4      	asrs	r4, r4, #2
 8007efc:	2600      	movs	r6, #0
 8007efe:	42a6      	cmp	r6, r4
 8007f00:	d105      	bne.n	8007f0e <__libc_init_array+0x2e>
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f08:	4798      	blx	r3
 8007f0a:	3601      	adds	r6, #1
 8007f0c:	e7ee      	b.n	8007eec <__libc_init_array+0xc>
 8007f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f12:	4798      	blx	r3
 8007f14:	3601      	adds	r6, #1
 8007f16:	e7f2      	b.n	8007efe <__libc_init_array+0x1e>
 8007f18:	0800cd80 	.word	0x0800cd80
 8007f1c:	0800cd80 	.word	0x0800cd80
 8007f20:	0800cd80 	.word	0x0800cd80
 8007f24:	0800cd84 	.word	0x0800cd84

08007f28 <__retarget_lock_init_recursive>:
 8007f28:	4770      	bx	lr

08007f2a <__retarget_lock_acquire_recursive>:
 8007f2a:	4770      	bx	lr

08007f2c <__retarget_lock_release_recursive>:
 8007f2c:	4770      	bx	lr
	...

08007f30 <nanf>:
 8007f30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007f38 <nanf+0x8>
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	7fc00000 	.word	0x7fc00000

08007f3c <quorem>:
 8007f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f40:	6903      	ldr	r3, [r0, #16]
 8007f42:	690c      	ldr	r4, [r1, #16]
 8007f44:	42a3      	cmp	r3, r4
 8007f46:	4607      	mov	r7, r0
 8007f48:	db7e      	blt.n	8008048 <quorem+0x10c>
 8007f4a:	3c01      	subs	r4, #1
 8007f4c:	f101 0814 	add.w	r8, r1, #20
 8007f50:	00a3      	lsls	r3, r4, #2
 8007f52:	f100 0514 	add.w	r5, r0, #20
 8007f56:	9300      	str	r3, [sp, #0]
 8007f58:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007f62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f66:	3301      	adds	r3, #1
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007f6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007f72:	d32e      	bcc.n	8007fd2 <quorem+0x96>
 8007f74:	f04f 0a00 	mov.w	sl, #0
 8007f78:	46c4      	mov	ip, r8
 8007f7a:	46ae      	mov	lr, r5
 8007f7c:	46d3      	mov	fp, sl
 8007f7e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f82:	b298      	uxth	r0, r3
 8007f84:	fb06 a000 	mla	r0, r6, r0, sl
 8007f88:	0c02      	lsrs	r2, r0, #16
 8007f8a:	0c1b      	lsrs	r3, r3, #16
 8007f8c:	fb06 2303 	mla	r3, r6, r3, r2
 8007f90:	f8de 2000 	ldr.w	r2, [lr]
 8007f94:	b280      	uxth	r0, r0
 8007f96:	b292      	uxth	r2, r2
 8007f98:	1a12      	subs	r2, r2, r0
 8007f9a:	445a      	add	r2, fp
 8007f9c:	f8de 0000 	ldr.w	r0, [lr]
 8007fa0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007faa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007fae:	b292      	uxth	r2, r2
 8007fb0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007fb4:	45e1      	cmp	r9, ip
 8007fb6:	f84e 2b04 	str.w	r2, [lr], #4
 8007fba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007fbe:	d2de      	bcs.n	8007f7e <quorem+0x42>
 8007fc0:	9b00      	ldr	r3, [sp, #0]
 8007fc2:	58eb      	ldr	r3, [r5, r3]
 8007fc4:	b92b      	cbnz	r3, 8007fd2 <quorem+0x96>
 8007fc6:	9b01      	ldr	r3, [sp, #4]
 8007fc8:	3b04      	subs	r3, #4
 8007fca:	429d      	cmp	r5, r3
 8007fcc:	461a      	mov	r2, r3
 8007fce:	d32f      	bcc.n	8008030 <quorem+0xf4>
 8007fd0:	613c      	str	r4, [r7, #16]
 8007fd2:	4638      	mov	r0, r7
 8007fd4:	f001 f90e 	bl	80091f4 <__mcmp>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	db25      	blt.n	8008028 <quorem+0xec>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007fe4:	f8d1 c000 	ldr.w	ip, [r1]
 8007fe8:	fa1f fe82 	uxth.w	lr, r2
 8007fec:	fa1f f38c 	uxth.w	r3, ip
 8007ff0:	eba3 030e 	sub.w	r3, r3, lr
 8007ff4:	4403      	add	r3, r0
 8007ff6:	0c12      	lsrs	r2, r2, #16
 8007ff8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007ffc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008000:	b29b      	uxth	r3, r3
 8008002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008006:	45c1      	cmp	r9, r8
 8008008:	f841 3b04 	str.w	r3, [r1], #4
 800800c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008010:	d2e6      	bcs.n	8007fe0 <quorem+0xa4>
 8008012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800801a:	b922      	cbnz	r2, 8008026 <quorem+0xea>
 800801c:	3b04      	subs	r3, #4
 800801e:	429d      	cmp	r5, r3
 8008020:	461a      	mov	r2, r3
 8008022:	d30b      	bcc.n	800803c <quorem+0x100>
 8008024:	613c      	str	r4, [r7, #16]
 8008026:	3601      	adds	r6, #1
 8008028:	4630      	mov	r0, r6
 800802a:	b003      	add	sp, #12
 800802c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	3b04      	subs	r3, #4
 8008034:	2a00      	cmp	r2, #0
 8008036:	d1cb      	bne.n	8007fd0 <quorem+0x94>
 8008038:	3c01      	subs	r4, #1
 800803a:	e7c6      	b.n	8007fca <quorem+0x8e>
 800803c:	6812      	ldr	r2, [r2, #0]
 800803e:	3b04      	subs	r3, #4
 8008040:	2a00      	cmp	r2, #0
 8008042:	d1ef      	bne.n	8008024 <quorem+0xe8>
 8008044:	3c01      	subs	r4, #1
 8008046:	e7ea      	b.n	800801e <quorem+0xe2>
 8008048:	2000      	movs	r0, #0
 800804a:	e7ee      	b.n	800802a <quorem+0xee>
 800804c:	0000      	movs	r0, r0
	...

08008050 <_dtoa_r>:
 8008050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008054:	69c7      	ldr	r7, [r0, #28]
 8008056:	b099      	sub	sp, #100	@ 0x64
 8008058:	ed8d 0b02 	vstr	d0, [sp, #8]
 800805c:	ec55 4b10 	vmov	r4, r5, d0
 8008060:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008062:	9109      	str	r1, [sp, #36]	@ 0x24
 8008064:	4683      	mov	fp, r0
 8008066:	920e      	str	r2, [sp, #56]	@ 0x38
 8008068:	9313      	str	r3, [sp, #76]	@ 0x4c
 800806a:	b97f      	cbnz	r7, 800808c <_dtoa_r+0x3c>
 800806c:	2010      	movs	r0, #16
 800806e:	f7fe fcef 	bl	8006a50 <malloc>
 8008072:	4602      	mov	r2, r0
 8008074:	f8cb 001c 	str.w	r0, [fp, #28]
 8008078:	b920      	cbnz	r0, 8008084 <_dtoa_r+0x34>
 800807a:	4ba7      	ldr	r3, [pc, #668]	@ (8008318 <_dtoa_r+0x2c8>)
 800807c:	21ef      	movs	r1, #239	@ 0xef
 800807e:	48a7      	ldr	r0, [pc, #668]	@ (800831c <_dtoa_r+0x2cc>)
 8008080:	f002 fbf6 	bl	800a870 <__assert_func>
 8008084:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008088:	6007      	str	r7, [r0, #0]
 800808a:	60c7      	str	r7, [r0, #12]
 800808c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008090:	6819      	ldr	r1, [r3, #0]
 8008092:	b159      	cbz	r1, 80080ac <_dtoa_r+0x5c>
 8008094:	685a      	ldr	r2, [r3, #4]
 8008096:	604a      	str	r2, [r1, #4]
 8008098:	2301      	movs	r3, #1
 800809a:	4093      	lsls	r3, r2
 800809c:	608b      	str	r3, [r1, #8]
 800809e:	4658      	mov	r0, fp
 80080a0:	f000 fe24 	bl	8008cec <_Bfree>
 80080a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	1e2b      	subs	r3, r5, #0
 80080ae:	bfb9      	ittee	lt
 80080b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80080b4:	9303      	strlt	r3, [sp, #12]
 80080b6:	2300      	movge	r3, #0
 80080b8:	6033      	strge	r3, [r6, #0]
 80080ba:	9f03      	ldr	r7, [sp, #12]
 80080bc:	4b98      	ldr	r3, [pc, #608]	@ (8008320 <_dtoa_r+0x2d0>)
 80080be:	bfbc      	itt	lt
 80080c0:	2201      	movlt	r2, #1
 80080c2:	6032      	strlt	r2, [r6, #0]
 80080c4:	43bb      	bics	r3, r7
 80080c6:	d112      	bne.n	80080ee <_dtoa_r+0x9e>
 80080c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80080ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080d4:	4323      	orrs	r3, r4
 80080d6:	f000 854d 	beq.w	8008b74 <_dtoa_r+0xb24>
 80080da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008334 <_dtoa_r+0x2e4>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 854f 	beq.w	8008b84 <_dtoa_r+0xb34>
 80080e6:	f10a 0303 	add.w	r3, sl, #3
 80080ea:	f000 bd49 	b.w	8008b80 <_dtoa_r+0xb30>
 80080ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080f2:	2200      	movs	r2, #0
 80080f4:	ec51 0b17 	vmov	r0, r1, d7
 80080f8:	2300      	movs	r3, #0
 80080fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80080fe:	f7f8 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 8008102:	4680      	mov	r8, r0
 8008104:	b158      	cbz	r0, 800811e <_dtoa_r+0xce>
 8008106:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008108:	2301      	movs	r3, #1
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800810e:	b113      	cbz	r3, 8008116 <_dtoa_r+0xc6>
 8008110:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008112:	4b84      	ldr	r3, [pc, #528]	@ (8008324 <_dtoa_r+0x2d4>)
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008338 <_dtoa_r+0x2e8>
 800811a:	f000 bd33 	b.w	8008b84 <_dtoa_r+0xb34>
 800811e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008122:	aa16      	add	r2, sp, #88	@ 0x58
 8008124:	a917      	add	r1, sp, #92	@ 0x5c
 8008126:	4658      	mov	r0, fp
 8008128:	f001 f984 	bl	8009434 <__d2b>
 800812c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008130:	4681      	mov	r9, r0
 8008132:	2e00      	cmp	r6, #0
 8008134:	d077      	beq.n	8008226 <_dtoa_r+0x1d6>
 8008136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008138:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800813c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008140:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008144:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008148:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800814c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008150:	4619      	mov	r1, r3
 8008152:	2200      	movs	r2, #0
 8008154:	4b74      	ldr	r3, [pc, #464]	@ (8008328 <_dtoa_r+0x2d8>)
 8008156:	f7f8 f8b7 	bl	80002c8 <__aeabi_dsub>
 800815a:	a369      	add	r3, pc, #420	@ (adr r3, 8008300 <_dtoa_r+0x2b0>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 fa6a 	bl	8000638 <__aeabi_dmul>
 8008164:	a368      	add	r3, pc, #416	@ (adr r3, 8008308 <_dtoa_r+0x2b8>)
 8008166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816a:	f7f8 f8af 	bl	80002cc <__adddf3>
 800816e:	4604      	mov	r4, r0
 8008170:	4630      	mov	r0, r6
 8008172:	460d      	mov	r5, r1
 8008174:	f7f8 f9f6 	bl	8000564 <__aeabi_i2d>
 8008178:	a365      	add	r3, pc, #404	@ (adr r3, 8008310 <_dtoa_r+0x2c0>)
 800817a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800817e:	f7f8 fa5b 	bl	8000638 <__aeabi_dmul>
 8008182:	4602      	mov	r2, r0
 8008184:	460b      	mov	r3, r1
 8008186:	4620      	mov	r0, r4
 8008188:	4629      	mov	r1, r5
 800818a:	f7f8 f89f 	bl	80002cc <__adddf3>
 800818e:	4604      	mov	r4, r0
 8008190:	460d      	mov	r5, r1
 8008192:	f7f8 fd01 	bl	8000b98 <__aeabi_d2iz>
 8008196:	2200      	movs	r2, #0
 8008198:	4607      	mov	r7, r0
 800819a:	2300      	movs	r3, #0
 800819c:	4620      	mov	r0, r4
 800819e:	4629      	mov	r1, r5
 80081a0:	f7f8 fcbc 	bl	8000b1c <__aeabi_dcmplt>
 80081a4:	b140      	cbz	r0, 80081b8 <_dtoa_r+0x168>
 80081a6:	4638      	mov	r0, r7
 80081a8:	f7f8 f9dc 	bl	8000564 <__aeabi_i2d>
 80081ac:	4622      	mov	r2, r4
 80081ae:	462b      	mov	r3, r5
 80081b0:	f7f8 fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 80081b4:	b900      	cbnz	r0, 80081b8 <_dtoa_r+0x168>
 80081b6:	3f01      	subs	r7, #1
 80081b8:	2f16      	cmp	r7, #22
 80081ba:	d851      	bhi.n	8008260 <_dtoa_r+0x210>
 80081bc:	4b5b      	ldr	r3, [pc, #364]	@ (800832c <_dtoa_r+0x2dc>)
 80081be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081ca:	f7f8 fca7 	bl	8000b1c <__aeabi_dcmplt>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d048      	beq.n	8008264 <_dtoa_r+0x214>
 80081d2:	3f01      	subs	r7, #1
 80081d4:	2300      	movs	r3, #0
 80081d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80081d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80081da:	1b9b      	subs	r3, r3, r6
 80081dc:	1e5a      	subs	r2, r3, #1
 80081de:	bf44      	itt	mi
 80081e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80081e4:	2300      	movmi	r3, #0
 80081e6:	9208      	str	r2, [sp, #32]
 80081e8:	bf54      	ite	pl
 80081ea:	f04f 0800 	movpl.w	r8, #0
 80081ee:	9308      	strmi	r3, [sp, #32]
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	db39      	blt.n	8008268 <_dtoa_r+0x218>
 80081f4:	9b08      	ldr	r3, [sp, #32]
 80081f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80081f8:	443b      	add	r3, r7
 80081fa:	9308      	str	r3, [sp, #32]
 80081fc:	2300      	movs	r3, #0
 80081fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008202:	2b09      	cmp	r3, #9
 8008204:	d864      	bhi.n	80082d0 <_dtoa_r+0x280>
 8008206:	2b05      	cmp	r3, #5
 8008208:	bfc4      	itt	gt
 800820a:	3b04      	subgt	r3, #4
 800820c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800820e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008210:	f1a3 0302 	sub.w	r3, r3, #2
 8008214:	bfcc      	ite	gt
 8008216:	2400      	movgt	r4, #0
 8008218:	2401      	movle	r4, #1
 800821a:	2b03      	cmp	r3, #3
 800821c:	d863      	bhi.n	80082e6 <_dtoa_r+0x296>
 800821e:	e8df f003 	tbb	[pc, r3]
 8008222:	372a      	.short	0x372a
 8008224:	5535      	.short	0x5535
 8008226:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800822a:	441e      	add	r6, r3
 800822c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008230:	2b20      	cmp	r3, #32
 8008232:	bfc1      	itttt	gt
 8008234:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008238:	409f      	lslgt	r7, r3
 800823a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800823e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008242:	bfd6      	itet	le
 8008244:	f1c3 0320 	rsble	r3, r3, #32
 8008248:	ea47 0003 	orrgt.w	r0, r7, r3
 800824c:	fa04 f003 	lslle.w	r0, r4, r3
 8008250:	f7f8 f978 	bl	8000544 <__aeabi_ui2d>
 8008254:	2201      	movs	r2, #1
 8008256:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800825a:	3e01      	subs	r6, #1
 800825c:	9214      	str	r2, [sp, #80]	@ 0x50
 800825e:	e777      	b.n	8008150 <_dtoa_r+0x100>
 8008260:	2301      	movs	r3, #1
 8008262:	e7b8      	b.n	80081d6 <_dtoa_r+0x186>
 8008264:	9012      	str	r0, [sp, #72]	@ 0x48
 8008266:	e7b7      	b.n	80081d8 <_dtoa_r+0x188>
 8008268:	427b      	negs	r3, r7
 800826a:	930a      	str	r3, [sp, #40]	@ 0x28
 800826c:	2300      	movs	r3, #0
 800826e:	eba8 0807 	sub.w	r8, r8, r7
 8008272:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008274:	e7c4      	b.n	8008200 <_dtoa_r+0x1b0>
 8008276:	2300      	movs	r3, #0
 8008278:	930b      	str	r3, [sp, #44]	@ 0x2c
 800827a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800827c:	2b00      	cmp	r3, #0
 800827e:	dc35      	bgt.n	80082ec <_dtoa_r+0x29c>
 8008280:	2301      	movs	r3, #1
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	461a      	mov	r2, r3
 8008288:	920e      	str	r2, [sp, #56]	@ 0x38
 800828a:	e00b      	b.n	80082a4 <_dtoa_r+0x254>
 800828c:	2301      	movs	r3, #1
 800828e:	e7f3      	b.n	8008278 <_dtoa_r+0x228>
 8008290:	2300      	movs	r3, #0
 8008292:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008294:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008296:	18fb      	adds	r3, r7, r3
 8008298:	9300      	str	r3, [sp, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	2b01      	cmp	r3, #1
 800829e:	9307      	str	r3, [sp, #28]
 80082a0:	bfb8      	it	lt
 80082a2:	2301      	movlt	r3, #1
 80082a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80082a8:	2100      	movs	r1, #0
 80082aa:	2204      	movs	r2, #4
 80082ac:	f102 0514 	add.w	r5, r2, #20
 80082b0:	429d      	cmp	r5, r3
 80082b2:	d91f      	bls.n	80082f4 <_dtoa_r+0x2a4>
 80082b4:	6041      	str	r1, [r0, #4]
 80082b6:	4658      	mov	r0, fp
 80082b8:	f000 fcd8 	bl	8008c6c <_Balloc>
 80082bc:	4682      	mov	sl, r0
 80082be:	2800      	cmp	r0, #0
 80082c0:	d13c      	bne.n	800833c <_dtoa_r+0x2ec>
 80082c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008330 <_dtoa_r+0x2e0>)
 80082c4:	4602      	mov	r2, r0
 80082c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80082ca:	e6d8      	b.n	800807e <_dtoa_r+0x2e>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e7e0      	b.n	8008292 <_dtoa_r+0x242>
 80082d0:	2401      	movs	r4, #1
 80082d2:	2300      	movs	r3, #0
 80082d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80082d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	2200      	movs	r2, #0
 80082e2:	2312      	movs	r3, #18
 80082e4:	e7d0      	b.n	8008288 <_dtoa_r+0x238>
 80082e6:	2301      	movs	r3, #1
 80082e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80082ea:	e7f5      	b.n	80082d8 <_dtoa_r+0x288>
 80082ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	e7d7      	b.n	80082a4 <_dtoa_r+0x254>
 80082f4:	3101      	adds	r1, #1
 80082f6:	0052      	lsls	r2, r2, #1
 80082f8:	e7d8      	b.n	80082ac <_dtoa_r+0x25c>
 80082fa:	bf00      	nop
 80082fc:	f3af 8000 	nop.w
 8008300:	636f4361 	.word	0x636f4361
 8008304:	3fd287a7 	.word	0x3fd287a7
 8008308:	8b60c8b3 	.word	0x8b60c8b3
 800830c:	3fc68a28 	.word	0x3fc68a28
 8008310:	509f79fb 	.word	0x509f79fb
 8008314:	3fd34413 	.word	0x3fd34413
 8008318:	0800c7aa 	.word	0x0800c7aa
 800831c:	0800c7c1 	.word	0x0800c7c1
 8008320:	7ff00000 	.word	0x7ff00000
 8008324:	0800c775 	.word	0x0800c775
 8008328:	3ff80000 	.word	0x3ff80000
 800832c:	0800c8b8 	.word	0x0800c8b8
 8008330:	0800c819 	.word	0x0800c819
 8008334:	0800c7a6 	.word	0x0800c7a6
 8008338:	0800c774 	.word	0x0800c774
 800833c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008340:	6018      	str	r0, [r3, #0]
 8008342:	9b07      	ldr	r3, [sp, #28]
 8008344:	2b0e      	cmp	r3, #14
 8008346:	f200 80a4 	bhi.w	8008492 <_dtoa_r+0x442>
 800834a:	2c00      	cmp	r4, #0
 800834c:	f000 80a1 	beq.w	8008492 <_dtoa_r+0x442>
 8008350:	2f00      	cmp	r7, #0
 8008352:	dd33      	ble.n	80083bc <_dtoa_r+0x36c>
 8008354:	4bad      	ldr	r3, [pc, #692]	@ (800860c <_dtoa_r+0x5bc>)
 8008356:	f007 020f 	and.w	r2, r7, #15
 800835a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800835e:	ed93 7b00 	vldr	d7, [r3]
 8008362:	05f8      	lsls	r0, r7, #23
 8008364:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008368:	ea4f 1427 	mov.w	r4, r7, asr #4
 800836c:	d516      	bpl.n	800839c <_dtoa_r+0x34c>
 800836e:	4ba8      	ldr	r3, [pc, #672]	@ (8008610 <_dtoa_r+0x5c0>)
 8008370:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008374:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008378:	f7f8 fa88 	bl	800088c <__aeabi_ddiv>
 800837c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008380:	f004 040f 	and.w	r4, r4, #15
 8008384:	2603      	movs	r6, #3
 8008386:	4da2      	ldr	r5, [pc, #648]	@ (8008610 <_dtoa_r+0x5c0>)
 8008388:	b954      	cbnz	r4, 80083a0 <_dtoa_r+0x350>
 800838a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800838e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008392:	f7f8 fa7b 	bl	800088c <__aeabi_ddiv>
 8008396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839a:	e028      	b.n	80083ee <_dtoa_r+0x39e>
 800839c:	2602      	movs	r6, #2
 800839e:	e7f2      	b.n	8008386 <_dtoa_r+0x336>
 80083a0:	07e1      	lsls	r1, r4, #31
 80083a2:	d508      	bpl.n	80083b6 <_dtoa_r+0x366>
 80083a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083ac:	f7f8 f944 	bl	8000638 <__aeabi_dmul>
 80083b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80083b4:	3601      	adds	r6, #1
 80083b6:	1064      	asrs	r4, r4, #1
 80083b8:	3508      	adds	r5, #8
 80083ba:	e7e5      	b.n	8008388 <_dtoa_r+0x338>
 80083bc:	f000 80d2 	beq.w	8008564 <_dtoa_r+0x514>
 80083c0:	427c      	negs	r4, r7
 80083c2:	4b92      	ldr	r3, [pc, #584]	@ (800860c <_dtoa_r+0x5bc>)
 80083c4:	4d92      	ldr	r5, [pc, #584]	@ (8008610 <_dtoa_r+0x5c0>)
 80083c6:	f004 020f 	and.w	r2, r4, #15
 80083ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083d6:	f7f8 f92f 	bl	8000638 <__aeabi_dmul>
 80083da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083de:	1124      	asrs	r4, r4, #4
 80083e0:	2300      	movs	r3, #0
 80083e2:	2602      	movs	r6, #2
 80083e4:	2c00      	cmp	r4, #0
 80083e6:	f040 80b2 	bne.w	800854e <_dtoa_r+0x4fe>
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1d3      	bne.n	8008396 <_dtoa_r+0x346>
 80083ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80083f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 80b7 	beq.w	8008568 <_dtoa_r+0x518>
 80083fa:	4b86      	ldr	r3, [pc, #536]	@ (8008614 <_dtoa_r+0x5c4>)
 80083fc:	2200      	movs	r2, #0
 80083fe:	4620      	mov	r0, r4
 8008400:	4629      	mov	r1, r5
 8008402:	f7f8 fb8b 	bl	8000b1c <__aeabi_dcmplt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f000 80ae 	beq.w	8008568 <_dtoa_r+0x518>
 800840c:	9b07      	ldr	r3, [sp, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80aa 	beq.w	8008568 <_dtoa_r+0x518>
 8008414:	9b00      	ldr	r3, [sp, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	dd37      	ble.n	800848a <_dtoa_r+0x43a>
 800841a:	1e7b      	subs	r3, r7, #1
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	4620      	mov	r0, r4
 8008420:	4b7d      	ldr	r3, [pc, #500]	@ (8008618 <_dtoa_r+0x5c8>)
 8008422:	2200      	movs	r2, #0
 8008424:	4629      	mov	r1, r5
 8008426:	f7f8 f907 	bl	8000638 <__aeabi_dmul>
 800842a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800842e:	9c00      	ldr	r4, [sp, #0]
 8008430:	3601      	adds	r6, #1
 8008432:	4630      	mov	r0, r6
 8008434:	f7f8 f896 	bl	8000564 <__aeabi_i2d>
 8008438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800843c:	f7f8 f8fc 	bl	8000638 <__aeabi_dmul>
 8008440:	4b76      	ldr	r3, [pc, #472]	@ (800861c <_dtoa_r+0x5cc>)
 8008442:	2200      	movs	r2, #0
 8008444:	f7f7 ff42 	bl	80002cc <__adddf3>
 8008448:	4605      	mov	r5, r0
 800844a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800844e:	2c00      	cmp	r4, #0
 8008450:	f040 808d 	bne.w	800856e <_dtoa_r+0x51e>
 8008454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008458:	4b71      	ldr	r3, [pc, #452]	@ (8008620 <_dtoa_r+0x5d0>)
 800845a:	2200      	movs	r2, #0
 800845c:	f7f7 ff34 	bl	80002c8 <__aeabi_dsub>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008468:	462a      	mov	r2, r5
 800846a:	4633      	mov	r3, r6
 800846c:	f7f8 fb74 	bl	8000b58 <__aeabi_dcmpgt>
 8008470:	2800      	cmp	r0, #0
 8008472:	f040 828b 	bne.w	800898c <_dtoa_r+0x93c>
 8008476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800847a:	462a      	mov	r2, r5
 800847c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008480:	f7f8 fb4c 	bl	8000b1c <__aeabi_dcmplt>
 8008484:	2800      	cmp	r0, #0
 8008486:	f040 8128 	bne.w	80086da <_dtoa_r+0x68a>
 800848a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800848e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008494:	2b00      	cmp	r3, #0
 8008496:	f2c0 815a 	blt.w	800874e <_dtoa_r+0x6fe>
 800849a:	2f0e      	cmp	r7, #14
 800849c:	f300 8157 	bgt.w	800874e <_dtoa_r+0x6fe>
 80084a0:	4b5a      	ldr	r3, [pc, #360]	@ (800860c <_dtoa_r+0x5bc>)
 80084a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80084a6:	ed93 7b00 	vldr	d7, [r3]
 80084aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	ed8d 7b00 	vstr	d7, [sp]
 80084b2:	da03      	bge.n	80084bc <_dtoa_r+0x46c>
 80084b4:	9b07      	ldr	r3, [sp, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f340 8101 	ble.w	80086be <_dtoa_r+0x66e>
 80084bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80084c0:	4656      	mov	r6, sl
 80084c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084c6:	4620      	mov	r0, r4
 80084c8:	4629      	mov	r1, r5
 80084ca:	f7f8 f9df 	bl	800088c <__aeabi_ddiv>
 80084ce:	f7f8 fb63 	bl	8000b98 <__aeabi_d2iz>
 80084d2:	4680      	mov	r8, r0
 80084d4:	f7f8 f846 	bl	8000564 <__aeabi_i2d>
 80084d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084dc:	f7f8 f8ac 	bl	8000638 <__aeabi_dmul>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	4620      	mov	r0, r4
 80084e6:	4629      	mov	r1, r5
 80084e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084ec:	f7f7 feec 	bl	80002c8 <__aeabi_dsub>
 80084f0:	f806 4b01 	strb.w	r4, [r6], #1
 80084f4:	9d07      	ldr	r5, [sp, #28]
 80084f6:	eba6 040a 	sub.w	r4, r6, sl
 80084fa:	42a5      	cmp	r5, r4
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	f040 8117 	bne.w	8008732 <_dtoa_r+0x6e2>
 8008504:	f7f7 fee2 	bl	80002cc <__adddf3>
 8008508:	e9dd 2300 	ldrd	r2, r3, [sp]
 800850c:	4604      	mov	r4, r0
 800850e:	460d      	mov	r5, r1
 8008510:	f7f8 fb22 	bl	8000b58 <__aeabi_dcmpgt>
 8008514:	2800      	cmp	r0, #0
 8008516:	f040 80f9 	bne.w	800870c <_dtoa_r+0x6bc>
 800851a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800851e:	4620      	mov	r0, r4
 8008520:	4629      	mov	r1, r5
 8008522:	f7f8 faf1 	bl	8000b08 <__aeabi_dcmpeq>
 8008526:	b118      	cbz	r0, 8008530 <_dtoa_r+0x4e0>
 8008528:	f018 0f01 	tst.w	r8, #1
 800852c:	f040 80ee 	bne.w	800870c <_dtoa_r+0x6bc>
 8008530:	4649      	mov	r1, r9
 8008532:	4658      	mov	r0, fp
 8008534:	f000 fbda 	bl	8008cec <_Bfree>
 8008538:	2300      	movs	r3, #0
 800853a:	7033      	strb	r3, [r6, #0]
 800853c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800853e:	3701      	adds	r7, #1
 8008540:	601f      	str	r7, [r3, #0]
 8008542:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 831d 	beq.w	8008b84 <_dtoa_r+0xb34>
 800854a:	601e      	str	r6, [r3, #0]
 800854c:	e31a      	b.n	8008b84 <_dtoa_r+0xb34>
 800854e:	07e2      	lsls	r2, r4, #31
 8008550:	d505      	bpl.n	800855e <_dtoa_r+0x50e>
 8008552:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008556:	f7f8 f86f 	bl	8000638 <__aeabi_dmul>
 800855a:	3601      	adds	r6, #1
 800855c:	2301      	movs	r3, #1
 800855e:	1064      	asrs	r4, r4, #1
 8008560:	3508      	adds	r5, #8
 8008562:	e73f      	b.n	80083e4 <_dtoa_r+0x394>
 8008564:	2602      	movs	r6, #2
 8008566:	e742      	b.n	80083ee <_dtoa_r+0x39e>
 8008568:	9c07      	ldr	r4, [sp, #28]
 800856a:	9704      	str	r7, [sp, #16]
 800856c:	e761      	b.n	8008432 <_dtoa_r+0x3e2>
 800856e:	4b27      	ldr	r3, [pc, #156]	@ (800860c <_dtoa_r+0x5bc>)
 8008570:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008572:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008576:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800857a:	4454      	add	r4, sl
 800857c:	2900      	cmp	r1, #0
 800857e:	d053      	beq.n	8008628 <_dtoa_r+0x5d8>
 8008580:	4928      	ldr	r1, [pc, #160]	@ (8008624 <_dtoa_r+0x5d4>)
 8008582:	2000      	movs	r0, #0
 8008584:	f7f8 f982 	bl	800088c <__aeabi_ddiv>
 8008588:	4633      	mov	r3, r6
 800858a:	462a      	mov	r2, r5
 800858c:	f7f7 fe9c 	bl	80002c8 <__aeabi_dsub>
 8008590:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008594:	4656      	mov	r6, sl
 8008596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800859a:	f7f8 fafd 	bl	8000b98 <__aeabi_d2iz>
 800859e:	4605      	mov	r5, r0
 80085a0:	f7f7 ffe0 	bl	8000564 <__aeabi_i2d>
 80085a4:	4602      	mov	r2, r0
 80085a6:	460b      	mov	r3, r1
 80085a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085ac:	f7f7 fe8c 	bl	80002c8 <__aeabi_dsub>
 80085b0:	3530      	adds	r5, #48	@ 0x30
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085ba:	f806 5b01 	strb.w	r5, [r6], #1
 80085be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085c2:	f7f8 faab 	bl	8000b1c <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d171      	bne.n	80086ae <_dtoa_r+0x65e>
 80085ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085ce:	4911      	ldr	r1, [pc, #68]	@ (8008614 <_dtoa_r+0x5c4>)
 80085d0:	2000      	movs	r0, #0
 80085d2:	f7f7 fe79 	bl	80002c8 <__aeabi_dsub>
 80085d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80085da:	f7f8 fa9f 	bl	8000b1c <__aeabi_dcmplt>
 80085de:	2800      	cmp	r0, #0
 80085e0:	f040 8095 	bne.w	800870e <_dtoa_r+0x6be>
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	f43f af50 	beq.w	800848a <_dtoa_r+0x43a>
 80085ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80085ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008618 <_dtoa_r+0x5c8>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	f7f8 f821 	bl	8000638 <__aeabi_dmul>
 80085f6:	4b08      	ldr	r3, [pc, #32]	@ (8008618 <_dtoa_r+0x5c8>)
 80085f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80085fc:	2200      	movs	r2, #0
 80085fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008602:	f7f8 f819 	bl	8000638 <__aeabi_dmul>
 8008606:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800860a:	e7c4      	b.n	8008596 <_dtoa_r+0x546>
 800860c:	0800c8b8 	.word	0x0800c8b8
 8008610:	0800c890 	.word	0x0800c890
 8008614:	3ff00000 	.word	0x3ff00000
 8008618:	40240000 	.word	0x40240000
 800861c:	401c0000 	.word	0x401c0000
 8008620:	40140000 	.word	0x40140000
 8008624:	3fe00000 	.word	0x3fe00000
 8008628:	4631      	mov	r1, r6
 800862a:	4628      	mov	r0, r5
 800862c:	f7f8 f804 	bl	8000638 <__aeabi_dmul>
 8008630:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008634:	9415      	str	r4, [sp, #84]	@ 0x54
 8008636:	4656      	mov	r6, sl
 8008638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800863c:	f7f8 faac 	bl	8000b98 <__aeabi_d2iz>
 8008640:	4605      	mov	r5, r0
 8008642:	f7f7 ff8f 	bl	8000564 <__aeabi_i2d>
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800864e:	f7f7 fe3b 	bl	80002c8 <__aeabi_dsub>
 8008652:	3530      	adds	r5, #48	@ 0x30
 8008654:	f806 5b01 	strb.w	r5, [r6], #1
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	42a6      	cmp	r6, r4
 800865e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008662:	f04f 0200 	mov.w	r2, #0
 8008666:	d124      	bne.n	80086b2 <_dtoa_r+0x662>
 8008668:	4bac      	ldr	r3, [pc, #688]	@ (800891c <_dtoa_r+0x8cc>)
 800866a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800866e:	f7f7 fe2d 	bl	80002cc <__adddf3>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800867a:	f7f8 fa6d 	bl	8000b58 <__aeabi_dcmpgt>
 800867e:	2800      	cmp	r0, #0
 8008680:	d145      	bne.n	800870e <_dtoa_r+0x6be>
 8008682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008686:	49a5      	ldr	r1, [pc, #660]	@ (800891c <_dtoa_r+0x8cc>)
 8008688:	2000      	movs	r0, #0
 800868a:	f7f7 fe1d 	bl	80002c8 <__aeabi_dsub>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008696:	f7f8 fa41 	bl	8000b1c <__aeabi_dcmplt>
 800869a:	2800      	cmp	r0, #0
 800869c:	f43f aef5 	beq.w	800848a <_dtoa_r+0x43a>
 80086a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80086a2:	1e73      	subs	r3, r6, #1
 80086a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80086a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80086aa:	2b30      	cmp	r3, #48	@ 0x30
 80086ac:	d0f8      	beq.n	80086a0 <_dtoa_r+0x650>
 80086ae:	9f04      	ldr	r7, [sp, #16]
 80086b0:	e73e      	b.n	8008530 <_dtoa_r+0x4e0>
 80086b2:	4b9b      	ldr	r3, [pc, #620]	@ (8008920 <_dtoa_r+0x8d0>)
 80086b4:	f7f7 ffc0 	bl	8000638 <__aeabi_dmul>
 80086b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086bc:	e7bc      	b.n	8008638 <_dtoa_r+0x5e8>
 80086be:	d10c      	bne.n	80086da <_dtoa_r+0x68a>
 80086c0:	4b98      	ldr	r3, [pc, #608]	@ (8008924 <_dtoa_r+0x8d4>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80086c8:	f7f7 ffb6 	bl	8000638 <__aeabi_dmul>
 80086cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d0:	f7f8 fa38 	bl	8000b44 <__aeabi_dcmpge>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	f000 8157 	beq.w	8008988 <_dtoa_r+0x938>
 80086da:	2400      	movs	r4, #0
 80086dc:	4625      	mov	r5, r4
 80086de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e0:	43db      	mvns	r3, r3
 80086e2:	9304      	str	r3, [sp, #16]
 80086e4:	4656      	mov	r6, sl
 80086e6:	2700      	movs	r7, #0
 80086e8:	4621      	mov	r1, r4
 80086ea:	4658      	mov	r0, fp
 80086ec:	f000 fafe 	bl	8008cec <_Bfree>
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	d0dc      	beq.n	80086ae <_dtoa_r+0x65e>
 80086f4:	b12f      	cbz	r7, 8008702 <_dtoa_r+0x6b2>
 80086f6:	42af      	cmp	r7, r5
 80086f8:	d003      	beq.n	8008702 <_dtoa_r+0x6b2>
 80086fa:	4639      	mov	r1, r7
 80086fc:	4658      	mov	r0, fp
 80086fe:	f000 faf5 	bl	8008cec <_Bfree>
 8008702:	4629      	mov	r1, r5
 8008704:	4658      	mov	r0, fp
 8008706:	f000 faf1 	bl	8008cec <_Bfree>
 800870a:	e7d0      	b.n	80086ae <_dtoa_r+0x65e>
 800870c:	9704      	str	r7, [sp, #16]
 800870e:	4633      	mov	r3, r6
 8008710:	461e      	mov	r6, r3
 8008712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008716:	2a39      	cmp	r2, #57	@ 0x39
 8008718:	d107      	bne.n	800872a <_dtoa_r+0x6da>
 800871a:	459a      	cmp	sl, r3
 800871c:	d1f8      	bne.n	8008710 <_dtoa_r+0x6c0>
 800871e:	9a04      	ldr	r2, [sp, #16]
 8008720:	3201      	adds	r2, #1
 8008722:	9204      	str	r2, [sp, #16]
 8008724:	2230      	movs	r2, #48	@ 0x30
 8008726:	f88a 2000 	strb.w	r2, [sl]
 800872a:	781a      	ldrb	r2, [r3, #0]
 800872c:	3201      	adds	r2, #1
 800872e:	701a      	strb	r2, [r3, #0]
 8008730:	e7bd      	b.n	80086ae <_dtoa_r+0x65e>
 8008732:	4b7b      	ldr	r3, [pc, #492]	@ (8008920 <_dtoa_r+0x8d0>)
 8008734:	2200      	movs	r2, #0
 8008736:	f7f7 ff7f 	bl	8000638 <__aeabi_dmul>
 800873a:	2200      	movs	r2, #0
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	460d      	mov	r5, r1
 8008742:	f7f8 f9e1 	bl	8000b08 <__aeabi_dcmpeq>
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f aebb 	beq.w	80084c2 <_dtoa_r+0x472>
 800874c:	e6f0      	b.n	8008530 <_dtoa_r+0x4e0>
 800874e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008750:	2a00      	cmp	r2, #0
 8008752:	f000 80db 	beq.w	800890c <_dtoa_r+0x8bc>
 8008756:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008758:	2a01      	cmp	r2, #1
 800875a:	f300 80bf 	bgt.w	80088dc <_dtoa_r+0x88c>
 800875e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008760:	2a00      	cmp	r2, #0
 8008762:	f000 80b7 	beq.w	80088d4 <_dtoa_r+0x884>
 8008766:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800876a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800876c:	4646      	mov	r6, r8
 800876e:	9a08      	ldr	r2, [sp, #32]
 8008770:	2101      	movs	r1, #1
 8008772:	441a      	add	r2, r3
 8008774:	4658      	mov	r0, fp
 8008776:	4498      	add	r8, r3
 8008778:	9208      	str	r2, [sp, #32]
 800877a:	f000 fbb5 	bl	8008ee8 <__i2b>
 800877e:	4605      	mov	r5, r0
 8008780:	b15e      	cbz	r6, 800879a <_dtoa_r+0x74a>
 8008782:	9b08      	ldr	r3, [sp, #32]
 8008784:	2b00      	cmp	r3, #0
 8008786:	dd08      	ble.n	800879a <_dtoa_r+0x74a>
 8008788:	42b3      	cmp	r3, r6
 800878a:	9a08      	ldr	r2, [sp, #32]
 800878c:	bfa8      	it	ge
 800878e:	4633      	movge	r3, r6
 8008790:	eba8 0803 	sub.w	r8, r8, r3
 8008794:	1af6      	subs	r6, r6, r3
 8008796:	1ad3      	subs	r3, r2, r3
 8008798:	9308      	str	r3, [sp, #32]
 800879a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800879c:	b1f3      	cbz	r3, 80087dc <_dtoa_r+0x78c>
 800879e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80b7 	beq.w	8008914 <_dtoa_r+0x8c4>
 80087a6:	b18c      	cbz	r4, 80087cc <_dtoa_r+0x77c>
 80087a8:	4629      	mov	r1, r5
 80087aa:	4622      	mov	r2, r4
 80087ac:	4658      	mov	r0, fp
 80087ae:	f000 fc5b 	bl	8009068 <__pow5mult>
 80087b2:	464a      	mov	r2, r9
 80087b4:	4601      	mov	r1, r0
 80087b6:	4605      	mov	r5, r0
 80087b8:	4658      	mov	r0, fp
 80087ba:	f000 fbab 	bl	8008f14 <__multiply>
 80087be:	4649      	mov	r1, r9
 80087c0:	9004      	str	r0, [sp, #16]
 80087c2:	4658      	mov	r0, fp
 80087c4:	f000 fa92 	bl	8008cec <_Bfree>
 80087c8:	9b04      	ldr	r3, [sp, #16]
 80087ca:	4699      	mov	r9, r3
 80087cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ce:	1b1a      	subs	r2, r3, r4
 80087d0:	d004      	beq.n	80087dc <_dtoa_r+0x78c>
 80087d2:	4649      	mov	r1, r9
 80087d4:	4658      	mov	r0, fp
 80087d6:	f000 fc47 	bl	8009068 <__pow5mult>
 80087da:	4681      	mov	r9, r0
 80087dc:	2101      	movs	r1, #1
 80087de:	4658      	mov	r0, fp
 80087e0:	f000 fb82 	bl	8008ee8 <__i2b>
 80087e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e6:	4604      	mov	r4, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 81cf 	beq.w	8008b8c <_dtoa_r+0xb3c>
 80087ee:	461a      	mov	r2, r3
 80087f0:	4601      	mov	r1, r0
 80087f2:	4658      	mov	r0, fp
 80087f4:	f000 fc38 	bl	8009068 <__pow5mult>
 80087f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	4604      	mov	r4, r0
 80087fe:	f300 8095 	bgt.w	800892c <_dtoa_r+0x8dc>
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	2b00      	cmp	r3, #0
 8008806:	f040 8087 	bne.w	8008918 <_dtoa_r+0x8c8>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008810:	2b00      	cmp	r3, #0
 8008812:	f040 8089 	bne.w	8008928 <_dtoa_r+0x8d8>
 8008816:	9b03      	ldr	r3, [sp, #12]
 8008818:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800881c:	0d1b      	lsrs	r3, r3, #20
 800881e:	051b      	lsls	r3, r3, #20
 8008820:	b12b      	cbz	r3, 800882e <_dtoa_r+0x7de>
 8008822:	9b08      	ldr	r3, [sp, #32]
 8008824:	3301      	adds	r3, #1
 8008826:	9308      	str	r3, [sp, #32]
 8008828:	f108 0801 	add.w	r8, r8, #1
 800882c:	2301      	movs	r3, #1
 800882e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008830:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 81b0 	beq.w	8008b98 <_dtoa_r+0xb48>
 8008838:	6923      	ldr	r3, [r4, #16]
 800883a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800883e:	6918      	ldr	r0, [r3, #16]
 8008840:	f000 fb06 	bl	8008e50 <__hi0bits>
 8008844:	f1c0 0020 	rsb	r0, r0, #32
 8008848:	9b08      	ldr	r3, [sp, #32]
 800884a:	4418      	add	r0, r3
 800884c:	f010 001f 	ands.w	r0, r0, #31
 8008850:	d077      	beq.n	8008942 <_dtoa_r+0x8f2>
 8008852:	f1c0 0320 	rsb	r3, r0, #32
 8008856:	2b04      	cmp	r3, #4
 8008858:	dd6b      	ble.n	8008932 <_dtoa_r+0x8e2>
 800885a:	9b08      	ldr	r3, [sp, #32]
 800885c:	f1c0 001c 	rsb	r0, r0, #28
 8008860:	4403      	add	r3, r0
 8008862:	4480      	add	r8, r0
 8008864:	4406      	add	r6, r0
 8008866:	9308      	str	r3, [sp, #32]
 8008868:	f1b8 0f00 	cmp.w	r8, #0
 800886c:	dd05      	ble.n	800887a <_dtoa_r+0x82a>
 800886e:	4649      	mov	r1, r9
 8008870:	4642      	mov	r2, r8
 8008872:	4658      	mov	r0, fp
 8008874:	f000 fc52 	bl	800911c <__lshift>
 8008878:	4681      	mov	r9, r0
 800887a:	9b08      	ldr	r3, [sp, #32]
 800887c:	2b00      	cmp	r3, #0
 800887e:	dd05      	ble.n	800888c <_dtoa_r+0x83c>
 8008880:	4621      	mov	r1, r4
 8008882:	461a      	mov	r2, r3
 8008884:	4658      	mov	r0, fp
 8008886:	f000 fc49 	bl	800911c <__lshift>
 800888a:	4604      	mov	r4, r0
 800888c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800888e:	2b00      	cmp	r3, #0
 8008890:	d059      	beq.n	8008946 <_dtoa_r+0x8f6>
 8008892:	4621      	mov	r1, r4
 8008894:	4648      	mov	r0, r9
 8008896:	f000 fcad 	bl	80091f4 <__mcmp>
 800889a:	2800      	cmp	r0, #0
 800889c:	da53      	bge.n	8008946 <_dtoa_r+0x8f6>
 800889e:	1e7b      	subs	r3, r7, #1
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	4649      	mov	r1, r9
 80088a4:	2300      	movs	r3, #0
 80088a6:	220a      	movs	r2, #10
 80088a8:	4658      	mov	r0, fp
 80088aa:	f000 fa41 	bl	8008d30 <__multadd>
 80088ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088b0:	4681      	mov	r9, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	f000 8172 	beq.w	8008b9c <_dtoa_r+0xb4c>
 80088b8:	2300      	movs	r3, #0
 80088ba:	4629      	mov	r1, r5
 80088bc:	220a      	movs	r2, #10
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 fa36 	bl	8008d30 <__multadd>
 80088c4:	9b00      	ldr	r3, [sp, #0]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	4605      	mov	r5, r0
 80088ca:	dc67      	bgt.n	800899c <_dtoa_r+0x94c>
 80088cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ce:	2b02      	cmp	r3, #2
 80088d0:	dc41      	bgt.n	8008956 <_dtoa_r+0x906>
 80088d2:	e063      	b.n	800899c <_dtoa_r+0x94c>
 80088d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80088da:	e746      	b.n	800876a <_dtoa_r+0x71a>
 80088dc:	9b07      	ldr	r3, [sp, #28]
 80088de:	1e5c      	subs	r4, r3, #1
 80088e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088e2:	42a3      	cmp	r3, r4
 80088e4:	bfbf      	itttt	lt
 80088e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80088e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80088ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80088ec:	1ae3      	sublt	r3, r4, r3
 80088ee:	bfb4      	ite	lt
 80088f0:	18d2      	addlt	r2, r2, r3
 80088f2:	1b1c      	subge	r4, r3, r4
 80088f4:	9b07      	ldr	r3, [sp, #28]
 80088f6:	bfbc      	itt	lt
 80088f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80088fa:	2400      	movlt	r4, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfb5      	itete	lt
 8008900:	eba8 0603 	sublt.w	r6, r8, r3
 8008904:	9b07      	ldrge	r3, [sp, #28]
 8008906:	2300      	movlt	r3, #0
 8008908:	4646      	movge	r6, r8
 800890a:	e730      	b.n	800876e <_dtoa_r+0x71e>
 800890c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800890e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008910:	4646      	mov	r6, r8
 8008912:	e735      	b.n	8008780 <_dtoa_r+0x730>
 8008914:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008916:	e75c      	b.n	80087d2 <_dtoa_r+0x782>
 8008918:	2300      	movs	r3, #0
 800891a:	e788      	b.n	800882e <_dtoa_r+0x7de>
 800891c:	3fe00000 	.word	0x3fe00000
 8008920:	40240000 	.word	0x40240000
 8008924:	40140000 	.word	0x40140000
 8008928:	9b02      	ldr	r3, [sp, #8]
 800892a:	e780      	b.n	800882e <_dtoa_r+0x7de>
 800892c:	2300      	movs	r3, #0
 800892e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008930:	e782      	b.n	8008838 <_dtoa_r+0x7e8>
 8008932:	d099      	beq.n	8008868 <_dtoa_r+0x818>
 8008934:	9a08      	ldr	r2, [sp, #32]
 8008936:	331c      	adds	r3, #28
 8008938:	441a      	add	r2, r3
 800893a:	4498      	add	r8, r3
 800893c:	441e      	add	r6, r3
 800893e:	9208      	str	r2, [sp, #32]
 8008940:	e792      	b.n	8008868 <_dtoa_r+0x818>
 8008942:	4603      	mov	r3, r0
 8008944:	e7f6      	b.n	8008934 <_dtoa_r+0x8e4>
 8008946:	9b07      	ldr	r3, [sp, #28]
 8008948:	9704      	str	r7, [sp, #16]
 800894a:	2b00      	cmp	r3, #0
 800894c:	dc20      	bgt.n	8008990 <_dtoa_r+0x940>
 800894e:	9300      	str	r3, [sp, #0]
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	2b02      	cmp	r3, #2
 8008954:	dd1e      	ble.n	8008994 <_dtoa_r+0x944>
 8008956:	9b00      	ldr	r3, [sp, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	f47f aec0 	bne.w	80086de <_dtoa_r+0x68e>
 800895e:	4621      	mov	r1, r4
 8008960:	2205      	movs	r2, #5
 8008962:	4658      	mov	r0, fp
 8008964:	f000 f9e4 	bl	8008d30 <__multadd>
 8008968:	4601      	mov	r1, r0
 800896a:	4604      	mov	r4, r0
 800896c:	4648      	mov	r0, r9
 800896e:	f000 fc41 	bl	80091f4 <__mcmp>
 8008972:	2800      	cmp	r0, #0
 8008974:	f77f aeb3 	ble.w	80086de <_dtoa_r+0x68e>
 8008978:	4656      	mov	r6, sl
 800897a:	2331      	movs	r3, #49	@ 0x31
 800897c:	f806 3b01 	strb.w	r3, [r6], #1
 8008980:	9b04      	ldr	r3, [sp, #16]
 8008982:	3301      	adds	r3, #1
 8008984:	9304      	str	r3, [sp, #16]
 8008986:	e6ae      	b.n	80086e6 <_dtoa_r+0x696>
 8008988:	9c07      	ldr	r4, [sp, #28]
 800898a:	9704      	str	r7, [sp, #16]
 800898c:	4625      	mov	r5, r4
 800898e:	e7f3      	b.n	8008978 <_dtoa_r+0x928>
 8008990:	9b07      	ldr	r3, [sp, #28]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008996:	2b00      	cmp	r3, #0
 8008998:	f000 8104 	beq.w	8008ba4 <_dtoa_r+0xb54>
 800899c:	2e00      	cmp	r6, #0
 800899e:	dd05      	ble.n	80089ac <_dtoa_r+0x95c>
 80089a0:	4629      	mov	r1, r5
 80089a2:	4632      	mov	r2, r6
 80089a4:	4658      	mov	r0, fp
 80089a6:	f000 fbb9 	bl	800911c <__lshift>
 80089aa:	4605      	mov	r5, r0
 80089ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d05a      	beq.n	8008a68 <_dtoa_r+0xa18>
 80089b2:	6869      	ldr	r1, [r5, #4]
 80089b4:	4658      	mov	r0, fp
 80089b6:	f000 f959 	bl	8008c6c <_Balloc>
 80089ba:	4606      	mov	r6, r0
 80089bc:	b928      	cbnz	r0, 80089ca <_dtoa_r+0x97a>
 80089be:	4b84      	ldr	r3, [pc, #528]	@ (8008bd0 <_dtoa_r+0xb80>)
 80089c0:	4602      	mov	r2, r0
 80089c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80089c6:	f7ff bb5a 	b.w	800807e <_dtoa_r+0x2e>
 80089ca:	692a      	ldr	r2, [r5, #16]
 80089cc:	3202      	adds	r2, #2
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	f105 010c 	add.w	r1, r5, #12
 80089d4:	300c      	adds	r0, #12
 80089d6:	f001 ff35 	bl	800a844 <memcpy>
 80089da:	2201      	movs	r2, #1
 80089dc:	4631      	mov	r1, r6
 80089de:	4658      	mov	r0, fp
 80089e0:	f000 fb9c 	bl	800911c <__lshift>
 80089e4:	f10a 0301 	add.w	r3, sl, #1
 80089e8:	9307      	str	r3, [sp, #28]
 80089ea:	9b00      	ldr	r3, [sp, #0]
 80089ec:	4453      	add	r3, sl
 80089ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089f0:	9b02      	ldr	r3, [sp, #8]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	462f      	mov	r7, r5
 80089f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089fa:	4605      	mov	r5, r0
 80089fc:	9b07      	ldr	r3, [sp, #28]
 80089fe:	4621      	mov	r1, r4
 8008a00:	3b01      	subs	r3, #1
 8008a02:	4648      	mov	r0, r9
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	f7ff fa99 	bl	8007f3c <quorem>
 8008a0a:	4639      	mov	r1, r7
 8008a0c:	9002      	str	r0, [sp, #8]
 8008a0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a12:	4648      	mov	r0, r9
 8008a14:	f000 fbee 	bl	80091f4 <__mcmp>
 8008a18:	462a      	mov	r2, r5
 8008a1a:	9008      	str	r0, [sp, #32]
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	4658      	mov	r0, fp
 8008a20:	f000 fc04 	bl	800922c <__mdiff>
 8008a24:	68c2      	ldr	r2, [r0, #12]
 8008a26:	4606      	mov	r6, r0
 8008a28:	bb02      	cbnz	r2, 8008a6c <_dtoa_r+0xa1c>
 8008a2a:	4601      	mov	r1, r0
 8008a2c:	4648      	mov	r0, r9
 8008a2e:	f000 fbe1 	bl	80091f4 <__mcmp>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4631      	mov	r1, r6
 8008a36:	4658      	mov	r0, fp
 8008a38:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a3a:	f000 f957 	bl	8008cec <_Bfree>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a42:	9e07      	ldr	r6, [sp, #28]
 8008a44:	ea43 0102 	orr.w	r1, r3, r2
 8008a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a4a:	4319      	orrs	r1, r3
 8008a4c:	d110      	bne.n	8008a70 <_dtoa_r+0xa20>
 8008a4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008a52:	d029      	beq.n	8008aa8 <_dtoa_r+0xa58>
 8008a54:	9b08      	ldr	r3, [sp, #32]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	dd02      	ble.n	8008a60 <_dtoa_r+0xa10>
 8008a5a:	9b02      	ldr	r3, [sp, #8]
 8008a5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008a60:	9b00      	ldr	r3, [sp, #0]
 8008a62:	f883 8000 	strb.w	r8, [r3]
 8008a66:	e63f      	b.n	80086e8 <_dtoa_r+0x698>
 8008a68:	4628      	mov	r0, r5
 8008a6a:	e7bb      	b.n	80089e4 <_dtoa_r+0x994>
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	e7e1      	b.n	8008a34 <_dtoa_r+0x9e4>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	db04      	blt.n	8008a80 <_dtoa_r+0xa30>
 8008a76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008a7c:	430b      	orrs	r3, r1
 8008a7e:	d120      	bne.n	8008ac2 <_dtoa_r+0xa72>
 8008a80:	2a00      	cmp	r2, #0
 8008a82:	dded      	ble.n	8008a60 <_dtoa_r+0xa10>
 8008a84:	4649      	mov	r1, r9
 8008a86:	2201      	movs	r2, #1
 8008a88:	4658      	mov	r0, fp
 8008a8a:	f000 fb47 	bl	800911c <__lshift>
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4681      	mov	r9, r0
 8008a92:	f000 fbaf 	bl	80091f4 <__mcmp>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	dc03      	bgt.n	8008aa2 <_dtoa_r+0xa52>
 8008a9a:	d1e1      	bne.n	8008a60 <_dtoa_r+0xa10>
 8008a9c:	f018 0f01 	tst.w	r8, #1
 8008aa0:	d0de      	beq.n	8008a60 <_dtoa_r+0xa10>
 8008aa2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aa6:	d1d8      	bne.n	8008a5a <_dtoa_r+0xa0a>
 8008aa8:	9a00      	ldr	r2, [sp, #0]
 8008aaa:	2339      	movs	r3, #57	@ 0x39
 8008aac:	7013      	strb	r3, [r2, #0]
 8008aae:	4633      	mov	r3, r6
 8008ab0:	461e      	mov	r6, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ab8:	2a39      	cmp	r2, #57	@ 0x39
 8008aba:	d052      	beq.n	8008b62 <_dtoa_r+0xb12>
 8008abc:	3201      	adds	r2, #1
 8008abe:	701a      	strb	r2, [r3, #0]
 8008ac0:	e612      	b.n	80086e8 <_dtoa_r+0x698>
 8008ac2:	2a00      	cmp	r2, #0
 8008ac4:	dd07      	ble.n	8008ad6 <_dtoa_r+0xa86>
 8008ac6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008aca:	d0ed      	beq.n	8008aa8 <_dtoa_r+0xa58>
 8008acc:	9a00      	ldr	r2, [sp, #0]
 8008ace:	f108 0301 	add.w	r3, r8, #1
 8008ad2:	7013      	strb	r3, [r2, #0]
 8008ad4:	e608      	b.n	80086e8 <_dtoa_r+0x698>
 8008ad6:	9b07      	ldr	r3, [sp, #28]
 8008ad8:	9a07      	ldr	r2, [sp, #28]
 8008ada:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d028      	beq.n	8008b36 <_dtoa_r+0xae6>
 8008ae4:	4649      	mov	r1, r9
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	220a      	movs	r2, #10
 8008aea:	4658      	mov	r0, fp
 8008aec:	f000 f920 	bl	8008d30 <__multadd>
 8008af0:	42af      	cmp	r7, r5
 8008af2:	4681      	mov	r9, r0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	f04f 020a 	mov.w	r2, #10
 8008afc:	4639      	mov	r1, r7
 8008afe:	4658      	mov	r0, fp
 8008b00:	d107      	bne.n	8008b12 <_dtoa_r+0xac2>
 8008b02:	f000 f915 	bl	8008d30 <__multadd>
 8008b06:	4607      	mov	r7, r0
 8008b08:	4605      	mov	r5, r0
 8008b0a:	9b07      	ldr	r3, [sp, #28]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	9307      	str	r3, [sp, #28]
 8008b10:	e774      	b.n	80089fc <_dtoa_r+0x9ac>
 8008b12:	f000 f90d 	bl	8008d30 <__multadd>
 8008b16:	4629      	mov	r1, r5
 8008b18:	4607      	mov	r7, r0
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	220a      	movs	r2, #10
 8008b1e:	4658      	mov	r0, fp
 8008b20:	f000 f906 	bl	8008d30 <__multadd>
 8008b24:	4605      	mov	r5, r0
 8008b26:	e7f0      	b.n	8008b0a <_dtoa_r+0xaba>
 8008b28:	9b00      	ldr	r3, [sp, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bfcc      	ite	gt
 8008b2e:	461e      	movgt	r6, r3
 8008b30:	2601      	movle	r6, #1
 8008b32:	4456      	add	r6, sl
 8008b34:	2700      	movs	r7, #0
 8008b36:	4649      	mov	r1, r9
 8008b38:	2201      	movs	r2, #1
 8008b3a:	4658      	mov	r0, fp
 8008b3c:	f000 faee 	bl	800911c <__lshift>
 8008b40:	4621      	mov	r1, r4
 8008b42:	4681      	mov	r9, r0
 8008b44:	f000 fb56 	bl	80091f4 <__mcmp>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	dcb0      	bgt.n	8008aae <_dtoa_r+0xa5e>
 8008b4c:	d102      	bne.n	8008b54 <_dtoa_r+0xb04>
 8008b4e:	f018 0f01 	tst.w	r8, #1
 8008b52:	d1ac      	bne.n	8008aae <_dtoa_r+0xa5e>
 8008b54:	4633      	mov	r3, r6
 8008b56:	461e      	mov	r6, r3
 8008b58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b5c:	2a30      	cmp	r2, #48	@ 0x30
 8008b5e:	d0fa      	beq.n	8008b56 <_dtoa_r+0xb06>
 8008b60:	e5c2      	b.n	80086e8 <_dtoa_r+0x698>
 8008b62:	459a      	cmp	sl, r3
 8008b64:	d1a4      	bne.n	8008ab0 <_dtoa_r+0xa60>
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	9304      	str	r3, [sp, #16]
 8008b6c:	2331      	movs	r3, #49	@ 0x31
 8008b6e:	f88a 3000 	strb.w	r3, [sl]
 8008b72:	e5b9      	b.n	80086e8 <_dtoa_r+0x698>
 8008b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008bd4 <_dtoa_r+0xb84>
 8008b7a:	b11b      	cbz	r3, 8008b84 <_dtoa_r+0xb34>
 8008b7c:	f10a 0308 	add.w	r3, sl, #8
 8008b80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008b82:	6013      	str	r3, [r2, #0]
 8008b84:	4650      	mov	r0, sl
 8008b86:	b019      	add	sp, #100	@ 0x64
 8008b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	f77f ae37 	ble.w	8008802 <_dtoa_r+0x7b2>
 8008b94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b98:	2001      	movs	r0, #1
 8008b9a:	e655      	b.n	8008848 <_dtoa_r+0x7f8>
 8008b9c:	9b00      	ldr	r3, [sp, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f77f aed6 	ble.w	8008950 <_dtoa_r+0x900>
 8008ba4:	4656      	mov	r6, sl
 8008ba6:	4621      	mov	r1, r4
 8008ba8:	4648      	mov	r0, r9
 8008baa:	f7ff f9c7 	bl	8007f3c <quorem>
 8008bae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008bb2:	f806 8b01 	strb.w	r8, [r6], #1
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	eba6 020a 	sub.w	r2, r6, sl
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	ddb3      	ble.n	8008b28 <_dtoa_r+0xad8>
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	220a      	movs	r2, #10
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	f000 f8b2 	bl	8008d30 <__multadd>
 8008bcc:	4681      	mov	r9, r0
 8008bce:	e7ea      	b.n	8008ba6 <_dtoa_r+0xb56>
 8008bd0:	0800c819 	.word	0x0800c819
 8008bd4:	0800c79d 	.word	0x0800c79d

08008bd8 <_free_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4605      	mov	r5, r0
 8008bdc:	2900      	cmp	r1, #0
 8008bde:	d041      	beq.n	8008c64 <_free_r+0x8c>
 8008be0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008be4:	1f0c      	subs	r4, r1, #4
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	bfb8      	it	lt
 8008bea:	18e4      	addlt	r4, r4, r3
 8008bec:	f7fd ffe2 	bl	8006bb4 <__malloc_lock>
 8008bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c68 <_free_r+0x90>)
 8008bf2:	6813      	ldr	r3, [r2, #0]
 8008bf4:	b933      	cbnz	r3, 8008c04 <_free_r+0x2c>
 8008bf6:	6063      	str	r3, [r4, #4]
 8008bf8:	6014      	str	r4, [r2, #0]
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c00:	f7fd bfde 	b.w	8006bc0 <__malloc_unlock>
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	d908      	bls.n	8008c1a <_free_r+0x42>
 8008c08:	6820      	ldr	r0, [r4, #0]
 8008c0a:	1821      	adds	r1, r4, r0
 8008c0c:	428b      	cmp	r3, r1
 8008c0e:	bf01      	itttt	eq
 8008c10:	6819      	ldreq	r1, [r3, #0]
 8008c12:	685b      	ldreq	r3, [r3, #4]
 8008c14:	1809      	addeq	r1, r1, r0
 8008c16:	6021      	streq	r1, [r4, #0]
 8008c18:	e7ed      	b.n	8008bf6 <_free_r+0x1e>
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	b10b      	cbz	r3, 8008c24 <_free_r+0x4c>
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	d9fa      	bls.n	8008c1a <_free_r+0x42>
 8008c24:	6811      	ldr	r1, [r2, #0]
 8008c26:	1850      	adds	r0, r2, r1
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d10b      	bne.n	8008c44 <_free_r+0x6c>
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	4401      	add	r1, r0
 8008c30:	1850      	adds	r0, r2, r1
 8008c32:	4283      	cmp	r3, r0
 8008c34:	6011      	str	r1, [r2, #0]
 8008c36:	d1e0      	bne.n	8008bfa <_free_r+0x22>
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	6053      	str	r3, [r2, #4]
 8008c3e:	4408      	add	r0, r1
 8008c40:	6010      	str	r0, [r2, #0]
 8008c42:	e7da      	b.n	8008bfa <_free_r+0x22>
 8008c44:	d902      	bls.n	8008c4c <_free_r+0x74>
 8008c46:	230c      	movs	r3, #12
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	e7d6      	b.n	8008bfa <_free_r+0x22>
 8008c4c:	6820      	ldr	r0, [r4, #0]
 8008c4e:	1821      	adds	r1, r4, r0
 8008c50:	428b      	cmp	r3, r1
 8008c52:	bf04      	itt	eq
 8008c54:	6819      	ldreq	r1, [r3, #0]
 8008c56:	685b      	ldreq	r3, [r3, #4]
 8008c58:	6063      	str	r3, [r4, #4]
 8008c5a:	bf04      	itt	eq
 8008c5c:	1809      	addeq	r1, r1, r0
 8008c5e:	6021      	streq	r1, [r4, #0]
 8008c60:	6054      	str	r4, [r2, #4]
 8008c62:	e7ca      	b.n	8008bfa <_free_r+0x22>
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	bf00      	nop
 8008c68:	2000052c 	.word	0x2000052c

08008c6c <_Balloc>:
 8008c6c:	b570      	push	{r4, r5, r6, lr}
 8008c6e:	69c6      	ldr	r6, [r0, #28]
 8008c70:	4604      	mov	r4, r0
 8008c72:	460d      	mov	r5, r1
 8008c74:	b976      	cbnz	r6, 8008c94 <_Balloc+0x28>
 8008c76:	2010      	movs	r0, #16
 8008c78:	f7fd feea 	bl	8006a50 <malloc>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	61e0      	str	r0, [r4, #28]
 8008c80:	b920      	cbnz	r0, 8008c8c <_Balloc+0x20>
 8008c82:	4b18      	ldr	r3, [pc, #96]	@ (8008ce4 <_Balloc+0x78>)
 8008c84:	4818      	ldr	r0, [pc, #96]	@ (8008ce8 <_Balloc+0x7c>)
 8008c86:	216b      	movs	r1, #107	@ 0x6b
 8008c88:	f001 fdf2 	bl	800a870 <__assert_func>
 8008c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c90:	6006      	str	r6, [r0, #0]
 8008c92:	60c6      	str	r6, [r0, #12]
 8008c94:	69e6      	ldr	r6, [r4, #28]
 8008c96:	68f3      	ldr	r3, [r6, #12]
 8008c98:	b183      	cbz	r3, 8008cbc <_Balloc+0x50>
 8008c9a:	69e3      	ldr	r3, [r4, #28]
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ca2:	b9b8      	cbnz	r0, 8008cd4 <_Balloc+0x68>
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	fa01 f605 	lsl.w	r6, r1, r5
 8008caa:	1d72      	adds	r2, r6, #5
 8008cac:	0092      	lsls	r2, r2, #2
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f001 fdfc 	bl	800a8ac <_calloc_r>
 8008cb4:	b160      	cbz	r0, 8008cd0 <_Balloc+0x64>
 8008cb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008cba:	e00e      	b.n	8008cda <_Balloc+0x6e>
 8008cbc:	2221      	movs	r2, #33	@ 0x21
 8008cbe:	2104      	movs	r1, #4
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f001 fdf3 	bl	800a8ac <_calloc_r>
 8008cc6:	69e3      	ldr	r3, [r4, #28]
 8008cc8:	60f0      	str	r0, [r6, #12]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e4      	bne.n	8008c9a <_Balloc+0x2e>
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	bd70      	pop	{r4, r5, r6, pc}
 8008cd4:	6802      	ldr	r2, [r0, #0]
 8008cd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cda:	2300      	movs	r3, #0
 8008cdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ce0:	e7f7      	b.n	8008cd2 <_Balloc+0x66>
 8008ce2:	bf00      	nop
 8008ce4:	0800c7aa 	.word	0x0800c7aa
 8008ce8:	0800c82a 	.word	0x0800c82a

08008cec <_Bfree>:
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	69c6      	ldr	r6, [r0, #28]
 8008cf0:	4605      	mov	r5, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	b976      	cbnz	r6, 8008d14 <_Bfree+0x28>
 8008cf6:	2010      	movs	r0, #16
 8008cf8:	f7fd feaa 	bl	8006a50 <malloc>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	61e8      	str	r0, [r5, #28]
 8008d00:	b920      	cbnz	r0, 8008d0c <_Bfree+0x20>
 8008d02:	4b09      	ldr	r3, [pc, #36]	@ (8008d28 <_Bfree+0x3c>)
 8008d04:	4809      	ldr	r0, [pc, #36]	@ (8008d2c <_Bfree+0x40>)
 8008d06:	218f      	movs	r1, #143	@ 0x8f
 8008d08:	f001 fdb2 	bl	800a870 <__assert_func>
 8008d0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d10:	6006      	str	r6, [r0, #0]
 8008d12:	60c6      	str	r6, [r0, #12]
 8008d14:	b13c      	cbz	r4, 8008d26 <_Bfree+0x3a>
 8008d16:	69eb      	ldr	r3, [r5, #28]
 8008d18:	6862      	ldr	r2, [r4, #4]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d20:	6021      	str	r1, [r4, #0]
 8008d22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d26:	bd70      	pop	{r4, r5, r6, pc}
 8008d28:	0800c7aa 	.word	0x0800c7aa
 8008d2c:	0800c82a 	.word	0x0800c82a

08008d30 <__multadd>:
 8008d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d34:	690d      	ldr	r5, [r1, #16]
 8008d36:	4607      	mov	r7, r0
 8008d38:	460c      	mov	r4, r1
 8008d3a:	461e      	mov	r6, r3
 8008d3c:	f101 0c14 	add.w	ip, r1, #20
 8008d40:	2000      	movs	r0, #0
 8008d42:	f8dc 3000 	ldr.w	r3, [ip]
 8008d46:	b299      	uxth	r1, r3
 8008d48:	fb02 6101 	mla	r1, r2, r1, r6
 8008d4c:	0c1e      	lsrs	r6, r3, #16
 8008d4e:	0c0b      	lsrs	r3, r1, #16
 8008d50:	fb02 3306 	mla	r3, r2, r6, r3
 8008d54:	b289      	uxth	r1, r1
 8008d56:	3001      	adds	r0, #1
 8008d58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d5c:	4285      	cmp	r5, r0
 8008d5e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d66:	dcec      	bgt.n	8008d42 <__multadd+0x12>
 8008d68:	b30e      	cbz	r6, 8008dae <__multadd+0x7e>
 8008d6a:	68a3      	ldr	r3, [r4, #8]
 8008d6c:	42ab      	cmp	r3, r5
 8008d6e:	dc19      	bgt.n	8008da4 <__multadd+0x74>
 8008d70:	6861      	ldr	r1, [r4, #4]
 8008d72:	4638      	mov	r0, r7
 8008d74:	3101      	adds	r1, #1
 8008d76:	f7ff ff79 	bl	8008c6c <_Balloc>
 8008d7a:	4680      	mov	r8, r0
 8008d7c:	b928      	cbnz	r0, 8008d8a <__multadd+0x5a>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	4b0c      	ldr	r3, [pc, #48]	@ (8008db4 <__multadd+0x84>)
 8008d82:	480d      	ldr	r0, [pc, #52]	@ (8008db8 <__multadd+0x88>)
 8008d84:	21ba      	movs	r1, #186	@ 0xba
 8008d86:	f001 fd73 	bl	800a870 <__assert_func>
 8008d8a:	6922      	ldr	r2, [r4, #16]
 8008d8c:	3202      	adds	r2, #2
 8008d8e:	f104 010c 	add.w	r1, r4, #12
 8008d92:	0092      	lsls	r2, r2, #2
 8008d94:	300c      	adds	r0, #12
 8008d96:	f001 fd55 	bl	800a844 <memcpy>
 8008d9a:	4621      	mov	r1, r4
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	f7ff ffa5 	bl	8008cec <_Bfree>
 8008da2:	4644      	mov	r4, r8
 8008da4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008da8:	3501      	adds	r5, #1
 8008daa:	615e      	str	r6, [r3, #20]
 8008dac:	6125      	str	r5, [r4, #16]
 8008dae:	4620      	mov	r0, r4
 8008db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db4:	0800c819 	.word	0x0800c819
 8008db8:	0800c82a 	.word	0x0800c82a

08008dbc <__s2b>:
 8008dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc0:	460c      	mov	r4, r1
 8008dc2:	4615      	mov	r5, r2
 8008dc4:	461f      	mov	r7, r3
 8008dc6:	2209      	movs	r2, #9
 8008dc8:	3308      	adds	r3, #8
 8008dca:	4606      	mov	r6, r0
 8008dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	db09      	blt.n	8008dec <__s2b+0x30>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff ff47 	bl	8008c6c <_Balloc>
 8008dde:	b940      	cbnz	r0, 8008df2 <__s2b+0x36>
 8008de0:	4602      	mov	r2, r0
 8008de2:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <__s2b+0x8c>)
 8008de4:	4819      	ldr	r0, [pc, #100]	@ (8008e4c <__s2b+0x90>)
 8008de6:	21d3      	movs	r1, #211	@ 0xd3
 8008de8:	f001 fd42 	bl	800a870 <__assert_func>
 8008dec:	0052      	lsls	r2, r2, #1
 8008dee:	3101      	adds	r1, #1
 8008df0:	e7f0      	b.n	8008dd4 <__s2b+0x18>
 8008df2:	9b08      	ldr	r3, [sp, #32]
 8008df4:	6143      	str	r3, [r0, #20]
 8008df6:	2d09      	cmp	r5, #9
 8008df8:	f04f 0301 	mov.w	r3, #1
 8008dfc:	6103      	str	r3, [r0, #16]
 8008dfe:	dd16      	ble.n	8008e2e <__s2b+0x72>
 8008e00:	f104 0909 	add.w	r9, r4, #9
 8008e04:	46c8      	mov	r8, r9
 8008e06:	442c      	add	r4, r5
 8008e08:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008e0c:	4601      	mov	r1, r0
 8008e0e:	3b30      	subs	r3, #48	@ 0x30
 8008e10:	220a      	movs	r2, #10
 8008e12:	4630      	mov	r0, r6
 8008e14:	f7ff ff8c 	bl	8008d30 <__multadd>
 8008e18:	45a0      	cmp	r8, r4
 8008e1a:	d1f5      	bne.n	8008e08 <__s2b+0x4c>
 8008e1c:	f1a5 0408 	sub.w	r4, r5, #8
 8008e20:	444c      	add	r4, r9
 8008e22:	1b2d      	subs	r5, r5, r4
 8008e24:	1963      	adds	r3, r4, r5
 8008e26:	42bb      	cmp	r3, r7
 8008e28:	db04      	blt.n	8008e34 <__s2b+0x78>
 8008e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e2e:	340a      	adds	r4, #10
 8008e30:	2509      	movs	r5, #9
 8008e32:	e7f6      	b.n	8008e22 <__s2b+0x66>
 8008e34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008e38:	4601      	mov	r1, r0
 8008e3a:	3b30      	subs	r3, #48	@ 0x30
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f7ff ff76 	bl	8008d30 <__multadd>
 8008e44:	e7ee      	b.n	8008e24 <__s2b+0x68>
 8008e46:	bf00      	nop
 8008e48:	0800c819 	.word	0x0800c819
 8008e4c:	0800c82a 	.word	0x0800c82a

08008e50 <__hi0bits>:
 8008e50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008e54:	4603      	mov	r3, r0
 8008e56:	bf36      	itet	cc
 8008e58:	0403      	lslcc	r3, r0, #16
 8008e5a:	2000      	movcs	r0, #0
 8008e5c:	2010      	movcc	r0, #16
 8008e5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e62:	bf3c      	itt	cc
 8008e64:	021b      	lslcc	r3, r3, #8
 8008e66:	3008      	addcc	r0, #8
 8008e68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e6c:	bf3c      	itt	cc
 8008e6e:	011b      	lslcc	r3, r3, #4
 8008e70:	3004      	addcc	r0, #4
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e76:	bf3c      	itt	cc
 8008e78:	009b      	lslcc	r3, r3, #2
 8008e7a:	3002      	addcc	r0, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	db05      	blt.n	8008e8c <__hi0bits+0x3c>
 8008e80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008e84:	f100 0001 	add.w	r0, r0, #1
 8008e88:	bf08      	it	eq
 8008e8a:	2020      	moveq	r0, #32
 8008e8c:	4770      	bx	lr

08008e8e <__lo0bits>:
 8008e8e:	6803      	ldr	r3, [r0, #0]
 8008e90:	4602      	mov	r2, r0
 8008e92:	f013 0007 	ands.w	r0, r3, #7
 8008e96:	d00b      	beq.n	8008eb0 <__lo0bits+0x22>
 8008e98:	07d9      	lsls	r1, r3, #31
 8008e9a:	d421      	bmi.n	8008ee0 <__lo0bits+0x52>
 8008e9c:	0798      	lsls	r0, r3, #30
 8008e9e:	bf49      	itett	mi
 8008ea0:	085b      	lsrmi	r3, r3, #1
 8008ea2:	089b      	lsrpl	r3, r3, #2
 8008ea4:	2001      	movmi	r0, #1
 8008ea6:	6013      	strmi	r3, [r2, #0]
 8008ea8:	bf5c      	itt	pl
 8008eaa:	6013      	strpl	r3, [r2, #0]
 8008eac:	2002      	movpl	r0, #2
 8008eae:	4770      	bx	lr
 8008eb0:	b299      	uxth	r1, r3
 8008eb2:	b909      	cbnz	r1, 8008eb8 <__lo0bits+0x2a>
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	b2d9      	uxtb	r1, r3
 8008eba:	b909      	cbnz	r1, 8008ec0 <__lo0bits+0x32>
 8008ebc:	3008      	adds	r0, #8
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	0719      	lsls	r1, r3, #28
 8008ec2:	bf04      	itt	eq
 8008ec4:	091b      	lsreq	r3, r3, #4
 8008ec6:	3004      	addeq	r0, #4
 8008ec8:	0799      	lsls	r1, r3, #30
 8008eca:	bf04      	itt	eq
 8008ecc:	089b      	lsreq	r3, r3, #2
 8008ece:	3002      	addeq	r0, #2
 8008ed0:	07d9      	lsls	r1, r3, #31
 8008ed2:	d403      	bmi.n	8008edc <__lo0bits+0x4e>
 8008ed4:	085b      	lsrs	r3, r3, #1
 8008ed6:	f100 0001 	add.w	r0, r0, #1
 8008eda:	d003      	beq.n	8008ee4 <__lo0bits+0x56>
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	4770      	bx	lr
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	4770      	bx	lr
 8008ee4:	2020      	movs	r0, #32
 8008ee6:	4770      	bx	lr

08008ee8 <__i2b>:
 8008ee8:	b510      	push	{r4, lr}
 8008eea:	460c      	mov	r4, r1
 8008eec:	2101      	movs	r1, #1
 8008eee:	f7ff febd 	bl	8008c6c <_Balloc>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	b928      	cbnz	r0, 8008f02 <__i2b+0x1a>
 8008ef6:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <__i2b+0x24>)
 8008ef8:	4805      	ldr	r0, [pc, #20]	@ (8008f10 <__i2b+0x28>)
 8008efa:	f240 1145 	movw	r1, #325	@ 0x145
 8008efe:	f001 fcb7 	bl	800a870 <__assert_func>
 8008f02:	2301      	movs	r3, #1
 8008f04:	6144      	str	r4, [r0, #20]
 8008f06:	6103      	str	r3, [r0, #16]
 8008f08:	bd10      	pop	{r4, pc}
 8008f0a:	bf00      	nop
 8008f0c:	0800c819 	.word	0x0800c819
 8008f10:	0800c82a 	.word	0x0800c82a

08008f14 <__multiply>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	4614      	mov	r4, r2
 8008f1a:	690a      	ldr	r2, [r1, #16]
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	bfa8      	it	ge
 8008f22:	4623      	movge	r3, r4
 8008f24:	460f      	mov	r7, r1
 8008f26:	bfa4      	itt	ge
 8008f28:	460c      	movge	r4, r1
 8008f2a:	461f      	movge	r7, r3
 8008f2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008f30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008f34:	68a3      	ldr	r3, [r4, #8]
 8008f36:	6861      	ldr	r1, [r4, #4]
 8008f38:	eb0a 0609 	add.w	r6, sl, r9
 8008f3c:	42b3      	cmp	r3, r6
 8008f3e:	b085      	sub	sp, #20
 8008f40:	bfb8      	it	lt
 8008f42:	3101      	addlt	r1, #1
 8008f44:	f7ff fe92 	bl	8008c6c <_Balloc>
 8008f48:	b930      	cbnz	r0, 8008f58 <__multiply+0x44>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4b44      	ldr	r3, [pc, #272]	@ (8009060 <__multiply+0x14c>)
 8008f4e:	4845      	ldr	r0, [pc, #276]	@ (8009064 <__multiply+0x150>)
 8008f50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008f54:	f001 fc8c 	bl	800a870 <__assert_func>
 8008f58:	f100 0514 	add.w	r5, r0, #20
 8008f5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f60:	462b      	mov	r3, r5
 8008f62:	2200      	movs	r2, #0
 8008f64:	4543      	cmp	r3, r8
 8008f66:	d321      	bcc.n	8008fac <__multiply+0x98>
 8008f68:	f107 0114 	add.w	r1, r7, #20
 8008f6c:	f104 0214 	add.w	r2, r4, #20
 8008f70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008f74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008f78:	9302      	str	r3, [sp, #8]
 8008f7a:	1b13      	subs	r3, r2, r4
 8008f7c:	3b15      	subs	r3, #21
 8008f7e:	f023 0303 	bic.w	r3, r3, #3
 8008f82:	3304      	adds	r3, #4
 8008f84:	f104 0715 	add.w	r7, r4, #21
 8008f88:	42ba      	cmp	r2, r7
 8008f8a:	bf38      	it	cc
 8008f8c:	2304      	movcc	r3, #4
 8008f8e:	9301      	str	r3, [sp, #4]
 8008f90:	9b02      	ldr	r3, [sp, #8]
 8008f92:	9103      	str	r1, [sp, #12]
 8008f94:	428b      	cmp	r3, r1
 8008f96:	d80c      	bhi.n	8008fb2 <__multiply+0x9e>
 8008f98:	2e00      	cmp	r6, #0
 8008f9a:	dd03      	ble.n	8008fa4 <__multiply+0x90>
 8008f9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05b      	beq.n	800905c <__multiply+0x148>
 8008fa4:	6106      	str	r6, [r0, #16]
 8008fa6:	b005      	add	sp, #20
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	f843 2b04 	str.w	r2, [r3], #4
 8008fb0:	e7d8      	b.n	8008f64 <__multiply+0x50>
 8008fb2:	f8b1 a000 	ldrh.w	sl, [r1]
 8008fb6:	f1ba 0f00 	cmp.w	sl, #0
 8008fba:	d024      	beq.n	8009006 <__multiply+0xf2>
 8008fbc:	f104 0e14 	add.w	lr, r4, #20
 8008fc0:	46a9      	mov	r9, r5
 8008fc2:	f04f 0c00 	mov.w	ip, #0
 8008fc6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008fca:	f8d9 3000 	ldr.w	r3, [r9]
 8008fce:	fa1f fb87 	uxth.w	fp, r7
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	fb0a 330b 	mla	r3, sl, fp, r3
 8008fd8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008fdc:	f8d9 7000 	ldr.w	r7, [r9]
 8008fe0:	4463      	add	r3, ip
 8008fe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008fe6:	fb0a c70b 	mla	r7, sl, fp, ip
 8008fea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008fee:	b29b      	uxth	r3, r3
 8008ff0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008ff4:	4572      	cmp	r2, lr
 8008ff6:	f849 3b04 	str.w	r3, [r9], #4
 8008ffa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ffe:	d8e2      	bhi.n	8008fc6 <__multiply+0xb2>
 8009000:	9b01      	ldr	r3, [sp, #4]
 8009002:	f845 c003 	str.w	ip, [r5, r3]
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800900c:	3104      	adds	r1, #4
 800900e:	f1b9 0f00 	cmp.w	r9, #0
 8009012:	d021      	beq.n	8009058 <__multiply+0x144>
 8009014:	682b      	ldr	r3, [r5, #0]
 8009016:	f104 0c14 	add.w	ip, r4, #20
 800901a:	46ae      	mov	lr, r5
 800901c:	f04f 0a00 	mov.w	sl, #0
 8009020:	f8bc b000 	ldrh.w	fp, [ip]
 8009024:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009028:	fb09 770b 	mla	r7, r9, fp, r7
 800902c:	4457      	add	r7, sl
 800902e:	b29b      	uxth	r3, r3
 8009030:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009034:	f84e 3b04 	str.w	r3, [lr], #4
 8009038:	f85c 3b04 	ldr.w	r3, [ip], #4
 800903c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009040:	f8be 3000 	ldrh.w	r3, [lr]
 8009044:	fb09 330a 	mla	r3, r9, sl, r3
 8009048:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800904c:	4562      	cmp	r2, ip
 800904e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009052:	d8e5      	bhi.n	8009020 <__multiply+0x10c>
 8009054:	9f01      	ldr	r7, [sp, #4]
 8009056:	51eb      	str	r3, [r5, r7]
 8009058:	3504      	adds	r5, #4
 800905a:	e799      	b.n	8008f90 <__multiply+0x7c>
 800905c:	3e01      	subs	r6, #1
 800905e:	e79b      	b.n	8008f98 <__multiply+0x84>
 8009060:	0800c819 	.word	0x0800c819
 8009064:	0800c82a 	.word	0x0800c82a

08009068 <__pow5mult>:
 8009068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800906c:	4615      	mov	r5, r2
 800906e:	f012 0203 	ands.w	r2, r2, #3
 8009072:	4607      	mov	r7, r0
 8009074:	460e      	mov	r6, r1
 8009076:	d007      	beq.n	8009088 <__pow5mult+0x20>
 8009078:	4c25      	ldr	r4, [pc, #148]	@ (8009110 <__pow5mult+0xa8>)
 800907a:	3a01      	subs	r2, #1
 800907c:	2300      	movs	r3, #0
 800907e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009082:	f7ff fe55 	bl	8008d30 <__multadd>
 8009086:	4606      	mov	r6, r0
 8009088:	10ad      	asrs	r5, r5, #2
 800908a:	d03d      	beq.n	8009108 <__pow5mult+0xa0>
 800908c:	69fc      	ldr	r4, [r7, #28]
 800908e:	b97c      	cbnz	r4, 80090b0 <__pow5mult+0x48>
 8009090:	2010      	movs	r0, #16
 8009092:	f7fd fcdd 	bl	8006a50 <malloc>
 8009096:	4602      	mov	r2, r0
 8009098:	61f8      	str	r0, [r7, #28]
 800909a:	b928      	cbnz	r0, 80090a8 <__pow5mult+0x40>
 800909c:	4b1d      	ldr	r3, [pc, #116]	@ (8009114 <__pow5mult+0xac>)
 800909e:	481e      	ldr	r0, [pc, #120]	@ (8009118 <__pow5mult+0xb0>)
 80090a0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80090a4:	f001 fbe4 	bl	800a870 <__assert_func>
 80090a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090ac:	6004      	str	r4, [r0, #0]
 80090ae:	60c4      	str	r4, [r0, #12]
 80090b0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80090b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090b8:	b94c      	cbnz	r4, 80090ce <__pow5mult+0x66>
 80090ba:	f240 2171 	movw	r1, #625	@ 0x271
 80090be:	4638      	mov	r0, r7
 80090c0:	f7ff ff12 	bl	8008ee8 <__i2b>
 80090c4:	2300      	movs	r3, #0
 80090c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ca:	4604      	mov	r4, r0
 80090cc:	6003      	str	r3, [r0, #0]
 80090ce:	f04f 0900 	mov.w	r9, #0
 80090d2:	07eb      	lsls	r3, r5, #31
 80090d4:	d50a      	bpl.n	80090ec <__pow5mult+0x84>
 80090d6:	4631      	mov	r1, r6
 80090d8:	4622      	mov	r2, r4
 80090da:	4638      	mov	r0, r7
 80090dc:	f7ff ff1a 	bl	8008f14 <__multiply>
 80090e0:	4631      	mov	r1, r6
 80090e2:	4680      	mov	r8, r0
 80090e4:	4638      	mov	r0, r7
 80090e6:	f7ff fe01 	bl	8008cec <_Bfree>
 80090ea:	4646      	mov	r6, r8
 80090ec:	106d      	asrs	r5, r5, #1
 80090ee:	d00b      	beq.n	8009108 <__pow5mult+0xa0>
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	b938      	cbnz	r0, 8009104 <__pow5mult+0x9c>
 80090f4:	4622      	mov	r2, r4
 80090f6:	4621      	mov	r1, r4
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7ff ff0b 	bl	8008f14 <__multiply>
 80090fe:	6020      	str	r0, [r4, #0]
 8009100:	f8c0 9000 	str.w	r9, [r0]
 8009104:	4604      	mov	r4, r0
 8009106:	e7e4      	b.n	80090d2 <__pow5mult+0x6a>
 8009108:	4630      	mov	r0, r6
 800910a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800910e:	bf00      	nop
 8009110:	0800c884 	.word	0x0800c884
 8009114:	0800c7aa 	.word	0x0800c7aa
 8009118:	0800c82a 	.word	0x0800c82a

0800911c <__lshift>:
 800911c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009120:	460c      	mov	r4, r1
 8009122:	6849      	ldr	r1, [r1, #4]
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800912a:	68a3      	ldr	r3, [r4, #8]
 800912c:	4607      	mov	r7, r0
 800912e:	4691      	mov	r9, r2
 8009130:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009134:	f108 0601 	add.w	r6, r8, #1
 8009138:	42b3      	cmp	r3, r6
 800913a:	db0b      	blt.n	8009154 <__lshift+0x38>
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff fd95 	bl	8008c6c <_Balloc>
 8009142:	4605      	mov	r5, r0
 8009144:	b948      	cbnz	r0, 800915a <__lshift+0x3e>
 8009146:	4602      	mov	r2, r0
 8009148:	4b28      	ldr	r3, [pc, #160]	@ (80091ec <__lshift+0xd0>)
 800914a:	4829      	ldr	r0, [pc, #164]	@ (80091f0 <__lshift+0xd4>)
 800914c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009150:	f001 fb8e 	bl	800a870 <__assert_func>
 8009154:	3101      	adds	r1, #1
 8009156:	005b      	lsls	r3, r3, #1
 8009158:	e7ee      	b.n	8009138 <__lshift+0x1c>
 800915a:	2300      	movs	r3, #0
 800915c:	f100 0114 	add.w	r1, r0, #20
 8009160:	f100 0210 	add.w	r2, r0, #16
 8009164:	4618      	mov	r0, r3
 8009166:	4553      	cmp	r3, sl
 8009168:	db33      	blt.n	80091d2 <__lshift+0xb6>
 800916a:	6920      	ldr	r0, [r4, #16]
 800916c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	f019 091f 	ands.w	r9, r9, #31
 8009178:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800917c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009180:	d02b      	beq.n	80091da <__lshift+0xbe>
 8009182:	f1c9 0e20 	rsb	lr, r9, #32
 8009186:	468a      	mov	sl, r1
 8009188:	2200      	movs	r2, #0
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	fa00 f009 	lsl.w	r0, r0, r9
 8009190:	4310      	orrs	r0, r2
 8009192:	f84a 0b04 	str.w	r0, [sl], #4
 8009196:	f853 2b04 	ldr.w	r2, [r3], #4
 800919a:	459c      	cmp	ip, r3
 800919c:	fa22 f20e 	lsr.w	r2, r2, lr
 80091a0:	d8f3      	bhi.n	800918a <__lshift+0x6e>
 80091a2:	ebac 0304 	sub.w	r3, ip, r4
 80091a6:	3b15      	subs	r3, #21
 80091a8:	f023 0303 	bic.w	r3, r3, #3
 80091ac:	3304      	adds	r3, #4
 80091ae:	f104 0015 	add.w	r0, r4, #21
 80091b2:	4584      	cmp	ip, r0
 80091b4:	bf38      	it	cc
 80091b6:	2304      	movcc	r3, #4
 80091b8:	50ca      	str	r2, [r1, r3]
 80091ba:	b10a      	cbz	r2, 80091c0 <__lshift+0xa4>
 80091bc:	f108 0602 	add.w	r6, r8, #2
 80091c0:	3e01      	subs	r6, #1
 80091c2:	4638      	mov	r0, r7
 80091c4:	612e      	str	r6, [r5, #16]
 80091c6:	4621      	mov	r1, r4
 80091c8:	f7ff fd90 	bl	8008cec <_Bfree>
 80091cc:	4628      	mov	r0, r5
 80091ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091d6:	3301      	adds	r3, #1
 80091d8:	e7c5      	b.n	8009166 <__lshift+0x4a>
 80091da:	3904      	subs	r1, #4
 80091dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80091e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80091e4:	459c      	cmp	ip, r3
 80091e6:	d8f9      	bhi.n	80091dc <__lshift+0xc0>
 80091e8:	e7ea      	b.n	80091c0 <__lshift+0xa4>
 80091ea:	bf00      	nop
 80091ec:	0800c819 	.word	0x0800c819
 80091f0:	0800c82a 	.word	0x0800c82a

080091f4 <__mcmp>:
 80091f4:	690a      	ldr	r2, [r1, #16]
 80091f6:	4603      	mov	r3, r0
 80091f8:	6900      	ldr	r0, [r0, #16]
 80091fa:	1a80      	subs	r0, r0, r2
 80091fc:	b530      	push	{r4, r5, lr}
 80091fe:	d10e      	bne.n	800921e <__mcmp+0x2a>
 8009200:	3314      	adds	r3, #20
 8009202:	3114      	adds	r1, #20
 8009204:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009208:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800920c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009210:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009214:	4295      	cmp	r5, r2
 8009216:	d003      	beq.n	8009220 <__mcmp+0x2c>
 8009218:	d205      	bcs.n	8009226 <__mcmp+0x32>
 800921a:	f04f 30ff 	mov.w	r0, #4294967295
 800921e:	bd30      	pop	{r4, r5, pc}
 8009220:	42a3      	cmp	r3, r4
 8009222:	d3f3      	bcc.n	800920c <__mcmp+0x18>
 8009224:	e7fb      	b.n	800921e <__mcmp+0x2a>
 8009226:	2001      	movs	r0, #1
 8009228:	e7f9      	b.n	800921e <__mcmp+0x2a>
	...

0800922c <__mdiff>:
 800922c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009230:	4689      	mov	r9, r1
 8009232:	4606      	mov	r6, r0
 8009234:	4611      	mov	r1, r2
 8009236:	4648      	mov	r0, r9
 8009238:	4614      	mov	r4, r2
 800923a:	f7ff ffdb 	bl	80091f4 <__mcmp>
 800923e:	1e05      	subs	r5, r0, #0
 8009240:	d112      	bne.n	8009268 <__mdiff+0x3c>
 8009242:	4629      	mov	r1, r5
 8009244:	4630      	mov	r0, r6
 8009246:	f7ff fd11 	bl	8008c6c <_Balloc>
 800924a:	4602      	mov	r2, r0
 800924c:	b928      	cbnz	r0, 800925a <__mdiff+0x2e>
 800924e:	4b3f      	ldr	r3, [pc, #252]	@ (800934c <__mdiff+0x120>)
 8009250:	f240 2137 	movw	r1, #567	@ 0x237
 8009254:	483e      	ldr	r0, [pc, #248]	@ (8009350 <__mdiff+0x124>)
 8009256:	f001 fb0b 	bl	800a870 <__assert_func>
 800925a:	2301      	movs	r3, #1
 800925c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009260:	4610      	mov	r0, r2
 8009262:	b003      	add	sp, #12
 8009264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009268:	bfbc      	itt	lt
 800926a:	464b      	movlt	r3, r9
 800926c:	46a1      	movlt	r9, r4
 800926e:	4630      	mov	r0, r6
 8009270:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009274:	bfba      	itte	lt
 8009276:	461c      	movlt	r4, r3
 8009278:	2501      	movlt	r5, #1
 800927a:	2500      	movge	r5, #0
 800927c:	f7ff fcf6 	bl	8008c6c <_Balloc>
 8009280:	4602      	mov	r2, r0
 8009282:	b918      	cbnz	r0, 800928c <__mdiff+0x60>
 8009284:	4b31      	ldr	r3, [pc, #196]	@ (800934c <__mdiff+0x120>)
 8009286:	f240 2145 	movw	r1, #581	@ 0x245
 800928a:	e7e3      	b.n	8009254 <__mdiff+0x28>
 800928c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009290:	6926      	ldr	r6, [r4, #16]
 8009292:	60c5      	str	r5, [r0, #12]
 8009294:	f109 0310 	add.w	r3, r9, #16
 8009298:	f109 0514 	add.w	r5, r9, #20
 800929c:	f104 0e14 	add.w	lr, r4, #20
 80092a0:	f100 0b14 	add.w	fp, r0, #20
 80092a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80092a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	46d9      	mov	r9, fp
 80092b0:	f04f 0c00 	mov.w	ip, #0
 80092b4:	9b01      	ldr	r3, [sp, #4]
 80092b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80092ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80092be:	9301      	str	r3, [sp, #4]
 80092c0:	fa1f f38a 	uxth.w	r3, sl
 80092c4:	4619      	mov	r1, r3
 80092c6:	b283      	uxth	r3, r0
 80092c8:	1acb      	subs	r3, r1, r3
 80092ca:	0c00      	lsrs	r0, r0, #16
 80092cc:	4463      	add	r3, ip
 80092ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80092d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80092dc:	4576      	cmp	r6, lr
 80092de:	f849 3b04 	str.w	r3, [r9], #4
 80092e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80092e6:	d8e5      	bhi.n	80092b4 <__mdiff+0x88>
 80092e8:	1b33      	subs	r3, r6, r4
 80092ea:	3b15      	subs	r3, #21
 80092ec:	f023 0303 	bic.w	r3, r3, #3
 80092f0:	3415      	adds	r4, #21
 80092f2:	3304      	adds	r3, #4
 80092f4:	42a6      	cmp	r6, r4
 80092f6:	bf38      	it	cc
 80092f8:	2304      	movcc	r3, #4
 80092fa:	441d      	add	r5, r3
 80092fc:	445b      	add	r3, fp
 80092fe:	461e      	mov	r6, r3
 8009300:	462c      	mov	r4, r5
 8009302:	4544      	cmp	r4, r8
 8009304:	d30e      	bcc.n	8009324 <__mdiff+0xf8>
 8009306:	f108 0103 	add.w	r1, r8, #3
 800930a:	1b49      	subs	r1, r1, r5
 800930c:	f021 0103 	bic.w	r1, r1, #3
 8009310:	3d03      	subs	r5, #3
 8009312:	45a8      	cmp	r8, r5
 8009314:	bf38      	it	cc
 8009316:	2100      	movcc	r1, #0
 8009318:	440b      	add	r3, r1
 800931a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800931e:	b191      	cbz	r1, 8009346 <__mdiff+0x11a>
 8009320:	6117      	str	r7, [r2, #16]
 8009322:	e79d      	b.n	8009260 <__mdiff+0x34>
 8009324:	f854 1b04 	ldr.w	r1, [r4], #4
 8009328:	46e6      	mov	lr, ip
 800932a:	0c08      	lsrs	r0, r1, #16
 800932c:	fa1c fc81 	uxtah	ip, ip, r1
 8009330:	4471      	add	r1, lr
 8009332:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009336:	b289      	uxth	r1, r1
 8009338:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800933c:	f846 1b04 	str.w	r1, [r6], #4
 8009340:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009344:	e7dd      	b.n	8009302 <__mdiff+0xd6>
 8009346:	3f01      	subs	r7, #1
 8009348:	e7e7      	b.n	800931a <__mdiff+0xee>
 800934a:	bf00      	nop
 800934c:	0800c819 	.word	0x0800c819
 8009350:	0800c82a 	.word	0x0800c82a

08009354 <__ulp>:
 8009354:	b082      	sub	sp, #8
 8009356:	ed8d 0b00 	vstr	d0, [sp]
 800935a:	9a01      	ldr	r2, [sp, #4]
 800935c:	4b0f      	ldr	r3, [pc, #60]	@ (800939c <__ulp+0x48>)
 800935e:	4013      	ands	r3, r2
 8009360:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc08      	bgt.n	800937a <__ulp+0x26>
 8009368:	425b      	negs	r3, r3
 800936a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800936e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009372:	da04      	bge.n	800937e <__ulp+0x2a>
 8009374:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009378:	4113      	asrs	r3, r2
 800937a:	2200      	movs	r2, #0
 800937c:	e008      	b.n	8009390 <__ulp+0x3c>
 800937e:	f1a2 0314 	sub.w	r3, r2, #20
 8009382:	2b1e      	cmp	r3, #30
 8009384:	bfda      	itte	le
 8009386:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800938a:	40da      	lsrle	r2, r3
 800938c:	2201      	movgt	r2, #1
 800938e:	2300      	movs	r3, #0
 8009390:	4619      	mov	r1, r3
 8009392:	4610      	mov	r0, r2
 8009394:	ec41 0b10 	vmov	d0, r0, r1
 8009398:	b002      	add	sp, #8
 800939a:	4770      	bx	lr
 800939c:	7ff00000 	.word	0x7ff00000

080093a0 <__b2d>:
 80093a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093a4:	6906      	ldr	r6, [r0, #16]
 80093a6:	f100 0814 	add.w	r8, r0, #20
 80093aa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80093ae:	1f37      	subs	r7, r6, #4
 80093b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7ff fd4b 	bl	8008e50 <__hi0bits>
 80093ba:	f1c0 0320 	rsb	r3, r0, #32
 80093be:	280a      	cmp	r0, #10
 80093c0:	600b      	str	r3, [r1, #0]
 80093c2:	491b      	ldr	r1, [pc, #108]	@ (8009430 <__b2d+0x90>)
 80093c4:	dc15      	bgt.n	80093f2 <__b2d+0x52>
 80093c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80093ca:	fa22 f30c 	lsr.w	r3, r2, ip
 80093ce:	45b8      	cmp	r8, r7
 80093d0:	ea43 0501 	orr.w	r5, r3, r1
 80093d4:	bf34      	ite	cc
 80093d6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093da:	2300      	movcs	r3, #0
 80093dc:	3015      	adds	r0, #21
 80093de:	fa02 f000 	lsl.w	r0, r2, r0
 80093e2:	fa23 f30c 	lsr.w	r3, r3, ip
 80093e6:	4303      	orrs	r3, r0
 80093e8:	461c      	mov	r4, r3
 80093ea:	ec45 4b10 	vmov	d0, r4, r5
 80093ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f2:	45b8      	cmp	r8, r7
 80093f4:	bf3a      	itte	cc
 80093f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80093fa:	f1a6 0708 	subcc.w	r7, r6, #8
 80093fe:	2300      	movcs	r3, #0
 8009400:	380b      	subs	r0, #11
 8009402:	d012      	beq.n	800942a <__b2d+0x8a>
 8009404:	f1c0 0120 	rsb	r1, r0, #32
 8009408:	fa23 f401 	lsr.w	r4, r3, r1
 800940c:	4082      	lsls	r2, r0
 800940e:	4322      	orrs	r2, r4
 8009410:	4547      	cmp	r7, r8
 8009412:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009416:	bf8c      	ite	hi
 8009418:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800941c:	2200      	movls	r2, #0
 800941e:	4083      	lsls	r3, r0
 8009420:	40ca      	lsrs	r2, r1
 8009422:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009426:	4313      	orrs	r3, r2
 8009428:	e7de      	b.n	80093e8 <__b2d+0x48>
 800942a:	ea42 0501 	orr.w	r5, r2, r1
 800942e:	e7db      	b.n	80093e8 <__b2d+0x48>
 8009430:	3ff00000 	.word	0x3ff00000

08009434 <__d2b>:
 8009434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009438:	460f      	mov	r7, r1
 800943a:	2101      	movs	r1, #1
 800943c:	ec59 8b10 	vmov	r8, r9, d0
 8009440:	4616      	mov	r6, r2
 8009442:	f7ff fc13 	bl	8008c6c <_Balloc>
 8009446:	4604      	mov	r4, r0
 8009448:	b930      	cbnz	r0, 8009458 <__d2b+0x24>
 800944a:	4602      	mov	r2, r0
 800944c:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <__d2b+0xa8>)
 800944e:	4824      	ldr	r0, [pc, #144]	@ (80094e0 <__d2b+0xac>)
 8009450:	f240 310f 	movw	r1, #783	@ 0x30f
 8009454:	f001 fa0c 	bl	800a870 <__assert_func>
 8009458:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800945c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009460:	b10d      	cbz	r5, 8009466 <__d2b+0x32>
 8009462:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	f1b8 0300 	subs.w	r3, r8, #0
 800946c:	d023      	beq.n	80094b6 <__d2b+0x82>
 800946e:	4668      	mov	r0, sp
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	f7ff fd0c 	bl	8008e8e <__lo0bits>
 8009476:	e9dd 1200 	ldrd	r1, r2, [sp]
 800947a:	b1d0      	cbz	r0, 80094b2 <__d2b+0x7e>
 800947c:	f1c0 0320 	rsb	r3, r0, #32
 8009480:	fa02 f303 	lsl.w	r3, r2, r3
 8009484:	430b      	orrs	r3, r1
 8009486:	40c2      	lsrs	r2, r0
 8009488:	6163      	str	r3, [r4, #20]
 800948a:	9201      	str	r2, [sp, #4]
 800948c:	9b01      	ldr	r3, [sp, #4]
 800948e:	61a3      	str	r3, [r4, #24]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bf0c      	ite	eq
 8009494:	2201      	moveq	r2, #1
 8009496:	2202      	movne	r2, #2
 8009498:	6122      	str	r2, [r4, #16]
 800949a:	b1a5      	cbz	r5, 80094c6 <__d2b+0x92>
 800949c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094a0:	4405      	add	r5, r0
 80094a2:	603d      	str	r5, [r7, #0]
 80094a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094a8:	6030      	str	r0, [r6, #0]
 80094aa:	4620      	mov	r0, r4
 80094ac:	b003      	add	sp, #12
 80094ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094b2:	6161      	str	r1, [r4, #20]
 80094b4:	e7ea      	b.n	800948c <__d2b+0x58>
 80094b6:	a801      	add	r0, sp, #4
 80094b8:	f7ff fce9 	bl	8008e8e <__lo0bits>
 80094bc:	9b01      	ldr	r3, [sp, #4]
 80094be:	6163      	str	r3, [r4, #20]
 80094c0:	3020      	adds	r0, #32
 80094c2:	2201      	movs	r2, #1
 80094c4:	e7e8      	b.n	8009498 <__d2b+0x64>
 80094c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094ce:	6038      	str	r0, [r7, #0]
 80094d0:	6918      	ldr	r0, [r3, #16]
 80094d2:	f7ff fcbd 	bl	8008e50 <__hi0bits>
 80094d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094da:	e7e5      	b.n	80094a8 <__d2b+0x74>
 80094dc:	0800c819 	.word	0x0800c819
 80094e0:	0800c82a 	.word	0x0800c82a

080094e4 <__ratio>:
 80094e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e8:	b085      	sub	sp, #20
 80094ea:	e9cd 1000 	strd	r1, r0, [sp]
 80094ee:	a902      	add	r1, sp, #8
 80094f0:	f7ff ff56 	bl	80093a0 <__b2d>
 80094f4:	9800      	ldr	r0, [sp, #0]
 80094f6:	a903      	add	r1, sp, #12
 80094f8:	ec55 4b10 	vmov	r4, r5, d0
 80094fc:	f7ff ff50 	bl	80093a0 <__b2d>
 8009500:	9b01      	ldr	r3, [sp, #4]
 8009502:	6919      	ldr	r1, [r3, #16]
 8009504:	9b00      	ldr	r3, [sp, #0]
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	1ac9      	subs	r1, r1, r3
 800950a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800950e:	1a9b      	subs	r3, r3, r2
 8009510:	ec5b ab10 	vmov	sl, fp, d0
 8009514:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009518:	2b00      	cmp	r3, #0
 800951a:	bfce      	itee	gt
 800951c:	462a      	movgt	r2, r5
 800951e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009522:	465a      	movle	r2, fp
 8009524:	462f      	mov	r7, r5
 8009526:	46d9      	mov	r9, fp
 8009528:	bfcc      	ite	gt
 800952a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800952e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009532:	464b      	mov	r3, r9
 8009534:	4652      	mov	r2, sl
 8009536:	4620      	mov	r0, r4
 8009538:	4639      	mov	r1, r7
 800953a:	f7f7 f9a7 	bl	800088c <__aeabi_ddiv>
 800953e:	ec41 0b10 	vmov	d0, r0, r1
 8009542:	b005      	add	sp, #20
 8009544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009548 <__copybits>:
 8009548:	3901      	subs	r1, #1
 800954a:	b570      	push	{r4, r5, r6, lr}
 800954c:	1149      	asrs	r1, r1, #5
 800954e:	6914      	ldr	r4, [r2, #16]
 8009550:	3101      	adds	r1, #1
 8009552:	f102 0314 	add.w	r3, r2, #20
 8009556:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800955a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800955e:	1f05      	subs	r5, r0, #4
 8009560:	42a3      	cmp	r3, r4
 8009562:	d30c      	bcc.n	800957e <__copybits+0x36>
 8009564:	1aa3      	subs	r3, r4, r2
 8009566:	3b11      	subs	r3, #17
 8009568:	f023 0303 	bic.w	r3, r3, #3
 800956c:	3211      	adds	r2, #17
 800956e:	42a2      	cmp	r2, r4
 8009570:	bf88      	it	hi
 8009572:	2300      	movhi	r3, #0
 8009574:	4418      	add	r0, r3
 8009576:	2300      	movs	r3, #0
 8009578:	4288      	cmp	r0, r1
 800957a:	d305      	bcc.n	8009588 <__copybits+0x40>
 800957c:	bd70      	pop	{r4, r5, r6, pc}
 800957e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009582:	f845 6f04 	str.w	r6, [r5, #4]!
 8009586:	e7eb      	b.n	8009560 <__copybits+0x18>
 8009588:	f840 3b04 	str.w	r3, [r0], #4
 800958c:	e7f4      	b.n	8009578 <__copybits+0x30>

0800958e <__any_on>:
 800958e:	f100 0214 	add.w	r2, r0, #20
 8009592:	6900      	ldr	r0, [r0, #16]
 8009594:	114b      	asrs	r3, r1, #5
 8009596:	4298      	cmp	r0, r3
 8009598:	b510      	push	{r4, lr}
 800959a:	db11      	blt.n	80095c0 <__any_on+0x32>
 800959c:	dd0a      	ble.n	80095b4 <__any_on+0x26>
 800959e:	f011 011f 	ands.w	r1, r1, #31
 80095a2:	d007      	beq.n	80095b4 <__any_on+0x26>
 80095a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80095a8:	fa24 f001 	lsr.w	r0, r4, r1
 80095ac:	fa00 f101 	lsl.w	r1, r0, r1
 80095b0:	428c      	cmp	r4, r1
 80095b2:	d10b      	bne.n	80095cc <__any_on+0x3e>
 80095b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d803      	bhi.n	80095c4 <__any_on+0x36>
 80095bc:	2000      	movs	r0, #0
 80095be:	bd10      	pop	{r4, pc}
 80095c0:	4603      	mov	r3, r0
 80095c2:	e7f7      	b.n	80095b4 <__any_on+0x26>
 80095c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80095c8:	2900      	cmp	r1, #0
 80095ca:	d0f5      	beq.n	80095b8 <__any_on+0x2a>
 80095cc:	2001      	movs	r0, #1
 80095ce:	e7f6      	b.n	80095be <__any_on+0x30>

080095d0 <sulp>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	4604      	mov	r4, r0
 80095d4:	460d      	mov	r5, r1
 80095d6:	ec45 4b10 	vmov	d0, r4, r5
 80095da:	4616      	mov	r6, r2
 80095dc:	f7ff feba 	bl	8009354 <__ulp>
 80095e0:	ec51 0b10 	vmov	r0, r1, d0
 80095e4:	b17e      	cbz	r6, 8009606 <sulp+0x36>
 80095e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80095ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dd09      	ble.n	8009606 <sulp+0x36>
 80095f2:	051b      	lsls	r3, r3, #20
 80095f4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80095f8:	2400      	movs	r4, #0
 80095fa:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80095fe:	4622      	mov	r2, r4
 8009600:	462b      	mov	r3, r5
 8009602:	f7f7 f819 	bl	8000638 <__aeabi_dmul>
 8009606:	ec41 0b10 	vmov	d0, r0, r1
 800960a:	bd70      	pop	{r4, r5, r6, pc}
 800960c:	0000      	movs	r0, r0
	...

08009610 <_strtod_l>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	b09f      	sub	sp, #124	@ 0x7c
 8009616:	460c      	mov	r4, r1
 8009618:	9217      	str	r2, [sp, #92]	@ 0x5c
 800961a:	2200      	movs	r2, #0
 800961c:	921a      	str	r2, [sp, #104]	@ 0x68
 800961e:	9005      	str	r0, [sp, #20]
 8009620:	f04f 0a00 	mov.w	sl, #0
 8009624:	f04f 0b00 	mov.w	fp, #0
 8009628:	460a      	mov	r2, r1
 800962a:	9219      	str	r2, [sp, #100]	@ 0x64
 800962c:	7811      	ldrb	r1, [r2, #0]
 800962e:	292b      	cmp	r1, #43	@ 0x2b
 8009630:	d04a      	beq.n	80096c8 <_strtod_l+0xb8>
 8009632:	d838      	bhi.n	80096a6 <_strtod_l+0x96>
 8009634:	290d      	cmp	r1, #13
 8009636:	d832      	bhi.n	800969e <_strtod_l+0x8e>
 8009638:	2908      	cmp	r1, #8
 800963a:	d832      	bhi.n	80096a2 <_strtod_l+0x92>
 800963c:	2900      	cmp	r1, #0
 800963e:	d03b      	beq.n	80096b8 <_strtod_l+0xa8>
 8009640:	2200      	movs	r2, #0
 8009642:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009644:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009646:	782a      	ldrb	r2, [r5, #0]
 8009648:	2a30      	cmp	r2, #48	@ 0x30
 800964a:	f040 80b3 	bne.w	80097b4 <_strtod_l+0x1a4>
 800964e:	786a      	ldrb	r2, [r5, #1]
 8009650:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009654:	2a58      	cmp	r2, #88	@ 0x58
 8009656:	d16e      	bne.n	8009736 <_strtod_l+0x126>
 8009658:	9302      	str	r3, [sp, #8]
 800965a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4a8e      	ldr	r2, [pc, #568]	@ (800989c <_strtod_l+0x28c>)
 8009664:	9805      	ldr	r0, [sp, #20]
 8009666:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009668:	a919      	add	r1, sp, #100	@ 0x64
 800966a:	f001 f99b 	bl	800a9a4 <__gethex>
 800966e:	f010 060f 	ands.w	r6, r0, #15
 8009672:	4604      	mov	r4, r0
 8009674:	d005      	beq.n	8009682 <_strtod_l+0x72>
 8009676:	2e06      	cmp	r6, #6
 8009678:	d128      	bne.n	80096cc <_strtod_l+0xbc>
 800967a:	3501      	adds	r5, #1
 800967c:	2300      	movs	r3, #0
 800967e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 858e 	bne.w	800a1a6 <_strtod_l+0xb96>
 800968a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800968c:	b1cb      	cbz	r3, 80096c2 <_strtod_l+0xb2>
 800968e:	4652      	mov	r2, sl
 8009690:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009694:	ec43 2b10 	vmov	d0, r2, r3
 8009698:	b01f      	add	sp, #124	@ 0x7c
 800969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969e:	2920      	cmp	r1, #32
 80096a0:	d1ce      	bne.n	8009640 <_strtod_l+0x30>
 80096a2:	3201      	adds	r2, #1
 80096a4:	e7c1      	b.n	800962a <_strtod_l+0x1a>
 80096a6:	292d      	cmp	r1, #45	@ 0x2d
 80096a8:	d1ca      	bne.n	8009640 <_strtod_l+0x30>
 80096aa:	2101      	movs	r1, #1
 80096ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 80096ae:	1c51      	adds	r1, r2, #1
 80096b0:	9119      	str	r1, [sp, #100]	@ 0x64
 80096b2:	7852      	ldrb	r2, [r2, #1]
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	d1c5      	bne.n	8009644 <_strtod_l+0x34>
 80096b8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80096ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f040 8570 	bne.w	800a1a2 <_strtod_l+0xb92>
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e7e5      	b.n	8009694 <_strtod_l+0x84>
 80096c8:	2100      	movs	r1, #0
 80096ca:	e7ef      	b.n	80096ac <_strtod_l+0x9c>
 80096cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096ce:	b13a      	cbz	r2, 80096e0 <_strtod_l+0xd0>
 80096d0:	2135      	movs	r1, #53	@ 0x35
 80096d2:	a81c      	add	r0, sp, #112	@ 0x70
 80096d4:	f7ff ff38 	bl	8009548 <__copybits>
 80096d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096da:	9805      	ldr	r0, [sp, #20]
 80096dc:	f7ff fb06 	bl	8008cec <_Bfree>
 80096e0:	3e01      	subs	r6, #1
 80096e2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80096e4:	2e04      	cmp	r6, #4
 80096e6:	d806      	bhi.n	80096f6 <_strtod_l+0xe6>
 80096e8:	e8df f006 	tbb	[pc, r6]
 80096ec:	201d0314 	.word	0x201d0314
 80096f0:	14          	.byte	0x14
 80096f1:	00          	.byte	0x00
 80096f2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80096f6:	05e1      	lsls	r1, r4, #23
 80096f8:	bf48      	it	mi
 80096fa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80096fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009702:	0d1b      	lsrs	r3, r3, #20
 8009704:	051b      	lsls	r3, r3, #20
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1bb      	bne.n	8009682 <_strtod_l+0x72>
 800970a:	f7fe fbe3 	bl	8007ed4 <__errno>
 800970e:	2322      	movs	r3, #34	@ 0x22
 8009710:	6003      	str	r3, [r0, #0]
 8009712:	e7b6      	b.n	8009682 <_strtod_l+0x72>
 8009714:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009718:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800971c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009720:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009724:	e7e7      	b.n	80096f6 <_strtod_l+0xe6>
 8009726:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80098a4 <_strtod_l+0x294>
 800972a:	e7e4      	b.n	80096f6 <_strtod_l+0xe6>
 800972c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009730:	f04f 3aff 	mov.w	sl, #4294967295
 8009734:	e7df      	b.n	80096f6 <_strtod_l+0xe6>
 8009736:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009738:	1c5a      	adds	r2, r3, #1
 800973a:	9219      	str	r2, [sp, #100]	@ 0x64
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b30      	cmp	r3, #48	@ 0x30
 8009740:	d0f9      	beq.n	8009736 <_strtod_l+0x126>
 8009742:	2b00      	cmp	r3, #0
 8009744:	d09d      	beq.n	8009682 <_strtod_l+0x72>
 8009746:	2301      	movs	r3, #1
 8009748:	9309      	str	r3, [sp, #36]	@ 0x24
 800974a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800974c:	930c      	str	r3, [sp, #48]	@ 0x30
 800974e:	2300      	movs	r3, #0
 8009750:	9308      	str	r3, [sp, #32]
 8009752:	930a      	str	r3, [sp, #40]	@ 0x28
 8009754:	461f      	mov	r7, r3
 8009756:	220a      	movs	r2, #10
 8009758:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800975a:	7805      	ldrb	r5, [r0, #0]
 800975c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009760:	b2d9      	uxtb	r1, r3
 8009762:	2909      	cmp	r1, #9
 8009764:	d928      	bls.n	80097b8 <_strtod_l+0x1a8>
 8009766:	494e      	ldr	r1, [pc, #312]	@ (80098a0 <_strtod_l+0x290>)
 8009768:	2201      	movs	r2, #1
 800976a:	f001 f837 	bl	800a7dc <strncmp>
 800976e:	2800      	cmp	r0, #0
 8009770:	d032      	beq.n	80097d8 <_strtod_l+0x1c8>
 8009772:	2000      	movs	r0, #0
 8009774:	462a      	mov	r2, r5
 8009776:	4681      	mov	r9, r0
 8009778:	463d      	mov	r5, r7
 800977a:	4603      	mov	r3, r0
 800977c:	2a65      	cmp	r2, #101	@ 0x65
 800977e:	d001      	beq.n	8009784 <_strtod_l+0x174>
 8009780:	2a45      	cmp	r2, #69	@ 0x45
 8009782:	d114      	bne.n	80097ae <_strtod_l+0x19e>
 8009784:	b91d      	cbnz	r5, 800978e <_strtod_l+0x17e>
 8009786:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009788:	4302      	orrs	r2, r0
 800978a:	d095      	beq.n	80096b8 <_strtod_l+0xa8>
 800978c:	2500      	movs	r5, #0
 800978e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009790:	1c62      	adds	r2, r4, #1
 8009792:	9219      	str	r2, [sp, #100]	@ 0x64
 8009794:	7862      	ldrb	r2, [r4, #1]
 8009796:	2a2b      	cmp	r2, #43	@ 0x2b
 8009798:	d077      	beq.n	800988a <_strtod_l+0x27a>
 800979a:	2a2d      	cmp	r2, #45	@ 0x2d
 800979c:	d07b      	beq.n	8009896 <_strtod_l+0x286>
 800979e:	f04f 0c00 	mov.w	ip, #0
 80097a2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80097a6:	2909      	cmp	r1, #9
 80097a8:	f240 8082 	bls.w	80098b0 <_strtod_l+0x2a0>
 80097ac:	9419      	str	r4, [sp, #100]	@ 0x64
 80097ae:	f04f 0800 	mov.w	r8, #0
 80097b2:	e0a2      	b.n	80098fa <_strtod_l+0x2ea>
 80097b4:	2300      	movs	r3, #0
 80097b6:	e7c7      	b.n	8009748 <_strtod_l+0x138>
 80097b8:	2f08      	cmp	r7, #8
 80097ba:	bfd5      	itete	le
 80097bc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80097be:	9908      	ldrgt	r1, [sp, #32]
 80097c0:	fb02 3301 	mlale	r3, r2, r1, r3
 80097c4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80097c8:	f100 0001 	add.w	r0, r0, #1
 80097cc:	bfd4      	ite	le
 80097ce:	930a      	strle	r3, [sp, #40]	@ 0x28
 80097d0:	9308      	strgt	r3, [sp, #32]
 80097d2:	3701      	adds	r7, #1
 80097d4:	9019      	str	r0, [sp, #100]	@ 0x64
 80097d6:	e7bf      	b.n	8009758 <_strtod_l+0x148>
 80097d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097da:	1c5a      	adds	r2, r3, #1
 80097dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80097de:	785a      	ldrb	r2, [r3, #1]
 80097e0:	b37f      	cbz	r7, 8009842 <_strtod_l+0x232>
 80097e2:	4681      	mov	r9, r0
 80097e4:	463d      	mov	r5, r7
 80097e6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80097ea:	2b09      	cmp	r3, #9
 80097ec:	d912      	bls.n	8009814 <_strtod_l+0x204>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e7c4      	b.n	800977c <_strtod_l+0x16c>
 80097f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	9219      	str	r2, [sp, #100]	@ 0x64
 80097f8:	785a      	ldrb	r2, [r3, #1]
 80097fa:	3001      	adds	r0, #1
 80097fc:	2a30      	cmp	r2, #48	@ 0x30
 80097fe:	d0f8      	beq.n	80097f2 <_strtod_l+0x1e2>
 8009800:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009804:	2b08      	cmp	r3, #8
 8009806:	f200 84d3 	bhi.w	800a1b0 <_strtod_l+0xba0>
 800980a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800980c:	930c      	str	r3, [sp, #48]	@ 0x30
 800980e:	4681      	mov	r9, r0
 8009810:	2000      	movs	r0, #0
 8009812:	4605      	mov	r5, r0
 8009814:	3a30      	subs	r2, #48	@ 0x30
 8009816:	f100 0301 	add.w	r3, r0, #1
 800981a:	d02a      	beq.n	8009872 <_strtod_l+0x262>
 800981c:	4499      	add	r9, r3
 800981e:	eb00 0c05 	add.w	ip, r0, r5
 8009822:	462b      	mov	r3, r5
 8009824:	210a      	movs	r1, #10
 8009826:	4563      	cmp	r3, ip
 8009828:	d10d      	bne.n	8009846 <_strtod_l+0x236>
 800982a:	1c69      	adds	r1, r5, #1
 800982c:	4401      	add	r1, r0
 800982e:	4428      	add	r0, r5
 8009830:	2808      	cmp	r0, #8
 8009832:	dc16      	bgt.n	8009862 <_strtod_l+0x252>
 8009834:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009836:	230a      	movs	r3, #10
 8009838:	fb03 2300 	mla	r3, r3, r0, r2
 800983c:	930a      	str	r3, [sp, #40]	@ 0x28
 800983e:	2300      	movs	r3, #0
 8009840:	e018      	b.n	8009874 <_strtod_l+0x264>
 8009842:	4638      	mov	r0, r7
 8009844:	e7da      	b.n	80097fc <_strtod_l+0x1ec>
 8009846:	2b08      	cmp	r3, #8
 8009848:	f103 0301 	add.w	r3, r3, #1
 800984c:	dc03      	bgt.n	8009856 <_strtod_l+0x246>
 800984e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009850:	434e      	muls	r6, r1
 8009852:	960a      	str	r6, [sp, #40]	@ 0x28
 8009854:	e7e7      	b.n	8009826 <_strtod_l+0x216>
 8009856:	2b10      	cmp	r3, #16
 8009858:	bfde      	ittt	le
 800985a:	9e08      	ldrle	r6, [sp, #32]
 800985c:	434e      	mulle	r6, r1
 800985e:	9608      	strle	r6, [sp, #32]
 8009860:	e7e1      	b.n	8009826 <_strtod_l+0x216>
 8009862:	280f      	cmp	r0, #15
 8009864:	dceb      	bgt.n	800983e <_strtod_l+0x22e>
 8009866:	9808      	ldr	r0, [sp, #32]
 8009868:	230a      	movs	r3, #10
 800986a:	fb03 2300 	mla	r3, r3, r0, r2
 800986e:	9308      	str	r3, [sp, #32]
 8009870:	e7e5      	b.n	800983e <_strtod_l+0x22e>
 8009872:	4629      	mov	r1, r5
 8009874:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009876:	1c50      	adds	r0, r2, #1
 8009878:	9019      	str	r0, [sp, #100]	@ 0x64
 800987a:	7852      	ldrb	r2, [r2, #1]
 800987c:	4618      	mov	r0, r3
 800987e:	460d      	mov	r5, r1
 8009880:	e7b1      	b.n	80097e6 <_strtod_l+0x1d6>
 8009882:	f04f 0900 	mov.w	r9, #0
 8009886:	2301      	movs	r3, #1
 8009888:	e77d      	b.n	8009786 <_strtod_l+0x176>
 800988a:	f04f 0c00 	mov.w	ip, #0
 800988e:	1ca2      	adds	r2, r4, #2
 8009890:	9219      	str	r2, [sp, #100]	@ 0x64
 8009892:	78a2      	ldrb	r2, [r4, #2]
 8009894:	e785      	b.n	80097a2 <_strtod_l+0x192>
 8009896:	f04f 0c01 	mov.w	ip, #1
 800989a:	e7f8      	b.n	800988e <_strtod_l+0x27e>
 800989c:	0800c998 	.word	0x0800c998
 80098a0:	0800c980 	.word	0x0800c980
 80098a4:	7ff00000 	.word	0x7ff00000
 80098a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098aa:	1c51      	adds	r1, r2, #1
 80098ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80098ae:	7852      	ldrb	r2, [r2, #1]
 80098b0:	2a30      	cmp	r2, #48	@ 0x30
 80098b2:	d0f9      	beq.n	80098a8 <_strtod_l+0x298>
 80098b4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80098b8:	2908      	cmp	r1, #8
 80098ba:	f63f af78 	bhi.w	80097ae <_strtod_l+0x19e>
 80098be:	3a30      	subs	r2, #48	@ 0x30
 80098c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80098c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80098c6:	f04f 080a 	mov.w	r8, #10
 80098ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80098cc:	1c56      	adds	r6, r2, #1
 80098ce:	9619      	str	r6, [sp, #100]	@ 0x64
 80098d0:	7852      	ldrb	r2, [r2, #1]
 80098d2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80098d6:	f1be 0f09 	cmp.w	lr, #9
 80098da:	d939      	bls.n	8009950 <_strtod_l+0x340>
 80098dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80098de:	1a76      	subs	r6, r6, r1
 80098e0:	2e08      	cmp	r6, #8
 80098e2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80098e6:	dc03      	bgt.n	80098f0 <_strtod_l+0x2e0>
 80098e8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80098ea:	4588      	cmp	r8, r1
 80098ec:	bfa8      	it	ge
 80098ee:	4688      	movge	r8, r1
 80098f0:	f1bc 0f00 	cmp.w	ip, #0
 80098f4:	d001      	beq.n	80098fa <_strtod_l+0x2ea>
 80098f6:	f1c8 0800 	rsb	r8, r8, #0
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	d14e      	bne.n	800999c <_strtod_l+0x38c>
 80098fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009900:	4308      	orrs	r0, r1
 8009902:	f47f aebe 	bne.w	8009682 <_strtod_l+0x72>
 8009906:	2b00      	cmp	r3, #0
 8009908:	f47f aed6 	bne.w	80096b8 <_strtod_l+0xa8>
 800990c:	2a69      	cmp	r2, #105	@ 0x69
 800990e:	d028      	beq.n	8009962 <_strtod_l+0x352>
 8009910:	dc25      	bgt.n	800995e <_strtod_l+0x34e>
 8009912:	2a49      	cmp	r2, #73	@ 0x49
 8009914:	d025      	beq.n	8009962 <_strtod_l+0x352>
 8009916:	2a4e      	cmp	r2, #78	@ 0x4e
 8009918:	f47f aece 	bne.w	80096b8 <_strtod_l+0xa8>
 800991c:	499b      	ldr	r1, [pc, #620]	@ (8009b8c <_strtod_l+0x57c>)
 800991e:	a819      	add	r0, sp, #100	@ 0x64
 8009920:	f001 fa62 	bl	800ade8 <__match>
 8009924:	2800      	cmp	r0, #0
 8009926:	f43f aec7 	beq.w	80096b8 <_strtod_l+0xa8>
 800992a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b28      	cmp	r3, #40	@ 0x28
 8009930:	d12e      	bne.n	8009990 <_strtod_l+0x380>
 8009932:	4997      	ldr	r1, [pc, #604]	@ (8009b90 <_strtod_l+0x580>)
 8009934:	aa1c      	add	r2, sp, #112	@ 0x70
 8009936:	a819      	add	r0, sp, #100	@ 0x64
 8009938:	f001 fa6a 	bl	800ae10 <__hexnan>
 800993c:	2805      	cmp	r0, #5
 800993e:	d127      	bne.n	8009990 <_strtod_l+0x380>
 8009940:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009942:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009946:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800994a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800994e:	e698      	b.n	8009682 <_strtod_l+0x72>
 8009950:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009952:	fb08 2101 	mla	r1, r8, r1, r2
 8009956:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800995a:	920e      	str	r2, [sp, #56]	@ 0x38
 800995c:	e7b5      	b.n	80098ca <_strtod_l+0x2ba>
 800995e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009960:	e7da      	b.n	8009918 <_strtod_l+0x308>
 8009962:	498c      	ldr	r1, [pc, #560]	@ (8009b94 <_strtod_l+0x584>)
 8009964:	a819      	add	r0, sp, #100	@ 0x64
 8009966:	f001 fa3f 	bl	800ade8 <__match>
 800996a:	2800      	cmp	r0, #0
 800996c:	f43f aea4 	beq.w	80096b8 <_strtod_l+0xa8>
 8009970:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009972:	4989      	ldr	r1, [pc, #548]	@ (8009b98 <_strtod_l+0x588>)
 8009974:	3b01      	subs	r3, #1
 8009976:	a819      	add	r0, sp, #100	@ 0x64
 8009978:	9319      	str	r3, [sp, #100]	@ 0x64
 800997a:	f001 fa35 	bl	800ade8 <__match>
 800997e:	b910      	cbnz	r0, 8009986 <_strtod_l+0x376>
 8009980:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009982:	3301      	adds	r3, #1
 8009984:	9319      	str	r3, [sp, #100]	@ 0x64
 8009986:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ba8 <_strtod_l+0x598>
 800998a:	f04f 0a00 	mov.w	sl, #0
 800998e:	e678      	b.n	8009682 <_strtod_l+0x72>
 8009990:	4882      	ldr	r0, [pc, #520]	@ (8009b9c <_strtod_l+0x58c>)
 8009992:	f000 ff65 	bl	800a860 <nan>
 8009996:	ec5b ab10 	vmov	sl, fp, d0
 800999a:	e672      	b.n	8009682 <_strtod_l+0x72>
 800999c:	eba8 0309 	sub.w	r3, r8, r9
 80099a0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80099a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a4:	2f00      	cmp	r7, #0
 80099a6:	bf08      	it	eq
 80099a8:	462f      	moveq	r7, r5
 80099aa:	2d10      	cmp	r5, #16
 80099ac:	462c      	mov	r4, r5
 80099ae:	bfa8      	it	ge
 80099b0:	2410      	movge	r4, #16
 80099b2:	f7f6 fdc7 	bl	8000544 <__aeabi_ui2d>
 80099b6:	2d09      	cmp	r5, #9
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	dc13      	bgt.n	80099e6 <_strtod_l+0x3d6>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	f43f ae5e 	beq.w	8009682 <_strtod_l+0x72>
 80099c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c8:	dd78      	ble.n	8009abc <_strtod_l+0x4ac>
 80099ca:	2b16      	cmp	r3, #22
 80099cc:	dc5f      	bgt.n	8009a8e <_strtod_l+0x47e>
 80099ce:	4974      	ldr	r1, [pc, #464]	@ (8009ba0 <_strtod_l+0x590>)
 80099d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80099d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099d8:	4652      	mov	r2, sl
 80099da:	465b      	mov	r3, fp
 80099dc:	f7f6 fe2c 	bl	8000638 <__aeabi_dmul>
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	e64d      	b.n	8009682 <_strtod_l+0x72>
 80099e6:	4b6e      	ldr	r3, [pc, #440]	@ (8009ba0 <_strtod_l+0x590>)
 80099e8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099ec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80099f0:	f7f6 fe22 	bl	8000638 <__aeabi_dmul>
 80099f4:	4682      	mov	sl, r0
 80099f6:	9808      	ldr	r0, [sp, #32]
 80099f8:	468b      	mov	fp, r1
 80099fa:	f7f6 fda3 	bl	8000544 <__aeabi_ui2d>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	4650      	mov	r0, sl
 8009a04:	4659      	mov	r1, fp
 8009a06:	f7f6 fc61 	bl	80002cc <__adddf3>
 8009a0a:	2d0f      	cmp	r5, #15
 8009a0c:	4682      	mov	sl, r0
 8009a0e:	468b      	mov	fp, r1
 8009a10:	ddd5      	ble.n	80099be <_strtod_l+0x3ae>
 8009a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a14:	1b2c      	subs	r4, r5, r4
 8009a16:	441c      	add	r4, r3
 8009a18:	2c00      	cmp	r4, #0
 8009a1a:	f340 8096 	ble.w	8009b4a <_strtod_l+0x53a>
 8009a1e:	f014 030f 	ands.w	r3, r4, #15
 8009a22:	d00a      	beq.n	8009a3a <_strtod_l+0x42a>
 8009a24:	495e      	ldr	r1, [pc, #376]	@ (8009ba0 <_strtod_l+0x590>)
 8009a26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009a2a:	4652      	mov	r2, sl
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a32:	f7f6 fe01 	bl	8000638 <__aeabi_dmul>
 8009a36:	4682      	mov	sl, r0
 8009a38:	468b      	mov	fp, r1
 8009a3a:	f034 040f 	bics.w	r4, r4, #15
 8009a3e:	d073      	beq.n	8009b28 <_strtod_l+0x518>
 8009a40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009a44:	dd48      	ble.n	8009ad8 <_strtod_l+0x4c8>
 8009a46:	2400      	movs	r4, #0
 8009a48:	46a0      	mov	r8, r4
 8009a4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a4c:	46a1      	mov	r9, r4
 8009a4e:	9a05      	ldr	r2, [sp, #20]
 8009a50:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ba8 <_strtod_l+0x598>
 8009a54:	2322      	movs	r3, #34	@ 0x22
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	f04f 0a00 	mov.w	sl, #0
 8009a5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f43f ae0f 	beq.w	8009682 <_strtod_l+0x72>
 8009a64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009a66:	9805      	ldr	r0, [sp, #20]
 8009a68:	f7ff f940 	bl	8008cec <_Bfree>
 8009a6c:	9805      	ldr	r0, [sp, #20]
 8009a6e:	4649      	mov	r1, r9
 8009a70:	f7ff f93c 	bl	8008cec <_Bfree>
 8009a74:	9805      	ldr	r0, [sp, #20]
 8009a76:	4641      	mov	r1, r8
 8009a78:	f7ff f938 	bl	8008cec <_Bfree>
 8009a7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a7e:	9805      	ldr	r0, [sp, #20]
 8009a80:	f7ff f934 	bl	8008cec <_Bfree>
 8009a84:	9805      	ldr	r0, [sp, #20]
 8009a86:	4621      	mov	r1, r4
 8009a88:	f7ff f930 	bl	8008cec <_Bfree>
 8009a8c:	e5f9      	b.n	8009682 <_strtod_l+0x72>
 8009a8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009a94:	4293      	cmp	r3, r2
 8009a96:	dbbc      	blt.n	8009a12 <_strtod_l+0x402>
 8009a98:	4c41      	ldr	r4, [pc, #260]	@ (8009ba0 <_strtod_l+0x590>)
 8009a9a:	f1c5 050f 	rsb	r5, r5, #15
 8009a9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	465b      	mov	r3, fp
 8009aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009aaa:	f7f6 fdc5 	bl	8000638 <__aeabi_dmul>
 8009aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ab0:	1b5d      	subs	r5, r3, r5
 8009ab2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009ab6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009aba:	e78f      	b.n	80099dc <_strtod_l+0x3cc>
 8009abc:	3316      	adds	r3, #22
 8009abe:	dba8      	blt.n	8009a12 <_strtod_l+0x402>
 8009ac0:	4b37      	ldr	r3, [pc, #220]	@ (8009ba0 <_strtod_l+0x590>)
 8009ac2:	eba9 0808 	sub.w	r8, r9, r8
 8009ac6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009aca:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	f7f6 fedb 	bl	800088c <__aeabi_ddiv>
 8009ad6:	e783      	b.n	80099e0 <_strtod_l+0x3d0>
 8009ad8:	4b32      	ldr	r3, [pc, #200]	@ (8009ba4 <_strtod_l+0x594>)
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	2300      	movs	r3, #0
 8009ade:	1124      	asrs	r4, r4, #4
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	461e      	mov	r6, r3
 8009ae6:	2c01      	cmp	r4, #1
 8009ae8:	dc21      	bgt.n	8009b2e <_strtod_l+0x51e>
 8009aea:	b10b      	cbz	r3, 8009af0 <_strtod_l+0x4e0>
 8009aec:	4682      	mov	sl, r0
 8009aee:	468b      	mov	fp, r1
 8009af0:	492c      	ldr	r1, [pc, #176]	@ (8009ba4 <_strtod_l+0x594>)
 8009af2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009af6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009afa:	4652      	mov	r2, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b02:	f7f6 fd99 	bl	8000638 <__aeabi_dmul>
 8009b06:	4b28      	ldr	r3, [pc, #160]	@ (8009ba8 <_strtod_l+0x598>)
 8009b08:	460a      	mov	r2, r1
 8009b0a:	400b      	ands	r3, r1
 8009b0c:	4927      	ldr	r1, [pc, #156]	@ (8009bac <_strtod_l+0x59c>)
 8009b0e:	428b      	cmp	r3, r1
 8009b10:	4682      	mov	sl, r0
 8009b12:	d898      	bhi.n	8009a46 <_strtod_l+0x436>
 8009b14:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009b18:	428b      	cmp	r3, r1
 8009b1a:	bf86      	itte	hi
 8009b1c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009bb0 <_strtod_l+0x5a0>
 8009b20:	f04f 3aff 	movhi.w	sl, #4294967295
 8009b24:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9308      	str	r3, [sp, #32]
 8009b2c:	e07a      	b.n	8009c24 <_strtod_l+0x614>
 8009b2e:	07e2      	lsls	r2, r4, #31
 8009b30:	d505      	bpl.n	8009b3e <_strtod_l+0x52e>
 8009b32:	9b08      	ldr	r3, [sp, #32]
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fd7e 	bl	8000638 <__aeabi_dmul>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	3208      	adds	r2, #8
 8009b42:	3601      	adds	r6, #1
 8009b44:	1064      	asrs	r4, r4, #1
 8009b46:	9208      	str	r2, [sp, #32]
 8009b48:	e7cd      	b.n	8009ae6 <_strtod_l+0x4d6>
 8009b4a:	d0ed      	beq.n	8009b28 <_strtod_l+0x518>
 8009b4c:	4264      	negs	r4, r4
 8009b4e:	f014 020f 	ands.w	r2, r4, #15
 8009b52:	d00a      	beq.n	8009b6a <_strtod_l+0x55a>
 8009b54:	4b12      	ldr	r3, [pc, #72]	@ (8009ba0 <_strtod_l+0x590>)
 8009b56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b62:	f7f6 fe93 	bl	800088c <__aeabi_ddiv>
 8009b66:	4682      	mov	sl, r0
 8009b68:	468b      	mov	fp, r1
 8009b6a:	1124      	asrs	r4, r4, #4
 8009b6c:	d0dc      	beq.n	8009b28 <_strtod_l+0x518>
 8009b6e:	2c1f      	cmp	r4, #31
 8009b70:	dd20      	ble.n	8009bb4 <_strtod_l+0x5a4>
 8009b72:	2400      	movs	r4, #0
 8009b74:	46a0      	mov	r8, r4
 8009b76:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b78:	46a1      	mov	r9, r4
 8009b7a:	9a05      	ldr	r2, [sp, #20]
 8009b7c:	2322      	movs	r3, #34	@ 0x22
 8009b7e:	f04f 0a00 	mov.w	sl, #0
 8009b82:	f04f 0b00 	mov.w	fp, #0
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e768      	b.n	8009a5c <_strtod_l+0x44c>
 8009b8a:	bf00      	nop
 8009b8c:	0800c771 	.word	0x0800c771
 8009b90:	0800c984 	.word	0x0800c984
 8009b94:	0800c769 	.word	0x0800c769
 8009b98:	0800c7a0 	.word	0x0800c7a0
 8009b9c:	0800cb2d 	.word	0x0800cb2d
 8009ba0:	0800c8b8 	.word	0x0800c8b8
 8009ba4:	0800c890 	.word	0x0800c890
 8009ba8:	7ff00000 	.word	0x7ff00000
 8009bac:	7ca00000 	.word	0x7ca00000
 8009bb0:	7fefffff 	.word	0x7fefffff
 8009bb4:	f014 0310 	ands.w	r3, r4, #16
 8009bb8:	bf18      	it	ne
 8009bba:	236a      	movne	r3, #106	@ 0x6a
 8009bbc:	4ea9      	ldr	r6, [pc, #676]	@ (8009e64 <_strtod_l+0x854>)
 8009bbe:	9308      	str	r3, [sp, #32]
 8009bc0:	4650      	mov	r0, sl
 8009bc2:	4659      	mov	r1, fp
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	07e2      	lsls	r2, r4, #31
 8009bc8:	d504      	bpl.n	8009bd4 <_strtod_l+0x5c4>
 8009bca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bce:	f7f6 fd33 	bl	8000638 <__aeabi_dmul>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	1064      	asrs	r4, r4, #1
 8009bd6:	f106 0608 	add.w	r6, r6, #8
 8009bda:	d1f4      	bne.n	8009bc6 <_strtod_l+0x5b6>
 8009bdc:	b10b      	cbz	r3, 8009be2 <_strtod_l+0x5d2>
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	b1b3      	cbz	r3, 8009c14 <_strtod_l+0x604>
 8009be6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009bea:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	4659      	mov	r1, fp
 8009bf2:	dd0f      	ble.n	8009c14 <_strtod_l+0x604>
 8009bf4:	2b1f      	cmp	r3, #31
 8009bf6:	dd55      	ble.n	8009ca4 <_strtod_l+0x694>
 8009bf8:	2b34      	cmp	r3, #52	@ 0x34
 8009bfa:	bfde      	ittt	le
 8009bfc:	f04f 33ff 	movle.w	r3, #4294967295
 8009c00:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009c04:	4093      	lslle	r3, r2
 8009c06:	f04f 0a00 	mov.w	sl, #0
 8009c0a:	bfcc      	ite	gt
 8009c0c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009c10:	ea03 0b01 	andle.w	fp, r3, r1
 8009c14:	2200      	movs	r2, #0
 8009c16:	2300      	movs	r3, #0
 8009c18:	4650      	mov	r0, sl
 8009c1a:	4659      	mov	r1, fp
 8009c1c:	f7f6 ff74 	bl	8000b08 <__aeabi_dcmpeq>
 8009c20:	2800      	cmp	r0, #0
 8009c22:	d1a6      	bne.n	8009b72 <_strtod_l+0x562>
 8009c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009c2a:	9805      	ldr	r0, [sp, #20]
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	463a      	mov	r2, r7
 8009c30:	f7ff f8c4 	bl	8008dbc <__s2b>
 8009c34:	900a      	str	r0, [sp, #40]	@ 0x28
 8009c36:	2800      	cmp	r0, #0
 8009c38:	f43f af05 	beq.w	8009a46 <_strtod_l+0x436>
 8009c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	eba9 0308 	sub.w	r3, r9, r8
 8009c44:	bfa8      	it	ge
 8009c46:	2300      	movge	r3, #0
 8009c48:	9312      	str	r3, [sp, #72]	@ 0x48
 8009c4a:	2400      	movs	r4, #0
 8009c4c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c50:	9316      	str	r3, [sp, #88]	@ 0x58
 8009c52:	46a0      	mov	r8, r4
 8009c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c56:	9805      	ldr	r0, [sp, #20]
 8009c58:	6859      	ldr	r1, [r3, #4]
 8009c5a:	f7ff f807 	bl	8008c6c <_Balloc>
 8009c5e:	4681      	mov	r9, r0
 8009c60:	2800      	cmp	r0, #0
 8009c62:	f43f aef4 	beq.w	8009a4e <_strtod_l+0x43e>
 8009c66:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c68:	691a      	ldr	r2, [r3, #16]
 8009c6a:	3202      	adds	r2, #2
 8009c6c:	f103 010c 	add.w	r1, r3, #12
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	300c      	adds	r0, #12
 8009c74:	f000 fde6 	bl	800a844 <memcpy>
 8009c78:	ec4b ab10 	vmov	d0, sl, fp
 8009c7c:	9805      	ldr	r0, [sp, #20]
 8009c7e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009c80:	a91b      	add	r1, sp, #108	@ 0x6c
 8009c82:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009c86:	f7ff fbd5 	bl	8009434 <__d2b>
 8009c8a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	f43f aede 	beq.w	8009a4e <_strtod_l+0x43e>
 8009c92:	9805      	ldr	r0, [sp, #20]
 8009c94:	2101      	movs	r1, #1
 8009c96:	f7ff f927 	bl	8008ee8 <__i2b>
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	b948      	cbnz	r0, 8009cb2 <_strtod_l+0x6a2>
 8009c9e:	f04f 0800 	mov.w	r8, #0
 8009ca2:	e6d4      	b.n	8009a4e <_strtod_l+0x43e>
 8009ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cac:	ea03 0a0a 	and.w	sl, r3, sl
 8009cb0:	e7b0      	b.n	8009c14 <_strtod_l+0x604>
 8009cb2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009cb4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	bfab      	itete	ge
 8009cba:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009cbc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009cbe:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009cc0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009cc2:	bfac      	ite	ge
 8009cc4:	18ef      	addge	r7, r5, r3
 8009cc6:	1b5e      	sublt	r6, r3, r5
 8009cc8:	9b08      	ldr	r3, [sp, #32]
 8009cca:	1aed      	subs	r5, r5, r3
 8009ccc:	4415      	add	r5, r2
 8009cce:	4b66      	ldr	r3, [pc, #408]	@ (8009e68 <_strtod_l+0x858>)
 8009cd0:	3d01      	subs	r5, #1
 8009cd2:	429d      	cmp	r5, r3
 8009cd4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009cd8:	da50      	bge.n	8009d7c <_strtod_l+0x76c>
 8009cda:	1b5b      	subs	r3, r3, r5
 8009cdc:	2b1f      	cmp	r3, #31
 8009cde:	eba2 0203 	sub.w	r2, r2, r3
 8009ce2:	f04f 0101 	mov.w	r1, #1
 8009ce6:	dc3d      	bgt.n	8009d64 <_strtod_l+0x754>
 8009ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8009cec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009cee:	2300      	movs	r3, #0
 8009cf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8009cf2:	18bd      	adds	r5, r7, r2
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	42af      	cmp	r7, r5
 8009cf8:	4416      	add	r6, r2
 8009cfa:	441e      	add	r6, r3
 8009cfc:	463b      	mov	r3, r7
 8009cfe:	bfa8      	it	ge
 8009d00:	462b      	movge	r3, r5
 8009d02:	42b3      	cmp	r3, r6
 8009d04:	bfa8      	it	ge
 8009d06:	4633      	movge	r3, r6
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	bfc2      	ittt	gt
 8009d0c:	1aed      	subgt	r5, r5, r3
 8009d0e:	1af6      	subgt	r6, r6, r3
 8009d10:	1aff      	subgt	r7, r7, r3
 8009d12:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dd16      	ble.n	8009d46 <_strtod_l+0x736>
 8009d18:	4641      	mov	r1, r8
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	f7ff f9a3 	bl	8009068 <__pow5mult>
 8009d22:	4680      	mov	r8, r0
 8009d24:	2800      	cmp	r0, #0
 8009d26:	d0ba      	beq.n	8009c9e <_strtod_l+0x68e>
 8009d28:	4601      	mov	r1, r0
 8009d2a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009d2c:	9805      	ldr	r0, [sp, #20]
 8009d2e:	f7ff f8f1 	bl	8008f14 <__multiply>
 8009d32:	900e      	str	r0, [sp, #56]	@ 0x38
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f43f ae8a 	beq.w	8009a4e <_strtod_l+0x43e>
 8009d3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d3c:	9805      	ldr	r0, [sp, #20]
 8009d3e:	f7fe ffd5 	bl	8008cec <_Bfree>
 8009d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d44:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	dc1d      	bgt.n	8009d86 <_strtod_l+0x776>
 8009d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd23      	ble.n	8009d98 <_strtod_l+0x788>
 8009d50:	4649      	mov	r1, r9
 8009d52:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009d54:	9805      	ldr	r0, [sp, #20]
 8009d56:	f7ff f987 	bl	8009068 <__pow5mult>
 8009d5a:	4681      	mov	r9, r0
 8009d5c:	b9e0      	cbnz	r0, 8009d98 <_strtod_l+0x788>
 8009d5e:	f04f 0900 	mov.w	r9, #0
 8009d62:	e674      	b.n	8009a4e <_strtod_l+0x43e>
 8009d64:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009d68:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009d6c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009d70:	35e2      	adds	r5, #226	@ 0xe2
 8009d72:	fa01 f305 	lsl.w	r3, r1, r5
 8009d76:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d78:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009d7a:	e7ba      	b.n	8009cf2 <_strtod_l+0x6e2>
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009d80:	2301      	movs	r3, #1
 8009d82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009d84:	e7b5      	b.n	8009cf2 <_strtod_l+0x6e2>
 8009d86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009d88:	9805      	ldr	r0, [sp, #20]
 8009d8a:	462a      	mov	r2, r5
 8009d8c:	f7ff f9c6 	bl	800911c <__lshift>
 8009d90:	901a      	str	r0, [sp, #104]	@ 0x68
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d1d9      	bne.n	8009d4a <_strtod_l+0x73a>
 8009d96:	e65a      	b.n	8009a4e <_strtod_l+0x43e>
 8009d98:	2e00      	cmp	r6, #0
 8009d9a:	dd07      	ble.n	8009dac <_strtod_l+0x79c>
 8009d9c:	4649      	mov	r1, r9
 8009d9e:	9805      	ldr	r0, [sp, #20]
 8009da0:	4632      	mov	r2, r6
 8009da2:	f7ff f9bb 	bl	800911c <__lshift>
 8009da6:	4681      	mov	r9, r0
 8009da8:	2800      	cmp	r0, #0
 8009daa:	d0d8      	beq.n	8009d5e <_strtod_l+0x74e>
 8009dac:	2f00      	cmp	r7, #0
 8009dae:	dd08      	ble.n	8009dc2 <_strtod_l+0x7b2>
 8009db0:	4641      	mov	r1, r8
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	463a      	mov	r2, r7
 8009db6:	f7ff f9b1 	bl	800911c <__lshift>
 8009dba:	4680      	mov	r8, r0
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f43f ae46 	beq.w	8009a4e <_strtod_l+0x43e>
 8009dc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009dc4:	9805      	ldr	r0, [sp, #20]
 8009dc6:	464a      	mov	r2, r9
 8009dc8:	f7ff fa30 	bl	800922c <__mdiff>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	f43f ae3d 	beq.w	8009a4e <_strtod_l+0x43e>
 8009dd4:	68c3      	ldr	r3, [r0, #12]
 8009dd6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60c3      	str	r3, [r0, #12]
 8009ddc:	4641      	mov	r1, r8
 8009dde:	f7ff fa09 	bl	80091f4 <__mcmp>
 8009de2:	2800      	cmp	r0, #0
 8009de4:	da46      	bge.n	8009e74 <_strtod_l+0x864>
 8009de6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de8:	ea53 030a 	orrs.w	r3, r3, sl
 8009dec:	d16c      	bne.n	8009ec8 <_strtod_l+0x8b8>
 8009dee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d168      	bne.n	8009ec8 <_strtod_l+0x8b8>
 8009df6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009dfa:	0d1b      	lsrs	r3, r3, #20
 8009dfc:	051b      	lsls	r3, r3, #20
 8009dfe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e02:	d961      	bls.n	8009ec8 <_strtod_l+0x8b8>
 8009e04:	6963      	ldr	r3, [r4, #20]
 8009e06:	b913      	cbnz	r3, 8009e0e <_strtod_l+0x7fe>
 8009e08:	6923      	ldr	r3, [r4, #16]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	dd5c      	ble.n	8009ec8 <_strtod_l+0x8b8>
 8009e0e:	4621      	mov	r1, r4
 8009e10:	2201      	movs	r2, #1
 8009e12:	9805      	ldr	r0, [sp, #20]
 8009e14:	f7ff f982 	bl	800911c <__lshift>
 8009e18:	4641      	mov	r1, r8
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	f7ff f9ea 	bl	80091f4 <__mcmp>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	dd51      	ble.n	8009ec8 <_strtod_l+0x8b8>
 8009e24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e28:	9a08      	ldr	r2, [sp, #32]
 8009e2a:	0d1b      	lsrs	r3, r3, #20
 8009e2c:	051b      	lsls	r3, r3, #20
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d06b      	beq.n	8009f0a <_strtod_l+0x8fa>
 8009e32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009e36:	d868      	bhi.n	8009f0a <_strtod_l+0x8fa>
 8009e38:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009e3c:	f67f ae9d 	bls.w	8009b7a <_strtod_l+0x56a>
 8009e40:	4b0a      	ldr	r3, [pc, #40]	@ (8009e6c <_strtod_l+0x85c>)
 8009e42:	4650      	mov	r0, sl
 8009e44:	4659      	mov	r1, fp
 8009e46:	2200      	movs	r2, #0
 8009e48:	f7f6 fbf6 	bl	8000638 <__aeabi_dmul>
 8009e4c:	4b08      	ldr	r3, [pc, #32]	@ (8009e70 <_strtod_l+0x860>)
 8009e4e:	400b      	ands	r3, r1
 8009e50:	4682      	mov	sl, r0
 8009e52:	468b      	mov	fp, r1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f47f ae05 	bne.w	8009a64 <_strtod_l+0x454>
 8009e5a:	9a05      	ldr	r2, [sp, #20]
 8009e5c:	2322      	movs	r3, #34	@ 0x22
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e600      	b.n	8009a64 <_strtod_l+0x454>
 8009e62:	bf00      	nop
 8009e64:	0800c9b0 	.word	0x0800c9b0
 8009e68:	fffffc02 	.word	0xfffffc02
 8009e6c:	39500000 	.word	0x39500000
 8009e70:	7ff00000 	.word	0x7ff00000
 8009e74:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e78:	d165      	bne.n	8009f46 <_strtod_l+0x936>
 8009e7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e80:	b35a      	cbz	r2, 8009eda <_strtod_l+0x8ca>
 8009e82:	4a9f      	ldr	r2, [pc, #636]	@ (800a100 <_strtod_l+0xaf0>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d12b      	bne.n	8009ee0 <_strtod_l+0x8d0>
 8009e88:	9b08      	ldr	r3, [sp, #32]
 8009e8a:	4651      	mov	r1, sl
 8009e8c:	b303      	cbz	r3, 8009ed0 <_strtod_l+0x8c0>
 8009e8e:	4b9d      	ldr	r3, [pc, #628]	@ (800a104 <_strtod_l+0xaf4>)
 8009e90:	465a      	mov	r2, fp
 8009e92:	4013      	ands	r3, r2
 8009e94:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009e98:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9c:	d81b      	bhi.n	8009ed6 <_strtod_l+0x8c6>
 8009e9e:	0d1b      	lsrs	r3, r3, #20
 8009ea0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea8:	4299      	cmp	r1, r3
 8009eaa:	d119      	bne.n	8009ee0 <_strtod_l+0x8d0>
 8009eac:	4b96      	ldr	r3, [pc, #600]	@ (800a108 <_strtod_l+0xaf8>)
 8009eae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d102      	bne.n	8009eba <_strtod_l+0x8aa>
 8009eb4:	3101      	adds	r1, #1
 8009eb6:	f43f adca 	beq.w	8009a4e <_strtod_l+0x43e>
 8009eba:	4b92      	ldr	r3, [pc, #584]	@ (800a104 <_strtod_l+0xaf4>)
 8009ebc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ebe:	401a      	ands	r2, r3
 8009ec0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009ec4:	f04f 0a00 	mov.w	sl, #0
 8009ec8:	9b08      	ldr	r3, [sp, #32]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1b8      	bne.n	8009e40 <_strtod_l+0x830>
 8009ece:	e5c9      	b.n	8009a64 <_strtod_l+0x454>
 8009ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed4:	e7e8      	b.n	8009ea8 <_strtod_l+0x898>
 8009ed6:	4613      	mov	r3, r2
 8009ed8:	e7e6      	b.n	8009ea8 <_strtod_l+0x898>
 8009eda:	ea53 030a 	orrs.w	r3, r3, sl
 8009ede:	d0a1      	beq.n	8009e24 <_strtod_l+0x814>
 8009ee0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ee2:	b1db      	cbz	r3, 8009f1c <_strtod_l+0x90c>
 8009ee4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ee6:	4213      	tst	r3, r2
 8009ee8:	d0ee      	beq.n	8009ec8 <_strtod_l+0x8b8>
 8009eea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eec:	9a08      	ldr	r2, [sp, #32]
 8009eee:	4650      	mov	r0, sl
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	b1bb      	cbz	r3, 8009f24 <_strtod_l+0x914>
 8009ef4:	f7ff fb6c 	bl	80095d0 <sulp>
 8009ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009efc:	ec53 2b10 	vmov	r2, r3, d0
 8009f00:	f7f6 f9e4 	bl	80002cc <__adddf3>
 8009f04:	4682      	mov	sl, r0
 8009f06:	468b      	mov	fp, r1
 8009f08:	e7de      	b.n	8009ec8 <_strtod_l+0x8b8>
 8009f0a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009f0e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009f12:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009f16:	f04f 3aff 	mov.w	sl, #4294967295
 8009f1a:	e7d5      	b.n	8009ec8 <_strtod_l+0x8b8>
 8009f1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009f1e:	ea13 0f0a 	tst.w	r3, sl
 8009f22:	e7e1      	b.n	8009ee8 <_strtod_l+0x8d8>
 8009f24:	f7ff fb54 	bl	80095d0 <sulp>
 8009f28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f2c:	ec53 2b10 	vmov	r2, r3, d0
 8009f30:	f7f6 f9ca 	bl	80002c8 <__aeabi_dsub>
 8009f34:	2200      	movs	r2, #0
 8009f36:	2300      	movs	r3, #0
 8009f38:	4682      	mov	sl, r0
 8009f3a:	468b      	mov	fp, r1
 8009f3c:	f7f6 fde4 	bl	8000b08 <__aeabi_dcmpeq>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d0c1      	beq.n	8009ec8 <_strtod_l+0x8b8>
 8009f44:	e619      	b.n	8009b7a <_strtod_l+0x56a>
 8009f46:	4641      	mov	r1, r8
 8009f48:	4620      	mov	r0, r4
 8009f4a:	f7ff facb 	bl	80094e4 <__ratio>
 8009f4e:	ec57 6b10 	vmov	r6, r7, d0
 8009f52:	2200      	movs	r2, #0
 8009f54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fde8 	bl	8000b30 <__aeabi_dcmple>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d06f      	beq.n	800a044 <_strtod_l+0xa34>
 8009f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d17a      	bne.n	800a060 <_strtod_l+0xa50>
 8009f6a:	f1ba 0f00 	cmp.w	sl, #0
 8009f6e:	d158      	bne.n	800a022 <_strtod_l+0xa12>
 8009f70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d15a      	bne.n	800a030 <_strtod_l+0xa20>
 8009f7a:	4b64      	ldr	r3, [pc, #400]	@ (800a10c <_strtod_l+0xafc>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4630      	mov	r0, r6
 8009f80:	4639      	mov	r1, r7
 8009f82:	f7f6 fdcb 	bl	8000b1c <__aeabi_dcmplt>
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d159      	bne.n	800a03e <_strtod_l+0xa2e>
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	4b60      	ldr	r3, [pc, #384]	@ (800a110 <_strtod_l+0xb00>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	f7f6 fb51 	bl	8000638 <__aeabi_dmul>
 8009f96:	4606      	mov	r6, r0
 8009f98:	460f      	mov	r7, r1
 8009f9a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009f9e:	9606      	str	r6, [sp, #24]
 8009fa0:	9307      	str	r3, [sp, #28]
 8009fa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fa6:	4d57      	ldr	r5, [pc, #348]	@ (800a104 <_strtod_l+0xaf4>)
 8009fa8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009fac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fae:	401d      	ands	r5, r3
 8009fb0:	4b58      	ldr	r3, [pc, #352]	@ (800a114 <_strtod_l+0xb04>)
 8009fb2:	429d      	cmp	r5, r3
 8009fb4:	f040 80b2 	bne.w	800a11c <_strtod_l+0xb0c>
 8009fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fba:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009fbe:	ec4b ab10 	vmov	d0, sl, fp
 8009fc2:	f7ff f9c7 	bl	8009354 <__ulp>
 8009fc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009fca:	ec51 0b10 	vmov	r0, r1, d0
 8009fce:	f7f6 fb33 	bl	8000638 <__aeabi_dmul>
 8009fd2:	4652      	mov	r2, sl
 8009fd4:	465b      	mov	r3, fp
 8009fd6:	f7f6 f979 	bl	80002cc <__adddf3>
 8009fda:	460b      	mov	r3, r1
 8009fdc:	4949      	ldr	r1, [pc, #292]	@ (800a104 <_strtod_l+0xaf4>)
 8009fde:	4a4e      	ldr	r2, [pc, #312]	@ (800a118 <_strtod_l+0xb08>)
 8009fe0:	4019      	ands	r1, r3
 8009fe2:	4291      	cmp	r1, r2
 8009fe4:	4682      	mov	sl, r0
 8009fe6:	d942      	bls.n	800a06e <_strtod_l+0xa5e>
 8009fe8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009fea:	4b47      	ldr	r3, [pc, #284]	@ (800a108 <_strtod_l+0xaf8>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d103      	bne.n	8009ff8 <_strtod_l+0x9e8>
 8009ff0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	f43f ad2b 	beq.w	8009a4e <_strtod_l+0x43e>
 8009ff8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a108 <_strtod_l+0xaf8>
 8009ffc:	f04f 3aff 	mov.w	sl, #4294967295
 800a000:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	f7fe fe72 	bl	8008cec <_Bfree>
 800a008:	9805      	ldr	r0, [sp, #20]
 800a00a:	4649      	mov	r1, r9
 800a00c:	f7fe fe6e 	bl	8008cec <_Bfree>
 800a010:	9805      	ldr	r0, [sp, #20]
 800a012:	4641      	mov	r1, r8
 800a014:	f7fe fe6a 	bl	8008cec <_Bfree>
 800a018:	9805      	ldr	r0, [sp, #20]
 800a01a:	4621      	mov	r1, r4
 800a01c:	f7fe fe66 	bl	8008cec <_Bfree>
 800a020:	e618      	b.n	8009c54 <_strtod_l+0x644>
 800a022:	f1ba 0f01 	cmp.w	sl, #1
 800a026:	d103      	bne.n	800a030 <_strtod_l+0xa20>
 800a028:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	f43f ada5 	beq.w	8009b7a <_strtod_l+0x56a>
 800a030:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a0e0 <_strtod_l+0xad0>
 800a034:	4f35      	ldr	r7, [pc, #212]	@ (800a10c <_strtod_l+0xafc>)
 800a036:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a03a:	2600      	movs	r6, #0
 800a03c:	e7b1      	b.n	8009fa2 <_strtod_l+0x992>
 800a03e:	4f34      	ldr	r7, [pc, #208]	@ (800a110 <_strtod_l+0xb00>)
 800a040:	2600      	movs	r6, #0
 800a042:	e7aa      	b.n	8009f9a <_strtod_l+0x98a>
 800a044:	4b32      	ldr	r3, [pc, #200]	@ (800a110 <_strtod_l+0xb00>)
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	2200      	movs	r2, #0
 800a04c:	f7f6 faf4 	bl	8000638 <__aeabi_dmul>
 800a050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	2b00      	cmp	r3, #0
 800a058:	d09f      	beq.n	8009f9a <_strtod_l+0x98a>
 800a05a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a05e:	e7a0      	b.n	8009fa2 <_strtod_l+0x992>
 800a060:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a0e8 <_strtod_l+0xad8>
 800a064:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a068:	ec57 6b17 	vmov	r6, r7, d7
 800a06c:	e799      	b.n	8009fa2 <_strtod_l+0x992>
 800a06e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a072:	9b08      	ldr	r3, [sp, #32]
 800a074:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1c1      	bne.n	800a000 <_strtod_l+0x9f0>
 800a07c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a080:	0d1b      	lsrs	r3, r3, #20
 800a082:	051b      	lsls	r3, r3, #20
 800a084:	429d      	cmp	r5, r3
 800a086:	d1bb      	bne.n	800a000 <_strtod_l+0x9f0>
 800a088:	4630      	mov	r0, r6
 800a08a:	4639      	mov	r1, r7
 800a08c:	f7f6 fe34 	bl	8000cf8 <__aeabi_d2lz>
 800a090:	f7f6 faa4 	bl	80005dc <__aeabi_l2d>
 800a094:	4602      	mov	r2, r0
 800a096:	460b      	mov	r3, r1
 800a098:	4630      	mov	r0, r6
 800a09a:	4639      	mov	r1, r7
 800a09c:	f7f6 f914 	bl	80002c8 <__aeabi_dsub>
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a0a8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a0ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ae:	ea46 060a 	orr.w	r6, r6, sl
 800a0b2:	431e      	orrs	r6, r3
 800a0b4:	d06f      	beq.n	800a196 <_strtod_l+0xb86>
 800a0b6:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0f0 <_strtod_l+0xae0>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	f47f accf 	bne.w	8009a64 <_strtod_l+0x454>
 800a0c6:	a30c      	add	r3, pc, #48	@ (adr r3, 800a0f8 <_strtod_l+0xae8>)
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0d0:	f7f6 fd42 	bl	8000b58 <__aeabi_dcmpgt>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d093      	beq.n	800a000 <_strtod_l+0x9f0>
 800a0d8:	e4c4      	b.n	8009a64 <_strtod_l+0x454>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	00000000 	.word	0x00000000
 800a0e4:	bff00000 	.word	0xbff00000
 800a0e8:	00000000 	.word	0x00000000
 800a0ec:	3ff00000 	.word	0x3ff00000
 800a0f0:	94a03595 	.word	0x94a03595
 800a0f4:	3fdfffff 	.word	0x3fdfffff
 800a0f8:	35afe535 	.word	0x35afe535
 800a0fc:	3fe00000 	.word	0x3fe00000
 800a100:	000fffff 	.word	0x000fffff
 800a104:	7ff00000 	.word	0x7ff00000
 800a108:	7fefffff 	.word	0x7fefffff
 800a10c:	3ff00000 	.word	0x3ff00000
 800a110:	3fe00000 	.word	0x3fe00000
 800a114:	7fe00000 	.word	0x7fe00000
 800a118:	7c9fffff 	.word	0x7c9fffff
 800a11c:	9b08      	ldr	r3, [sp, #32]
 800a11e:	b323      	cbz	r3, 800a16a <_strtod_l+0xb5a>
 800a120:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a124:	d821      	bhi.n	800a16a <_strtod_l+0xb5a>
 800a126:	a328      	add	r3, pc, #160	@ (adr r3, 800a1c8 <_strtod_l+0xbb8>)
 800a128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12c:	4630      	mov	r0, r6
 800a12e:	4639      	mov	r1, r7
 800a130:	f7f6 fcfe 	bl	8000b30 <__aeabi_dcmple>
 800a134:	b1a0      	cbz	r0, 800a160 <_strtod_l+0xb50>
 800a136:	4639      	mov	r1, r7
 800a138:	4630      	mov	r0, r6
 800a13a:	f7f6 fd55 	bl	8000be8 <__aeabi_d2uiz>
 800a13e:	2801      	cmp	r0, #1
 800a140:	bf38      	it	cc
 800a142:	2001      	movcc	r0, #1
 800a144:	f7f6 f9fe 	bl	8000544 <__aeabi_ui2d>
 800a148:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a14a:	4606      	mov	r6, r0
 800a14c:	460f      	mov	r7, r1
 800a14e:	b9fb      	cbnz	r3, 800a190 <_strtod_l+0xb80>
 800a150:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a154:	9014      	str	r0, [sp, #80]	@ 0x50
 800a156:	9315      	str	r3, [sp, #84]	@ 0x54
 800a158:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a15c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a160:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a162:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a166:	1b5b      	subs	r3, r3, r5
 800a168:	9311      	str	r3, [sp, #68]	@ 0x44
 800a16a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a16e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a172:	f7ff f8ef 	bl	8009354 <__ulp>
 800a176:	4650      	mov	r0, sl
 800a178:	ec53 2b10 	vmov	r2, r3, d0
 800a17c:	4659      	mov	r1, fp
 800a17e:	f7f6 fa5b 	bl	8000638 <__aeabi_dmul>
 800a182:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a186:	f7f6 f8a1 	bl	80002cc <__adddf3>
 800a18a:	4682      	mov	sl, r0
 800a18c:	468b      	mov	fp, r1
 800a18e:	e770      	b.n	800a072 <_strtod_l+0xa62>
 800a190:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a194:	e7e0      	b.n	800a158 <_strtod_l+0xb48>
 800a196:	a30e      	add	r3, pc, #56	@ (adr r3, 800a1d0 <_strtod_l+0xbc0>)
 800a198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19c:	f7f6 fcbe 	bl	8000b1c <__aeabi_dcmplt>
 800a1a0:	e798      	b.n	800a0d4 <_strtod_l+0xac4>
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1a6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a1a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	f7ff ba6d 	b.w	800968a <_strtod_l+0x7a>
 800a1b0:	2a65      	cmp	r2, #101	@ 0x65
 800a1b2:	f43f ab66 	beq.w	8009882 <_strtod_l+0x272>
 800a1b6:	2a45      	cmp	r2, #69	@ 0x45
 800a1b8:	f43f ab63 	beq.w	8009882 <_strtod_l+0x272>
 800a1bc:	2301      	movs	r3, #1
 800a1be:	f7ff bb9e 	b.w	80098fe <_strtod_l+0x2ee>
 800a1c2:	bf00      	nop
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	ffc00000 	.word	0xffc00000
 800a1cc:	41dfffff 	.word	0x41dfffff
 800a1d0:	94a03595 	.word	0x94a03595
 800a1d4:	3fcfffff 	.word	0x3fcfffff

0800a1d8 <_strtod_r>:
 800a1d8:	4b01      	ldr	r3, [pc, #4]	@ (800a1e0 <_strtod_r+0x8>)
 800a1da:	f7ff ba19 	b.w	8009610 <_strtod_l>
 800a1de:	bf00      	nop
 800a1e0:	2000006c 	.word	0x2000006c

0800a1e4 <_strtol_l.constprop.0>:
 800a1e4:	2b24      	cmp	r3, #36	@ 0x24
 800a1e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ea:	4686      	mov	lr, r0
 800a1ec:	4690      	mov	r8, r2
 800a1ee:	d801      	bhi.n	800a1f4 <_strtol_l.constprop.0+0x10>
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d106      	bne.n	800a202 <_strtol_l.constprop.0+0x1e>
 800a1f4:	f7fd fe6e 	bl	8007ed4 <__errno>
 800a1f8:	2316      	movs	r3, #22
 800a1fa:	6003      	str	r3, [r0, #0]
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	4834      	ldr	r0, [pc, #208]	@ (800a2d4 <_strtol_l.constprop.0+0xf0>)
 800a204:	460d      	mov	r5, r1
 800a206:	462a      	mov	r2, r5
 800a208:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a20c:	5d06      	ldrb	r6, [r0, r4]
 800a20e:	f016 0608 	ands.w	r6, r6, #8
 800a212:	d1f8      	bne.n	800a206 <_strtol_l.constprop.0+0x22>
 800a214:	2c2d      	cmp	r4, #45	@ 0x2d
 800a216:	d12d      	bne.n	800a274 <_strtol_l.constprop.0+0x90>
 800a218:	782c      	ldrb	r4, [r5, #0]
 800a21a:	2601      	movs	r6, #1
 800a21c:	1c95      	adds	r5, r2, #2
 800a21e:	f033 0210 	bics.w	r2, r3, #16
 800a222:	d109      	bne.n	800a238 <_strtol_l.constprop.0+0x54>
 800a224:	2c30      	cmp	r4, #48	@ 0x30
 800a226:	d12a      	bne.n	800a27e <_strtol_l.constprop.0+0x9a>
 800a228:	782a      	ldrb	r2, [r5, #0]
 800a22a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a22e:	2a58      	cmp	r2, #88	@ 0x58
 800a230:	d125      	bne.n	800a27e <_strtol_l.constprop.0+0x9a>
 800a232:	786c      	ldrb	r4, [r5, #1]
 800a234:	2310      	movs	r3, #16
 800a236:	3502      	adds	r5, #2
 800a238:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a23c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a240:	2200      	movs	r2, #0
 800a242:	fbbc f9f3 	udiv	r9, ip, r3
 800a246:	4610      	mov	r0, r2
 800a248:	fb03 ca19 	mls	sl, r3, r9, ip
 800a24c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a250:	2f09      	cmp	r7, #9
 800a252:	d81b      	bhi.n	800a28c <_strtol_l.constprop.0+0xa8>
 800a254:	463c      	mov	r4, r7
 800a256:	42a3      	cmp	r3, r4
 800a258:	dd27      	ble.n	800a2aa <_strtol_l.constprop.0+0xc6>
 800a25a:	1c57      	adds	r7, r2, #1
 800a25c:	d007      	beq.n	800a26e <_strtol_l.constprop.0+0x8a>
 800a25e:	4581      	cmp	r9, r0
 800a260:	d320      	bcc.n	800a2a4 <_strtol_l.constprop.0+0xc0>
 800a262:	d101      	bne.n	800a268 <_strtol_l.constprop.0+0x84>
 800a264:	45a2      	cmp	sl, r4
 800a266:	db1d      	blt.n	800a2a4 <_strtol_l.constprop.0+0xc0>
 800a268:	fb00 4003 	mla	r0, r0, r3, r4
 800a26c:	2201      	movs	r2, #1
 800a26e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a272:	e7eb      	b.n	800a24c <_strtol_l.constprop.0+0x68>
 800a274:	2c2b      	cmp	r4, #43	@ 0x2b
 800a276:	bf04      	itt	eq
 800a278:	782c      	ldrbeq	r4, [r5, #0]
 800a27a:	1c95      	addeq	r5, r2, #2
 800a27c:	e7cf      	b.n	800a21e <_strtol_l.constprop.0+0x3a>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d1da      	bne.n	800a238 <_strtol_l.constprop.0+0x54>
 800a282:	2c30      	cmp	r4, #48	@ 0x30
 800a284:	bf0c      	ite	eq
 800a286:	2308      	moveq	r3, #8
 800a288:	230a      	movne	r3, #10
 800a28a:	e7d5      	b.n	800a238 <_strtol_l.constprop.0+0x54>
 800a28c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a290:	2f19      	cmp	r7, #25
 800a292:	d801      	bhi.n	800a298 <_strtol_l.constprop.0+0xb4>
 800a294:	3c37      	subs	r4, #55	@ 0x37
 800a296:	e7de      	b.n	800a256 <_strtol_l.constprop.0+0x72>
 800a298:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a29c:	2f19      	cmp	r7, #25
 800a29e:	d804      	bhi.n	800a2aa <_strtol_l.constprop.0+0xc6>
 800a2a0:	3c57      	subs	r4, #87	@ 0x57
 800a2a2:	e7d8      	b.n	800a256 <_strtol_l.constprop.0+0x72>
 800a2a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a8:	e7e1      	b.n	800a26e <_strtol_l.constprop.0+0x8a>
 800a2aa:	1c53      	adds	r3, r2, #1
 800a2ac:	d108      	bne.n	800a2c0 <_strtol_l.constprop.0+0xdc>
 800a2ae:	2322      	movs	r3, #34	@ 0x22
 800a2b0:	f8ce 3000 	str.w	r3, [lr]
 800a2b4:	4660      	mov	r0, ip
 800a2b6:	f1b8 0f00 	cmp.w	r8, #0
 800a2ba:	d0a0      	beq.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2bc:	1e69      	subs	r1, r5, #1
 800a2be:	e006      	b.n	800a2ce <_strtol_l.constprop.0+0xea>
 800a2c0:	b106      	cbz	r6, 800a2c4 <_strtol_l.constprop.0+0xe0>
 800a2c2:	4240      	negs	r0, r0
 800a2c4:	f1b8 0f00 	cmp.w	r8, #0
 800a2c8:	d099      	beq.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2ca:	2a00      	cmp	r2, #0
 800a2cc:	d1f6      	bne.n	800a2bc <_strtol_l.constprop.0+0xd8>
 800a2ce:	f8c8 1000 	str.w	r1, [r8]
 800a2d2:	e794      	b.n	800a1fe <_strtol_l.constprop.0+0x1a>
 800a2d4:	0800c9d9 	.word	0x0800c9d9

0800a2d8 <_strtol_r>:
 800a2d8:	f7ff bf84 	b.w	800a1e4 <_strtol_l.constprop.0>

0800a2dc <__ssputs_r>:
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	688e      	ldr	r6, [r1, #8]
 800a2e2:	461f      	mov	r7, r3
 800a2e4:	42be      	cmp	r6, r7
 800a2e6:	680b      	ldr	r3, [r1, #0]
 800a2e8:	4682      	mov	sl, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	4690      	mov	r8, r2
 800a2ee:	d82d      	bhi.n	800a34c <__ssputs_r+0x70>
 800a2f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a2f8:	d026      	beq.n	800a348 <__ssputs_r+0x6c>
 800a2fa:	6965      	ldr	r5, [r4, #20]
 800a2fc:	6909      	ldr	r1, [r1, #16]
 800a2fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a302:	eba3 0901 	sub.w	r9, r3, r1
 800a306:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a30a:	1c7b      	adds	r3, r7, #1
 800a30c:	444b      	add	r3, r9
 800a30e:	106d      	asrs	r5, r5, #1
 800a310:	429d      	cmp	r5, r3
 800a312:	bf38      	it	cc
 800a314:	461d      	movcc	r5, r3
 800a316:	0553      	lsls	r3, r2, #21
 800a318:	d527      	bpl.n	800a36a <__ssputs_r+0x8e>
 800a31a:	4629      	mov	r1, r5
 800a31c:	f7fc fbca 	bl	8006ab4 <_malloc_r>
 800a320:	4606      	mov	r6, r0
 800a322:	b360      	cbz	r0, 800a37e <__ssputs_r+0xa2>
 800a324:	6921      	ldr	r1, [r4, #16]
 800a326:	464a      	mov	r2, r9
 800a328:	f000 fa8c 	bl	800a844 <memcpy>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	6126      	str	r6, [r4, #16]
 800a33a:	6165      	str	r5, [r4, #20]
 800a33c:	444e      	add	r6, r9
 800a33e:	eba5 0509 	sub.w	r5, r5, r9
 800a342:	6026      	str	r6, [r4, #0]
 800a344:	60a5      	str	r5, [r4, #8]
 800a346:	463e      	mov	r6, r7
 800a348:	42be      	cmp	r6, r7
 800a34a:	d900      	bls.n	800a34e <__ssputs_r+0x72>
 800a34c:	463e      	mov	r6, r7
 800a34e:	6820      	ldr	r0, [r4, #0]
 800a350:	4632      	mov	r2, r6
 800a352:	4641      	mov	r1, r8
 800a354:	f000 fa28 	bl	800a7a8 <memmove>
 800a358:	68a3      	ldr	r3, [r4, #8]
 800a35a:	1b9b      	subs	r3, r3, r6
 800a35c:	60a3      	str	r3, [r4, #8]
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	4433      	add	r3, r6
 800a362:	6023      	str	r3, [r4, #0]
 800a364:	2000      	movs	r0, #0
 800a366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a36a:	462a      	mov	r2, r5
 800a36c:	f000 fdfd 	bl	800af6a <_realloc_r>
 800a370:	4606      	mov	r6, r0
 800a372:	2800      	cmp	r0, #0
 800a374:	d1e0      	bne.n	800a338 <__ssputs_r+0x5c>
 800a376:	6921      	ldr	r1, [r4, #16]
 800a378:	4650      	mov	r0, sl
 800a37a:	f7fe fc2d 	bl	8008bd8 <_free_r>
 800a37e:	230c      	movs	r3, #12
 800a380:	f8ca 3000 	str.w	r3, [sl]
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e7e9      	b.n	800a366 <__ssputs_r+0x8a>
	...

0800a394 <_svfiprintf_r>:
 800a394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a398:	4698      	mov	r8, r3
 800a39a:	898b      	ldrh	r3, [r1, #12]
 800a39c:	061b      	lsls	r3, r3, #24
 800a39e:	b09d      	sub	sp, #116	@ 0x74
 800a3a0:	4607      	mov	r7, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	4614      	mov	r4, r2
 800a3a6:	d510      	bpl.n	800a3ca <_svfiprintf_r+0x36>
 800a3a8:	690b      	ldr	r3, [r1, #16]
 800a3aa:	b973      	cbnz	r3, 800a3ca <_svfiprintf_r+0x36>
 800a3ac:	2140      	movs	r1, #64	@ 0x40
 800a3ae:	f7fc fb81 	bl	8006ab4 <_malloc_r>
 800a3b2:	6028      	str	r0, [r5, #0]
 800a3b4:	6128      	str	r0, [r5, #16]
 800a3b6:	b930      	cbnz	r0, 800a3c6 <_svfiprintf_r+0x32>
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	603b      	str	r3, [r7, #0]
 800a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c0:	b01d      	add	sp, #116	@ 0x74
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3c6:	2340      	movs	r3, #64	@ 0x40
 800a3c8:	616b      	str	r3, [r5, #20]
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ce:	2320      	movs	r3, #32
 800a3d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d8:	2330      	movs	r3, #48	@ 0x30
 800a3da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a578 <_svfiprintf_r+0x1e4>
 800a3de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3e2:	f04f 0901 	mov.w	r9, #1
 800a3e6:	4623      	mov	r3, r4
 800a3e8:	469a      	mov	sl, r3
 800a3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ee:	b10a      	cbz	r2, 800a3f4 <_svfiprintf_r+0x60>
 800a3f0:	2a25      	cmp	r2, #37	@ 0x25
 800a3f2:	d1f9      	bne.n	800a3e8 <_svfiprintf_r+0x54>
 800a3f4:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f8:	d00b      	beq.n	800a412 <_svfiprintf_r+0x7e>
 800a3fa:	465b      	mov	r3, fp
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff ff6b 	bl	800a2dc <__ssputs_r>
 800a406:	3001      	adds	r0, #1
 800a408:	f000 80a7 	beq.w	800a55a <_svfiprintf_r+0x1c6>
 800a40c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a40e:	445a      	add	r2, fp
 800a410:	9209      	str	r2, [sp, #36]	@ 0x24
 800a412:	f89a 3000 	ldrb.w	r3, [sl]
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 809f 	beq.w	800a55a <_svfiprintf_r+0x1c6>
 800a41c:	2300      	movs	r3, #0
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a426:	f10a 0a01 	add.w	sl, sl, #1
 800a42a:	9304      	str	r3, [sp, #16]
 800a42c:	9307      	str	r3, [sp, #28]
 800a42e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a432:	931a      	str	r3, [sp, #104]	@ 0x68
 800a434:	4654      	mov	r4, sl
 800a436:	2205      	movs	r2, #5
 800a438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43c:	484e      	ldr	r0, [pc, #312]	@ (800a578 <_svfiprintf_r+0x1e4>)
 800a43e:	f7f5 fee7 	bl	8000210 <memchr>
 800a442:	9a04      	ldr	r2, [sp, #16]
 800a444:	b9d8      	cbnz	r0, 800a47e <_svfiprintf_r+0xea>
 800a446:	06d0      	lsls	r0, r2, #27
 800a448:	bf44      	itt	mi
 800a44a:	2320      	movmi	r3, #32
 800a44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a450:	0711      	lsls	r1, r2, #28
 800a452:	bf44      	itt	mi
 800a454:	232b      	movmi	r3, #43	@ 0x2b
 800a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a45a:	f89a 3000 	ldrb.w	r3, [sl]
 800a45e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a460:	d015      	beq.n	800a48e <_svfiprintf_r+0xfa>
 800a462:	9a07      	ldr	r2, [sp, #28]
 800a464:	4654      	mov	r4, sl
 800a466:	2000      	movs	r0, #0
 800a468:	f04f 0c0a 	mov.w	ip, #10
 800a46c:	4621      	mov	r1, r4
 800a46e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a472:	3b30      	subs	r3, #48	@ 0x30
 800a474:	2b09      	cmp	r3, #9
 800a476:	d94b      	bls.n	800a510 <_svfiprintf_r+0x17c>
 800a478:	b1b0      	cbz	r0, 800a4a8 <_svfiprintf_r+0x114>
 800a47a:	9207      	str	r2, [sp, #28]
 800a47c:	e014      	b.n	800a4a8 <_svfiprintf_r+0x114>
 800a47e:	eba0 0308 	sub.w	r3, r0, r8
 800a482:	fa09 f303 	lsl.w	r3, r9, r3
 800a486:	4313      	orrs	r3, r2
 800a488:	9304      	str	r3, [sp, #16]
 800a48a:	46a2      	mov	sl, r4
 800a48c:	e7d2      	b.n	800a434 <_svfiprintf_r+0xa0>
 800a48e:	9b03      	ldr	r3, [sp, #12]
 800a490:	1d19      	adds	r1, r3, #4
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	9103      	str	r1, [sp, #12]
 800a496:	2b00      	cmp	r3, #0
 800a498:	bfbb      	ittet	lt
 800a49a:	425b      	neglt	r3, r3
 800a49c:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a0:	9307      	strge	r3, [sp, #28]
 800a4a2:	9307      	strlt	r3, [sp, #28]
 800a4a4:	bfb8      	it	lt
 800a4a6:	9204      	strlt	r2, [sp, #16]
 800a4a8:	7823      	ldrb	r3, [r4, #0]
 800a4aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4ac:	d10a      	bne.n	800a4c4 <_svfiprintf_r+0x130>
 800a4ae:	7863      	ldrb	r3, [r4, #1]
 800a4b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4b2:	d132      	bne.n	800a51a <_svfiprintf_r+0x186>
 800a4b4:	9b03      	ldr	r3, [sp, #12]
 800a4b6:	1d1a      	adds	r2, r3, #4
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	9203      	str	r2, [sp, #12]
 800a4bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4c0:	3402      	adds	r4, #2
 800a4c2:	9305      	str	r3, [sp, #20]
 800a4c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a588 <_svfiprintf_r+0x1f4>
 800a4c8:	7821      	ldrb	r1, [r4, #0]
 800a4ca:	2203      	movs	r2, #3
 800a4cc:	4650      	mov	r0, sl
 800a4ce:	f7f5 fe9f 	bl	8000210 <memchr>
 800a4d2:	b138      	cbz	r0, 800a4e4 <_svfiprintf_r+0x150>
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	eba0 000a 	sub.w	r0, r0, sl
 800a4da:	2240      	movs	r2, #64	@ 0x40
 800a4dc:	4082      	lsls	r2, r0
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	9304      	str	r3, [sp, #16]
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4824      	ldr	r0, [pc, #144]	@ (800a57c <_svfiprintf_r+0x1e8>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4ee:	2206      	movs	r2, #6
 800a4f0:	f7f5 fe8e 	bl	8000210 <memchr>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d036      	beq.n	800a566 <_svfiprintf_r+0x1d2>
 800a4f8:	4b21      	ldr	r3, [pc, #132]	@ (800a580 <_svfiprintf_r+0x1ec>)
 800a4fa:	bb1b      	cbnz	r3, 800a544 <_svfiprintf_r+0x1b0>
 800a4fc:	9b03      	ldr	r3, [sp, #12]
 800a4fe:	3307      	adds	r3, #7
 800a500:	f023 0307 	bic.w	r3, r3, #7
 800a504:	3308      	adds	r3, #8
 800a506:	9303      	str	r3, [sp, #12]
 800a508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50a:	4433      	add	r3, r6
 800a50c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a50e:	e76a      	b.n	800a3e6 <_svfiprintf_r+0x52>
 800a510:	fb0c 3202 	mla	r2, ip, r2, r3
 800a514:	460c      	mov	r4, r1
 800a516:	2001      	movs	r0, #1
 800a518:	e7a8      	b.n	800a46c <_svfiprintf_r+0xd8>
 800a51a:	2300      	movs	r3, #0
 800a51c:	3401      	adds	r4, #1
 800a51e:	9305      	str	r3, [sp, #20]
 800a520:	4619      	mov	r1, r3
 800a522:	f04f 0c0a 	mov.w	ip, #10
 800a526:	4620      	mov	r0, r4
 800a528:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52c:	3a30      	subs	r2, #48	@ 0x30
 800a52e:	2a09      	cmp	r2, #9
 800a530:	d903      	bls.n	800a53a <_svfiprintf_r+0x1a6>
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0c6      	beq.n	800a4c4 <_svfiprintf_r+0x130>
 800a536:	9105      	str	r1, [sp, #20]
 800a538:	e7c4      	b.n	800a4c4 <_svfiprintf_r+0x130>
 800a53a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a53e:	4604      	mov	r4, r0
 800a540:	2301      	movs	r3, #1
 800a542:	e7f0      	b.n	800a526 <_svfiprintf_r+0x192>
 800a544:	ab03      	add	r3, sp, #12
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	462a      	mov	r2, r5
 800a54a:	4b0e      	ldr	r3, [pc, #56]	@ (800a584 <_svfiprintf_r+0x1f0>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	4638      	mov	r0, r7
 800a550:	f7fc fbdc 	bl	8006d0c <_printf_float>
 800a554:	1c42      	adds	r2, r0, #1
 800a556:	4606      	mov	r6, r0
 800a558:	d1d6      	bne.n	800a508 <_svfiprintf_r+0x174>
 800a55a:	89ab      	ldrh	r3, [r5, #12]
 800a55c:	065b      	lsls	r3, r3, #25
 800a55e:	f53f af2d 	bmi.w	800a3bc <_svfiprintf_r+0x28>
 800a562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a564:	e72c      	b.n	800a3c0 <_svfiprintf_r+0x2c>
 800a566:	ab03      	add	r3, sp, #12
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	462a      	mov	r2, r5
 800a56c:	4b05      	ldr	r3, [pc, #20]	@ (800a584 <_svfiprintf_r+0x1f0>)
 800a56e:	a904      	add	r1, sp, #16
 800a570:	4638      	mov	r0, r7
 800a572:	f7fc fe63 	bl	800723c <_printf_i>
 800a576:	e7ed      	b.n	800a554 <_svfiprintf_r+0x1c0>
 800a578:	0800cad9 	.word	0x0800cad9
 800a57c:	0800cae3 	.word	0x0800cae3
 800a580:	08006d0d 	.word	0x08006d0d
 800a584:	0800a2dd 	.word	0x0800a2dd
 800a588:	0800cadf 	.word	0x0800cadf

0800a58c <__sflush_r>:
 800a58c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a594:	0716      	lsls	r6, r2, #28
 800a596:	4605      	mov	r5, r0
 800a598:	460c      	mov	r4, r1
 800a59a:	d454      	bmi.n	800a646 <__sflush_r+0xba>
 800a59c:	684b      	ldr	r3, [r1, #4]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	dc02      	bgt.n	800a5a8 <__sflush_r+0x1c>
 800a5a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	dd48      	ble.n	800a63a <__sflush_r+0xae>
 800a5a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5aa:	2e00      	cmp	r6, #0
 800a5ac:	d045      	beq.n	800a63a <__sflush_r+0xae>
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5b4:	682f      	ldr	r7, [r5, #0]
 800a5b6:	6a21      	ldr	r1, [r4, #32]
 800a5b8:	602b      	str	r3, [r5, #0]
 800a5ba:	d030      	beq.n	800a61e <__sflush_r+0x92>
 800a5bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	0759      	lsls	r1, r3, #29
 800a5c2:	d505      	bpl.n	800a5d0 <__sflush_r+0x44>
 800a5c4:	6863      	ldr	r3, [r4, #4]
 800a5c6:	1ad2      	subs	r2, r2, r3
 800a5c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5ca:	b10b      	cbz	r3, 800a5d0 <__sflush_r+0x44>
 800a5cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5ce:	1ad2      	subs	r2, r2, r3
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5d4:	6a21      	ldr	r1, [r4, #32]
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b0      	blx	r6
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	d106      	bne.n	800a5ee <__sflush_r+0x62>
 800a5e0:	6829      	ldr	r1, [r5, #0]
 800a5e2:	291d      	cmp	r1, #29
 800a5e4:	d82b      	bhi.n	800a63e <__sflush_r+0xb2>
 800a5e6:	4a2a      	ldr	r2, [pc, #168]	@ (800a690 <__sflush_r+0x104>)
 800a5e8:	410a      	asrs	r2, r1
 800a5ea:	07d6      	lsls	r6, r2, #31
 800a5ec:	d427      	bmi.n	800a63e <__sflush_r+0xb2>
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	6062      	str	r2, [r4, #4]
 800a5f2:	04d9      	lsls	r1, r3, #19
 800a5f4:	6922      	ldr	r2, [r4, #16]
 800a5f6:	6022      	str	r2, [r4, #0]
 800a5f8:	d504      	bpl.n	800a604 <__sflush_r+0x78>
 800a5fa:	1c42      	adds	r2, r0, #1
 800a5fc:	d101      	bne.n	800a602 <__sflush_r+0x76>
 800a5fe:	682b      	ldr	r3, [r5, #0]
 800a600:	b903      	cbnz	r3, 800a604 <__sflush_r+0x78>
 800a602:	6560      	str	r0, [r4, #84]	@ 0x54
 800a604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a606:	602f      	str	r7, [r5, #0]
 800a608:	b1b9      	cbz	r1, 800a63a <__sflush_r+0xae>
 800a60a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a60e:	4299      	cmp	r1, r3
 800a610:	d002      	beq.n	800a618 <__sflush_r+0x8c>
 800a612:	4628      	mov	r0, r5
 800a614:	f7fe fae0 	bl	8008bd8 <_free_r>
 800a618:	2300      	movs	r3, #0
 800a61a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a61c:	e00d      	b.n	800a63a <__sflush_r+0xae>
 800a61e:	2301      	movs	r3, #1
 800a620:	4628      	mov	r0, r5
 800a622:	47b0      	blx	r6
 800a624:	4602      	mov	r2, r0
 800a626:	1c50      	adds	r0, r2, #1
 800a628:	d1c9      	bne.n	800a5be <__sflush_r+0x32>
 800a62a:	682b      	ldr	r3, [r5, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d0c6      	beq.n	800a5be <__sflush_r+0x32>
 800a630:	2b1d      	cmp	r3, #29
 800a632:	d001      	beq.n	800a638 <__sflush_r+0xac>
 800a634:	2b16      	cmp	r3, #22
 800a636:	d11e      	bne.n	800a676 <__sflush_r+0xea>
 800a638:	602f      	str	r7, [r5, #0]
 800a63a:	2000      	movs	r0, #0
 800a63c:	e022      	b.n	800a684 <__sflush_r+0xf8>
 800a63e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a642:	b21b      	sxth	r3, r3
 800a644:	e01b      	b.n	800a67e <__sflush_r+0xf2>
 800a646:	690f      	ldr	r7, [r1, #16]
 800a648:	2f00      	cmp	r7, #0
 800a64a:	d0f6      	beq.n	800a63a <__sflush_r+0xae>
 800a64c:	0793      	lsls	r3, r2, #30
 800a64e:	680e      	ldr	r6, [r1, #0]
 800a650:	bf08      	it	eq
 800a652:	694b      	ldreq	r3, [r1, #20]
 800a654:	600f      	str	r7, [r1, #0]
 800a656:	bf18      	it	ne
 800a658:	2300      	movne	r3, #0
 800a65a:	eba6 0807 	sub.w	r8, r6, r7
 800a65e:	608b      	str	r3, [r1, #8]
 800a660:	f1b8 0f00 	cmp.w	r8, #0
 800a664:	dde9      	ble.n	800a63a <__sflush_r+0xae>
 800a666:	6a21      	ldr	r1, [r4, #32]
 800a668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a66a:	4643      	mov	r3, r8
 800a66c:	463a      	mov	r2, r7
 800a66e:	4628      	mov	r0, r5
 800a670:	47b0      	blx	r6
 800a672:	2800      	cmp	r0, #0
 800a674:	dc08      	bgt.n	800a688 <__sflush_r+0xfc>
 800a676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a67a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a67e:	81a3      	strh	r3, [r4, #12]
 800a680:	f04f 30ff 	mov.w	r0, #4294967295
 800a684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a688:	4407      	add	r7, r0
 800a68a:	eba8 0800 	sub.w	r8, r8, r0
 800a68e:	e7e7      	b.n	800a660 <__sflush_r+0xd4>
 800a690:	dfbffffe 	.word	0xdfbffffe

0800a694 <_fflush_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	690b      	ldr	r3, [r1, #16]
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	b913      	cbnz	r3, 800a6a4 <_fflush_r+0x10>
 800a69e:	2500      	movs	r5, #0
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	b118      	cbz	r0, 800a6ae <_fflush_r+0x1a>
 800a6a6:	6a03      	ldr	r3, [r0, #32]
 800a6a8:	b90b      	cbnz	r3, 800a6ae <_fflush_r+0x1a>
 800a6aa:	f7fd f987 	bl	80079bc <__sinit>
 800a6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d0f3      	beq.n	800a69e <_fflush_r+0xa>
 800a6b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6b8:	07d0      	lsls	r0, r2, #31
 800a6ba:	d404      	bmi.n	800a6c6 <_fflush_r+0x32>
 800a6bc:	0599      	lsls	r1, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_fflush_r+0x32>
 800a6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6c2:	f7fd fc32 	bl	8007f2a <__retarget_lock_acquire_recursive>
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	f7ff ff5f 	bl	800a58c <__sflush_r>
 800a6ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6d0:	07da      	lsls	r2, r3, #31
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	d4e4      	bmi.n	800a6a0 <_fflush_r+0xc>
 800a6d6:	89a3      	ldrh	r3, [r4, #12]
 800a6d8:	059b      	lsls	r3, r3, #22
 800a6da:	d4e1      	bmi.n	800a6a0 <_fflush_r+0xc>
 800a6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6de:	f7fd fc25 	bl	8007f2c <__retarget_lock_release_recursive>
 800a6e2:	e7dd      	b.n	800a6a0 <_fflush_r+0xc>

0800a6e4 <__swhatbuf_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	b096      	sub	sp, #88	@ 0x58
 800a6f0:	4615      	mov	r5, r2
 800a6f2:	461e      	mov	r6, r3
 800a6f4:	da0d      	bge.n	800a712 <__swhatbuf_r+0x2e>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6fc:	f04f 0100 	mov.w	r1, #0
 800a700:	bf14      	ite	ne
 800a702:	2340      	movne	r3, #64	@ 0x40
 800a704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a708:	2000      	movs	r0, #0
 800a70a:	6031      	str	r1, [r6, #0]
 800a70c:	602b      	str	r3, [r5, #0]
 800a70e:	b016      	add	sp, #88	@ 0x58
 800a710:	bd70      	pop	{r4, r5, r6, pc}
 800a712:	466a      	mov	r2, sp
 800a714:	f000 f874 	bl	800a800 <_fstat_r>
 800a718:	2800      	cmp	r0, #0
 800a71a:	dbec      	blt.n	800a6f6 <__swhatbuf_r+0x12>
 800a71c:	9901      	ldr	r1, [sp, #4]
 800a71e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a726:	4259      	negs	r1, r3
 800a728:	4159      	adcs	r1, r3
 800a72a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a72e:	e7eb      	b.n	800a708 <__swhatbuf_r+0x24>

0800a730 <__smakebuf_r>:
 800a730:	898b      	ldrh	r3, [r1, #12]
 800a732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a734:	079d      	lsls	r5, r3, #30
 800a736:	4606      	mov	r6, r0
 800a738:	460c      	mov	r4, r1
 800a73a:	d507      	bpl.n	800a74c <__smakebuf_r+0x1c>
 800a73c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	2301      	movs	r3, #1
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	b003      	add	sp, #12
 800a74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a74c:	ab01      	add	r3, sp, #4
 800a74e:	466a      	mov	r2, sp
 800a750:	f7ff ffc8 	bl	800a6e4 <__swhatbuf_r>
 800a754:	9f00      	ldr	r7, [sp, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	4639      	mov	r1, r7
 800a75a:	4630      	mov	r0, r6
 800a75c:	f7fc f9aa 	bl	8006ab4 <_malloc_r>
 800a760:	b948      	cbnz	r0, 800a776 <__smakebuf_r+0x46>
 800a762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a766:	059a      	lsls	r2, r3, #22
 800a768:	d4ee      	bmi.n	800a748 <__smakebuf_r+0x18>
 800a76a:	f023 0303 	bic.w	r3, r3, #3
 800a76e:	f043 0302 	orr.w	r3, r3, #2
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	e7e2      	b.n	800a73c <__smakebuf_r+0xc>
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	6020      	str	r0, [r4, #0]
 800a77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a77e:	81a3      	strh	r3, [r4, #12]
 800a780:	9b01      	ldr	r3, [sp, #4]
 800a782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a786:	b15b      	cbz	r3, 800a7a0 <__smakebuf_r+0x70>
 800a788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 f849 	bl	800a824 <_isatty_r>
 800a792:	b128      	cbz	r0, 800a7a0 <__smakebuf_r+0x70>
 800a794:	89a3      	ldrh	r3, [r4, #12]
 800a796:	f023 0303 	bic.w	r3, r3, #3
 800a79a:	f043 0301 	orr.w	r3, r3, #1
 800a79e:	81a3      	strh	r3, [r4, #12]
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	431d      	orrs	r5, r3
 800a7a4:	81a5      	strh	r5, [r4, #12]
 800a7a6:	e7cf      	b.n	800a748 <__smakebuf_r+0x18>

0800a7a8 <memmove>:
 800a7a8:	4288      	cmp	r0, r1
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	eb01 0402 	add.w	r4, r1, r2
 800a7b0:	d902      	bls.n	800a7b8 <memmove+0x10>
 800a7b2:	4284      	cmp	r4, r0
 800a7b4:	4623      	mov	r3, r4
 800a7b6:	d807      	bhi.n	800a7c8 <memmove+0x20>
 800a7b8:	1e43      	subs	r3, r0, #1
 800a7ba:	42a1      	cmp	r1, r4
 800a7bc:	d008      	beq.n	800a7d0 <memmove+0x28>
 800a7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7c6:	e7f8      	b.n	800a7ba <memmove+0x12>
 800a7c8:	4402      	add	r2, r0
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	428a      	cmp	r2, r1
 800a7ce:	d100      	bne.n	800a7d2 <memmove+0x2a>
 800a7d0:	bd10      	pop	{r4, pc}
 800a7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7da:	e7f7      	b.n	800a7cc <memmove+0x24>

0800a7dc <strncmp>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	b16a      	cbz	r2, 800a7fc <strncmp+0x20>
 800a7e0:	3901      	subs	r1, #1
 800a7e2:	1884      	adds	r4, r0, r2
 800a7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a7e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d103      	bne.n	800a7f8 <strncmp+0x1c>
 800a7f0:	42a0      	cmp	r0, r4
 800a7f2:	d001      	beq.n	800a7f8 <strncmp+0x1c>
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	d1f5      	bne.n	800a7e4 <strncmp+0x8>
 800a7f8:	1ad0      	subs	r0, r2, r3
 800a7fa:	bd10      	pop	{r4, pc}
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	e7fc      	b.n	800a7fa <strncmp+0x1e>

0800a800 <_fstat_r>:
 800a800:	b538      	push	{r3, r4, r5, lr}
 800a802:	4d07      	ldr	r5, [pc, #28]	@ (800a820 <_fstat_r+0x20>)
 800a804:	2300      	movs	r3, #0
 800a806:	4604      	mov	r4, r0
 800a808:	4608      	mov	r0, r1
 800a80a:	4611      	mov	r1, r2
 800a80c:	602b      	str	r3, [r5, #0]
 800a80e:	f7f8 fe0b 	bl	8003428 <_fstat>
 800a812:	1c43      	adds	r3, r0, #1
 800a814:	d102      	bne.n	800a81c <_fstat_r+0x1c>
 800a816:	682b      	ldr	r3, [r5, #0]
 800a818:	b103      	cbz	r3, 800a81c <_fstat_r+0x1c>
 800a81a:	6023      	str	r3, [r4, #0]
 800a81c:	bd38      	pop	{r3, r4, r5, pc}
 800a81e:	bf00      	nop
 800a820:	2000066c 	.word	0x2000066c

0800a824 <_isatty_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d06      	ldr	r5, [pc, #24]	@ (800a840 <_isatty_r+0x1c>)
 800a828:	2300      	movs	r3, #0
 800a82a:	4604      	mov	r4, r0
 800a82c:	4608      	mov	r0, r1
 800a82e:	602b      	str	r3, [r5, #0]
 800a830:	f7f8 fe0a 	bl	8003448 <_isatty>
 800a834:	1c43      	adds	r3, r0, #1
 800a836:	d102      	bne.n	800a83e <_isatty_r+0x1a>
 800a838:	682b      	ldr	r3, [r5, #0]
 800a83a:	b103      	cbz	r3, 800a83e <_isatty_r+0x1a>
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	bd38      	pop	{r3, r4, r5, pc}
 800a840:	2000066c 	.word	0x2000066c

0800a844 <memcpy>:
 800a844:	440a      	add	r2, r1
 800a846:	4291      	cmp	r1, r2
 800a848:	f100 33ff 	add.w	r3, r0, #4294967295
 800a84c:	d100      	bne.n	800a850 <memcpy+0xc>
 800a84e:	4770      	bx	lr
 800a850:	b510      	push	{r4, lr}
 800a852:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a856:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a85a:	4291      	cmp	r1, r2
 800a85c:	d1f9      	bne.n	800a852 <memcpy+0xe>
 800a85e:	bd10      	pop	{r4, pc}

0800a860 <nan>:
 800a860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a868 <nan+0x8>
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	00000000 	.word	0x00000000
 800a86c:	7ff80000 	.word	0x7ff80000

0800a870 <__assert_func>:
 800a870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a872:	4614      	mov	r4, r2
 800a874:	461a      	mov	r2, r3
 800a876:	4b09      	ldr	r3, [pc, #36]	@ (800a89c <__assert_func+0x2c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4605      	mov	r5, r0
 800a87c:	68d8      	ldr	r0, [r3, #12]
 800a87e:	b954      	cbnz	r4, 800a896 <__assert_func+0x26>
 800a880:	4b07      	ldr	r3, [pc, #28]	@ (800a8a0 <__assert_func+0x30>)
 800a882:	461c      	mov	r4, r3
 800a884:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a888:	9100      	str	r1, [sp, #0]
 800a88a:	462b      	mov	r3, r5
 800a88c:	4905      	ldr	r1, [pc, #20]	@ (800a8a4 <__assert_func+0x34>)
 800a88e:	f000 fba7 	bl	800afe0 <fiprintf>
 800a892:	f7fc f8d5 	bl	8006a40 <abort>
 800a896:	4b04      	ldr	r3, [pc, #16]	@ (800a8a8 <__assert_func+0x38>)
 800a898:	e7f4      	b.n	800a884 <__assert_func+0x14>
 800a89a:	bf00      	nop
 800a89c:	2000001c 	.word	0x2000001c
 800a8a0:	0800cb2d 	.word	0x0800cb2d
 800a8a4:	0800caff 	.word	0x0800caff
 800a8a8:	0800caf2 	.word	0x0800caf2

0800a8ac <_calloc_r>:
 800a8ac:	b570      	push	{r4, r5, r6, lr}
 800a8ae:	fba1 5402 	umull	r5, r4, r1, r2
 800a8b2:	b93c      	cbnz	r4, 800a8c4 <_calloc_r+0x18>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	f7fc f8fd 	bl	8006ab4 <_malloc_r>
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	b928      	cbnz	r0, 800a8ca <_calloc_r+0x1e>
 800a8be:	2600      	movs	r6, #0
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	bd70      	pop	{r4, r5, r6, pc}
 800a8c4:	220c      	movs	r2, #12
 800a8c6:	6002      	str	r2, [r0, #0]
 800a8c8:	e7f9      	b.n	800a8be <_calloc_r+0x12>
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	f7fd fa5b 	bl	8007d88 <memset>
 800a8d2:	e7f5      	b.n	800a8c0 <_calloc_r+0x14>

0800a8d4 <rshift>:
 800a8d4:	6903      	ldr	r3, [r0, #16]
 800a8d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a8da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a8de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a8e2:	f100 0414 	add.w	r4, r0, #20
 800a8e6:	dd45      	ble.n	800a974 <rshift+0xa0>
 800a8e8:	f011 011f 	ands.w	r1, r1, #31
 800a8ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a8f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a8f4:	d10c      	bne.n	800a910 <rshift+0x3c>
 800a8f6:	f100 0710 	add.w	r7, r0, #16
 800a8fa:	4629      	mov	r1, r5
 800a8fc:	42b1      	cmp	r1, r6
 800a8fe:	d334      	bcc.n	800a96a <rshift+0x96>
 800a900:	1a9b      	subs	r3, r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	1eea      	subs	r2, r5, #3
 800a906:	4296      	cmp	r6, r2
 800a908:	bf38      	it	cc
 800a90a:	2300      	movcc	r3, #0
 800a90c:	4423      	add	r3, r4
 800a90e:	e015      	b.n	800a93c <rshift+0x68>
 800a910:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a914:	f1c1 0820 	rsb	r8, r1, #32
 800a918:	40cf      	lsrs	r7, r1
 800a91a:	f105 0e04 	add.w	lr, r5, #4
 800a91e:	46a1      	mov	r9, r4
 800a920:	4576      	cmp	r6, lr
 800a922:	46f4      	mov	ip, lr
 800a924:	d815      	bhi.n	800a952 <rshift+0x7e>
 800a926:	1a9a      	subs	r2, r3, r2
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	3a04      	subs	r2, #4
 800a92c:	3501      	adds	r5, #1
 800a92e:	42ae      	cmp	r6, r5
 800a930:	bf38      	it	cc
 800a932:	2200      	movcc	r2, #0
 800a934:	18a3      	adds	r3, r4, r2
 800a936:	50a7      	str	r7, [r4, r2]
 800a938:	b107      	cbz	r7, 800a93c <rshift+0x68>
 800a93a:	3304      	adds	r3, #4
 800a93c:	1b1a      	subs	r2, r3, r4
 800a93e:	42a3      	cmp	r3, r4
 800a940:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a944:	bf08      	it	eq
 800a946:	2300      	moveq	r3, #0
 800a948:	6102      	str	r2, [r0, #16]
 800a94a:	bf08      	it	eq
 800a94c:	6143      	streq	r3, [r0, #20]
 800a94e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a952:	f8dc c000 	ldr.w	ip, [ip]
 800a956:	fa0c fc08 	lsl.w	ip, ip, r8
 800a95a:	ea4c 0707 	orr.w	r7, ip, r7
 800a95e:	f849 7b04 	str.w	r7, [r9], #4
 800a962:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a966:	40cf      	lsrs	r7, r1
 800a968:	e7da      	b.n	800a920 <rshift+0x4c>
 800a96a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a96e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a972:	e7c3      	b.n	800a8fc <rshift+0x28>
 800a974:	4623      	mov	r3, r4
 800a976:	e7e1      	b.n	800a93c <rshift+0x68>

0800a978 <__hexdig_fun>:
 800a978:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a97c:	2b09      	cmp	r3, #9
 800a97e:	d802      	bhi.n	800a986 <__hexdig_fun+0xe>
 800a980:	3820      	subs	r0, #32
 800a982:	b2c0      	uxtb	r0, r0
 800a984:	4770      	bx	lr
 800a986:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	d801      	bhi.n	800a992 <__hexdig_fun+0x1a>
 800a98e:	3847      	subs	r0, #71	@ 0x47
 800a990:	e7f7      	b.n	800a982 <__hexdig_fun+0xa>
 800a992:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a996:	2b05      	cmp	r3, #5
 800a998:	d801      	bhi.n	800a99e <__hexdig_fun+0x26>
 800a99a:	3827      	subs	r0, #39	@ 0x27
 800a99c:	e7f1      	b.n	800a982 <__hexdig_fun+0xa>
 800a99e:	2000      	movs	r0, #0
 800a9a0:	4770      	bx	lr
	...

0800a9a4 <__gethex>:
 800a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	468a      	mov	sl, r1
 800a9ac:	9302      	str	r3, [sp, #8]
 800a9ae:	680b      	ldr	r3, [r1, #0]
 800a9b0:	9001      	str	r0, [sp, #4]
 800a9b2:	4690      	mov	r8, r2
 800a9b4:	1c9c      	adds	r4, r3, #2
 800a9b6:	46a1      	mov	r9, r4
 800a9b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a9bc:	2830      	cmp	r0, #48	@ 0x30
 800a9be:	d0fa      	beq.n	800a9b6 <__gethex+0x12>
 800a9c0:	eba9 0303 	sub.w	r3, r9, r3
 800a9c4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a9c8:	f7ff ffd6 	bl	800a978 <__hexdig_fun>
 800a9cc:	4605      	mov	r5, r0
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d168      	bne.n	800aaa4 <__gethex+0x100>
 800a9d2:	49a0      	ldr	r1, [pc, #640]	@ (800ac54 <__gethex+0x2b0>)
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	4648      	mov	r0, r9
 800a9d8:	f7ff ff00 	bl	800a7dc <strncmp>
 800a9dc:	4607      	mov	r7, r0
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d167      	bne.n	800aab2 <__gethex+0x10e>
 800a9e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a9e6:	4626      	mov	r6, r4
 800a9e8:	f7ff ffc6 	bl	800a978 <__hexdig_fun>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d062      	beq.n	800aab6 <__gethex+0x112>
 800a9f0:	4623      	mov	r3, r4
 800a9f2:	7818      	ldrb	r0, [r3, #0]
 800a9f4:	2830      	cmp	r0, #48	@ 0x30
 800a9f6:	4699      	mov	r9, r3
 800a9f8:	f103 0301 	add.w	r3, r3, #1
 800a9fc:	d0f9      	beq.n	800a9f2 <__gethex+0x4e>
 800a9fe:	f7ff ffbb 	bl	800a978 <__hexdig_fun>
 800aa02:	fab0 f580 	clz	r5, r0
 800aa06:	096d      	lsrs	r5, r5, #5
 800aa08:	f04f 0b01 	mov.w	fp, #1
 800aa0c:	464a      	mov	r2, r9
 800aa0e:	4616      	mov	r6, r2
 800aa10:	3201      	adds	r2, #1
 800aa12:	7830      	ldrb	r0, [r6, #0]
 800aa14:	f7ff ffb0 	bl	800a978 <__hexdig_fun>
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d1f8      	bne.n	800aa0e <__gethex+0x6a>
 800aa1c:	498d      	ldr	r1, [pc, #564]	@ (800ac54 <__gethex+0x2b0>)
 800aa1e:	2201      	movs	r2, #1
 800aa20:	4630      	mov	r0, r6
 800aa22:	f7ff fedb 	bl	800a7dc <strncmp>
 800aa26:	2800      	cmp	r0, #0
 800aa28:	d13f      	bne.n	800aaaa <__gethex+0x106>
 800aa2a:	b944      	cbnz	r4, 800aa3e <__gethex+0x9a>
 800aa2c:	1c74      	adds	r4, r6, #1
 800aa2e:	4622      	mov	r2, r4
 800aa30:	4616      	mov	r6, r2
 800aa32:	3201      	adds	r2, #1
 800aa34:	7830      	ldrb	r0, [r6, #0]
 800aa36:	f7ff ff9f 	bl	800a978 <__hexdig_fun>
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d1f8      	bne.n	800aa30 <__gethex+0x8c>
 800aa3e:	1ba4      	subs	r4, r4, r6
 800aa40:	00a7      	lsls	r7, r4, #2
 800aa42:	7833      	ldrb	r3, [r6, #0]
 800aa44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800aa48:	2b50      	cmp	r3, #80	@ 0x50
 800aa4a:	d13e      	bne.n	800aaca <__gethex+0x126>
 800aa4c:	7873      	ldrb	r3, [r6, #1]
 800aa4e:	2b2b      	cmp	r3, #43	@ 0x2b
 800aa50:	d033      	beq.n	800aaba <__gethex+0x116>
 800aa52:	2b2d      	cmp	r3, #45	@ 0x2d
 800aa54:	d034      	beq.n	800aac0 <__gethex+0x11c>
 800aa56:	1c71      	adds	r1, r6, #1
 800aa58:	2400      	movs	r4, #0
 800aa5a:	7808      	ldrb	r0, [r1, #0]
 800aa5c:	f7ff ff8c 	bl	800a978 <__hexdig_fun>
 800aa60:	1e43      	subs	r3, r0, #1
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b18      	cmp	r3, #24
 800aa66:	d830      	bhi.n	800aaca <__gethex+0x126>
 800aa68:	f1a0 0210 	sub.w	r2, r0, #16
 800aa6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800aa70:	f7ff ff82 	bl	800a978 <__hexdig_fun>
 800aa74:	f100 3cff 	add.w	ip, r0, #4294967295
 800aa78:	fa5f fc8c 	uxtb.w	ip, ip
 800aa7c:	f1bc 0f18 	cmp.w	ip, #24
 800aa80:	f04f 030a 	mov.w	r3, #10
 800aa84:	d91e      	bls.n	800aac4 <__gethex+0x120>
 800aa86:	b104      	cbz	r4, 800aa8a <__gethex+0xe6>
 800aa88:	4252      	negs	r2, r2
 800aa8a:	4417      	add	r7, r2
 800aa8c:	f8ca 1000 	str.w	r1, [sl]
 800aa90:	b1ed      	cbz	r5, 800aace <__gethex+0x12a>
 800aa92:	f1bb 0f00 	cmp.w	fp, #0
 800aa96:	bf0c      	ite	eq
 800aa98:	2506      	moveq	r5, #6
 800aa9a:	2500      	movne	r5, #0
 800aa9c:	4628      	mov	r0, r5
 800aa9e:	b005      	add	sp, #20
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	2500      	movs	r5, #0
 800aaa6:	462c      	mov	r4, r5
 800aaa8:	e7b0      	b.n	800aa0c <__gethex+0x68>
 800aaaa:	2c00      	cmp	r4, #0
 800aaac:	d1c7      	bne.n	800aa3e <__gethex+0x9a>
 800aaae:	4627      	mov	r7, r4
 800aab0:	e7c7      	b.n	800aa42 <__gethex+0x9e>
 800aab2:	464e      	mov	r6, r9
 800aab4:	462f      	mov	r7, r5
 800aab6:	2501      	movs	r5, #1
 800aab8:	e7c3      	b.n	800aa42 <__gethex+0x9e>
 800aaba:	2400      	movs	r4, #0
 800aabc:	1cb1      	adds	r1, r6, #2
 800aabe:	e7cc      	b.n	800aa5a <__gethex+0xb6>
 800aac0:	2401      	movs	r4, #1
 800aac2:	e7fb      	b.n	800aabc <__gethex+0x118>
 800aac4:	fb03 0002 	mla	r0, r3, r2, r0
 800aac8:	e7ce      	b.n	800aa68 <__gethex+0xc4>
 800aaca:	4631      	mov	r1, r6
 800aacc:	e7de      	b.n	800aa8c <__gethex+0xe8>
 800aace:	eba6 0309 	sub.w	r3, r6, r9
 800aad2:	3b01      	subs	r3, #1
 800aad4:	4629      	mov	r1, r5
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	dc0a      	bgt.n	800aaf0 <__gethex+0x14c>
 800aada:	9801      	ldr	r0, [sp, #4]
 800aadc:	f7fe f8c6 	bl	8008c6c <_Balloc>
 800aae0:	4604      	mov	r4, r0
 800aae2:	b940      	cbnz	r0, 800aaf6 <__gethex+0x152>
 800aae4:	4b5c      	ldr	r3, [pc, #368]	@ (800ac58 <__gethex+0x2b4>)
 800aae6:	4602      	mov	r2, r0
 800aae8:	21e4      	movs	r1, #228	@ 0xe4
 800aaea:	485c      	ldr	r0, [pc, #368]	@ (800ac5c <__gethex+0x2b8>)
 800aaec:	f7ff fec0 	bl	800a870 <__assert_func>
 800aaf0:	3101      	adds	r1, #1
 800aaf2:	105b      	asrs	r3, r3, #1
 800aaf4:	e7ef      	b.n	800aad6 <__gethex+0x132>
 800aaf6:	f100 0a14 	add.w	sl, r0, #20
 800aafa:	2300      	movs	r3, #0
 800aafc:	4655      	mov	r5, sl
 800aafe:	469b      	mov	fp, r3
 800ab00:	45b1      	cmp	r9, r6
 800ab02:	d337      	bcc.n	800ab74 <__gethex+0x1d0>
 800ab04:	f845 bb04 	str.w	fp, [r5], #4
 800ab08:	eba5 050a 	sub.w	r5, r5, sl
 800ab0c:	10ad      	asrs	r5, r5, #2
 800ab0e:	6125      	str	r5, [r4, #16]
 800ab10:	4658      	mov	r0, fp
 800ab12:	f7fe f99d 	bl	8008e50 <__hi0bits>
 800ab16:	016d      	lsls	r5, r5, #5
 800ab18:	f8d8 6000 	ldr.w	r6, [r8]
 800ab1c:	1a2d      	subs	r5, r5, r0
 800ab1e:	42b5      	cmp	r5, r6
 800ab20:	dd54      	ble.n	800abcc <__gethex+0x228>
 800ab22:	1bad      	subs	r5, r5, r6
 800ab24:	4629      	mov	r1, r5
 800ab26:	4620      	mov	r0, r4
 800ab28:	f7fe fd31 	bl	800958e <__any_on>
 800ab2c:	4681      	mov	r9, r0
 800ab2e:	b178      	cbz	r0, 800ab50 <__gethex+0x1ac>
 800ab30:	1e6b      	subs	r3, r5, #1
 800ab32:	1159      	asrs	r1, r3, #5
 800ab34:	f003 021f 	and.w	r2, r3, #31
 800ab38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ab3c:	f04f 0901 	mov.w	r9, #1
 800ab40:	fa09 f202 	lsl.w	r2, r9, r2
 800ab44:	420a      	tst	r2, r1
 800ab46:	d003      	beq.n	800ab50 <__gethex+0x1ac>
 800ab48:	454b      	cmp	r3, r9
 800ab4a:	dc36      	bgt.n	800abba <__gethex+0x216>
 800ab4c:	f04f 0902 	mov.w	r9, #2
 800ab50:	4629      	mov	r1, r5
 800ab52:	4620      	mov	r0, r4
 800ab54:	f7ff febe 	bl	800a8d4 <rshift>
 800ab58:	442f      	add	r7, r5
 800ab5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab5e:	42bb      	cmp	r3, r7
 800ab60:	da42      	bge.n	800abe8 <__gethex+0x244>
 800ab62:	9801      	ldr	r0, [sp, #4]
 800ab64:	4621      	mov	r1, r4
 800ab66:	f7fe f8c1 	bl	8008cec <_Bfree>
 800ab6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	25a3      	movs	r5, #163	@ 0xa3
 800ab72:	e793      	b.n	800aa9c <__gethex+0xf8>
 800ab74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ab78:	2a2e      	cmp	r2, #46	@ 0x2e
 800ab7a:	d012      	beq.n	800aba2 <__gethex+0x1fe>
 800ab7c:	2b20      	cmp	r3, #32
 800ab7e:	d104      	bne.n	800ab8a <__gethex+0x1e6>
 800ab80:	f845 bb04 	str.w	fp, [r5], #4
 800ab84:	f04f 0b00 	mov.w	fp, #0
 800ab88:	465b      	mov	r3, fp
 800ab8a:	7830      	ldrb	r0, [r6, #0]
 800ab8c:	9303      	str	r3, [sp, #12]
 800ab8e:	f7ff fef3 	bl	800a978 <__hexdig_fun>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	f000 000f 	and.w	r0, r0, #15
 800ab98:	4098      	lsls	r0, r3
 800ab9a:	ea4b 0b00 	orr.w	fp, fp, r0
 800ab9e:	3304      	adds	r3, #4
 800aba0:	e7ae      	b.n	800ab00 <__gethex+0x15c>
 800aba2:	45b1      	cmp	r9, r6
 800aba4:	d8ea      	bhi.n	800ab7c <__gethex+0x1d8>
 800aba6:	492b      	ldr	r1, [pc, #172]	@ (800ac54 <__gethex+0x2b0>)
 800aba8:	9303      	str	r3, [sp, #12]
 800abaa:	2201      	movs	r2, #1
 800abac:	4630      	mov	r0, r6
 800abae:	f7ff fe15 	bl	800a7dc <strncmp>
 800abb2:	9b03      	ldr	r3, [sp, #12]
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d1e1      	bne.n	800ab7c <__gethex+0x1d8>
 800abb8:	e7a2      	b.n	800ab00 <__gethex+0x15c>
 800abba:	1ea9      	subs	r1, r5, #2
 800abbc:	4620      	mov	r0, r4
 800abbe:	f7fe fce6 	bl	800958e <__any_on>
 800abc2:	2800      	cmp	r0, #0
 800abc4:	d0c2      	beq.n	800ab4c <__gethex+0x1a8>
 800abc6:	f04f 0903 	mov.w	r9, #3
 800abca:	e7c1      	b.n	800ab50 <__gethex+0x1ac>
 800abcc:	da09      	bge.n	800abe2 <__gethex+0x23e>
 800abce:	1b75      	subs	r5, r6, r5
 800abd0:	4621      	mov	r1, r4
 800abd2:	9801      	ldr	r0, [sp, #4]
 800abd4:	462a      	mov	r2, r5
 800abd6:	f7fe faa1 	bl	800911c <__lshift>
 800abda:	1b7f      	subs	r7, r7, r5
 800abdc:	4604      	mov	r4, r0
 800abde:	f100 0a14 	add.w	sl, r0, #20
 800abe2:	f04f 0900 	mov.w	r9, #0
 800abe6:	e7b8      	b.n	800ab5a <__gethex+0x1b6>
 800abe8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800abec:	42bd      	cmp	r5, r7
 800abee:	dd6f      	ble.n	800acd0 <__gethex+0x32c>
 800abf0:	1bed      	subs	r5, r5, r7
 800abf2:	42ae      	cmp	r6, r5
 800abf4:	dc34      	bgt.n	800ac60 <__gethex+0x2bc>
 800abf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800abfa:	2b02      	cmp	r3, #2
 800abfc:	d022      	beq.n	800ac44 <__gethex+0x2a0>
 800abfe:	2b03      	cmp	r3, #3
 800ac00:	d024      	beq.n	800ac4c <__gethex+0x2a8>
 800ac02:	2b01      	cmp	r3, #1
 800ac04:	d115      	bne.n	800ac32 <__gethex+0x28e>
 800ac06:	42ae      	cmp	r6, r5
 800ac08:	d113      	bne.n	800ac32 <__gethex+0x28e>
 800ac0a:	2e01      	cmp	r6, #1
 800ac0c:	d10b      	bne.n	800ac26 <__gethex+0x282>
 800ac0e:	9a02      	ldr	r2, [sp, #8]
 800ac10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ac14:	6013      	str	r3, [r2, #0]
 800ac16:	2301      	movs	r3, #1
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	f8ca 3000 	str.w	r3, [sl]
 800ac1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac20:	2562      	movs	r5, #98	@ 0x62
 800ac22:	601c      	str	r4, [r3, #0]
 800ac24:	e73a      	b.n	800aa9c <__gethex+0xf8>
 800ac26:	1e71      	subs	r1, r6, #1
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f7fe fcb0 	bl	800958e <__any_on>
 800ac2e:	2800      	cmp	r0, #0
 800ac30:	d1ed      	bne.n	800ac0e <__gethex+0x26a>
 800ac32:	9801      	ldr	r0, [sp, #4]
 800ac34:	4621      	mov	r1, r4
 800ac36:	f7fe f859 	bl	8008cec <_Bfree>
 800ac3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	2550      	movs	r5, #80	@ 0x50
 800ac42:	e72b      	b.n	800aa9c <__gethex+0xf8>
 800ac44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d1f3      	bne.n	800ac32 <__gethex+0x28e>
 800ac4a:	e7e0      	b.n	800ac0e <__gethex+0x26a>
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1dd      	bne.n	800ac0e <__gethex+0x26a>
 800ac52:	e7ee      	b.n	800ac32 <__gethex+0x28e>
 800ac54:	0800c980 	.word	0x0800c980
 800ac58:	0800c819 	.word	0x0800c819
 800ac5c:	0800cb2e 	.word	0x0800cb2e
 800ac60:	1e6f      	subs	r7, r5, #1
 800ac62:	f1b9 0f00 	cmp.w	r9, #0
 800ac66:	d130      	bne.n	800acca <__gethex+0x326>
 800ac68:	b127      	cbz	r7, 800ac74 <__gethex+0x2d0>
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	4620      	mov	r0, r4
 800ac6e:	f7fe fc8e 	bl	800958e <__any_on>
 800ac72:	4681      	mov	r9, r0
 800ac74:	117a      	asrs	r2, r7, #5
 800ac76:	2301      	movs	r3, #1
 800ac78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ac7c:	f007 071f 	and.w	r7, r7, #31
 800ac80:	40bb      	lsls	r3, r7
 800ac82:	4213      	tst	r3, r2
 800ac84:	4629      	mov	r1, r5
 800ac86:	4620      	mov	r0, r4
 800ac88:	bf18      	it	ne
 800ac8a:	f049 0902 	orrne.w	r9, r9, #2
 800ac8e:	f7ff fe21 	bl	800a8d4 <rshift>
 800ac92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ac96:	1b76      	subs	r6, r6, r5
 800ac98:	2502      	movs	r5, #2
 800ac9a:	f1b9 0f00 	cmp.w	r9, #0
 800ac9e:	d047      	beq.n	800ad30 <__gethex+0x38c>
 800aca0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d015      	beq.n	800acd4 <__gethex+0x330>
 800aca8:	2b03      	cmp	r3, #3
 800acaa:	d017      	beq.n	800acdc <__gethex+0x338>
 800acac:	2b01      	cmp	r3, #1
 800acae:	d109      	bne.n	800acc4 <__gethex+0x320>
 800acb0:	f019 0f02 	tst.w	r9, #2
 800acb4:	d006      	beq.n	800acc4 <__gethex+0x320>
 800acb6:	f8da 3000 	ldr.w	r3, [sl]
 800acba:	ea49 0903 	orr.w	r9, r9, r3
 800acbe:	f019 0f01 	tst.w	r9, #1
 800acc2:	d10e      	bne.n	800ace2 <__gethex+0x33e>
 800acc4:	f045 0510 	orr.w	r5, r5, #16
 800acc8:	e032      	b.n	800ad30 <__gethex+0x38c>
 800acca:	f04f 0901 	mov.w	r9, #1
 800acce:	e7d1      	b.n	800ac74 <__gethex+0x2d0>
 800acd0:	2501      	movs	r5, #1
 800acd2:	e7e2      	b.n	800ac9a <__gethex+0x2f6>
 800acd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acd6:	f1c3 0301 	rsb	r3, r3, #1
 800acda:	930f      	str	r3, [sp, #60]	@ 0x3c
 800acdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0f0      	beq.n	800acc4 <__gethex+0x320>
 800ace2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ace6:	f104 0314 	add.w	r3, r4, #20
 800acea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800acee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800acf2:	f04f 0c00 	mov.w	ip, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ad00:	d01b      	beq.n	800ad3a <__gethex+0x396>
 800ad02:	3201      	adds	r2, #1
 800ad04:	6002      	str	r2, [r0, #0]
 800ad06:	2d02      	cmp	r5, #2
 800ad08:	f104 0314 	add.w	r3, r4, #20
 800ad0c:	d13c      	bne.n	800ad88 <__gethex+0x3e4>
 800ad0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad12:	3a01      	subs	r2, #1
 800ad14:	42b2      	cmp	r2, r6
 800ad16:	d109      	bne.n	800ad2c <__gethex+0x388>
 800ad18:	1171      	asrs	r1, r6, #5
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ad20:	f006 061f 	and.w	r6, r6, #31
 800ad24:	fa02 f606 	lsl.w	r6, r2, r6
 800ad28:	421e      	tst	r6, r3
 800ad2a:	d13a      	bne.n	800ada2 <__gethex+0x3fe>
 800ad2c:	f045 0520 	orr.w	r5, r5, #32
 800ad30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad32:	601c      	str	r4, [r3, #0]
 800ad34:	9b02      	ldr	r3, [sp, #8]
 800ad36:	601f      	str	r7, [r3, #0]
 800ad38:	e6b0      	b.n	800aa9c <__gethex+0xf8>
 800ad3a:	4299      	cmp	r1, r3
 800ad3c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ad40:	d8d9      	bhi.n	800acf6 <__gethex+0x352>
 800ad42:	68a3      	ldr	r3, [r4, #8]
 800ad44:	459b      	cmp	fp, r3
 800ad46:	db17      	blt.n	800ad78 <__gethex+0x3d4>
 800ad48:	6861      	ldr	r1, [r4, #4]
 800ad4a:	9801      	ldr	r0, [sp, #4]
 800ad4c:	3101      	adds	r1, #1
 800ad4e:	f7fd ff8d 	bl	8008c6c <_Balloc>
 800ad52:	4681      	mov	r9, r0
 800ad54:	b918      	cbnz	r0, 800ad5e <__gethex+0x3ba>
 800ad56:	4b1a      	ldr	r3, [pc, #104]	@ (800adc0 <__gethex+0x41c>)
 800ad58:	4602      	mov	r2, r0
 800ad5a:	2184      	movs	r1, #132	@ 0x84
 800ad5c:	e6c5      	b.n	800aaea <__gethex+0x146>
 800ad5e:	6922      	ldr	r2, [r4, #16]
 800ad60:	3202      	adds	r2, #2
 800ad62:	f104 010c 	add.w	r1, r4, #12
 800ad66:	0092      	lsls	r2, r2, #2
 800ad68:	300c      	adds	r0, #12
 800ad6a:	f7ff fd6b 	bl	800a844 <memcpy>
 800ad6e:	4621      	mov	r1, r4
 800ad70:	9801      	ldr	r0, [sp, #4]
 800ad72:	f7fd ffbb 	bl	8008cec <_Bfree>
 800ad76:	464c      	mov	r4, r9
 800ad78:	6923      	ldr	r3, [r4, #16]
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad80:	6122      	str	r2, [r4, #16]
 800ad82:	2201      	movs	r2, #1
 800ad84:	615a      	str	r2, [r3, #20]
 800ad86:	e7be      	b.n	800ad06 <__gethex+0x362>
 800ad88:	6922      	ldr	r2, [r4, #16]
 800ad8a:	455a      	cmp	r2, fp
 800ad8c:	dd0b      	ble.n	800ada6 <__gethex+0x402>
 800ad8e:	2101      	movs	r1, #1
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7ff fd9f 	bl	800a8d4 <rshift>
 800ad96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad9a:	3701      	adds	r7, #1
 800ad9c:	42bb      	cmp	r3, r7
 800ad9e:	f6ff aee0 	blt.w	800ab62 <__gethex+0x1be>
 800ada2:	2501      	movs	r5, #1
 800ada4:	e7c2      	b.n	800ad2c <__gethex+0x388>
 800ada6:	f016 061f 	ands.w	r6, r6, #31
 800adaa:	d0fa      	beq.n	800ada2 <__gethex+0x3fe>
 800adac:	4453      	add	r3, sl
 800adae:	f1c6 0620 	rsb	r6, r6, #32
 800adb2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800adb6:	f7fe f84b 	bl	8008e50 <__hi0bits>
 800adba:	42b0      	cmp	r0, r6
 800adbc:	dbe7      	blt.n	800ad8e <__gethex+0x3ea>
 800adbe:	e7f0      	b.n	800ada2 <__gethex+0x3fe>
 800adc0:	0800c819 	.word	0x0800c819

0800adc4 <L_shift>:
 800adc4:	f1c2 0208 	rsb	r2, r2, #8
 800adc8:	0092      	lsls	r2, r2, #2
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	f1c2 0620 	rsb	r6, r2, #32
 800add0:	6843      	ldr	r3, [r0, #4]
 800add2:	6804      	ldr	r4, [r0, #0]
 800add4:	fa03 f506 	lsl.w	r5, r3, r6
 800add8:	432c      	orrs	r4, r5
 800adda:	40d3      	lsrs	r3, r2
 800addc:	6004      	str	r4, [r0, #0]
 800adde:	f840 3f04 	str.w	r3, [r0, #4]!
 800ade2:	4288      	cmp	r0, r1
 800ade4:	d3f4      	bcc.n	800add0 <L_shift+0xc>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}

0800ade8 <__match>:
 800ade8:	b530      	push	{r4, r5, lr}
 800adea:	6803      	ldr	r3, [r0, #0]
 800adec:	3301      	adds	r3, #1
 800adee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adf2:	b914      	cbnz	r4, 800adfa <__match+0x12>
 800adf4:	6003      	str	r3, [r0, #0]
 800adf6:	2001      	movs	r0, #1
 800adf8:	bd30      	pop	{r4, r5, pc}
 800adfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adfe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ae02:	2d19      	cmp	r5, #25
 800ae04:	bf98      	it	ls
 800ae06:	3220      	addls	r2, #32
 800ae08:	42a2      	cmp	r2, r4
 800ae0a:	d0f0      	beq.n	800adee <__match+0x6>
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	e7f3      	b.n	800adf8 <__match+0x10>

0800ae10 <__hexnan>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	680b      	ldr	r3, [r1, #0]
 800ae16:	6801      	ldr	r1, [r0, #0]
 800ae18:	115e      	asrs	r6, r3, #5
 800ae1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ae1e:	f013 031f 	ands.w	r3, r3, #31
 800ae22:	b087      	sub	sp, #28
 800ae24:	bf18      	it	ne
 800ae26:	3604      	addne	r6, #4
 800ae28:	2500      	movs	r5, #0
 800ae2a:	1f37      	subs	r7, r6, #4
 800ae2c:	4682      	mov	sl, r0
 800ae2e:	4690      	mov	r8, r2
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	f846 5c04 	str.w	r5, [r6, #-4]
 800ae36:	46b9      	mov	r9, r7
 800ae38:	463c      	mov	r4, r7
 800ae3a:	9502      	str	r5, [sp, #8]
 800ae3c:	46ab      	mov	fp, r5
 800ae3e:	784a      	ldrb	r2, [r1, #1]
 800ae40:	1c4b      	adds	r3, r1, #1
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	b342      	cbz	r2, 800ae98 <__hexnan+0x88>
 800ae46:	4610      	mov	r0, r2
 800ae48:	9105      	str	r1, [sp, #20]
 800ae4a:	9204      	str	r2, [sp, #16]
 800ae4c:	f7ff fd94 	bl	800a978 <__hexdig_fun>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d151      	bne.n	800aef8 <__hexnan+0xe8>
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	9905      	ldr	r1, [sp, #20]
 800ae58:	2a20      	cmp	r2, #32
 800ae5a:	d818      	bhi.n	800ae8e <__hexnan+0x7e>
 800ae5c:	9b02      	ldr	r3, [sp, #8]
 800ae5e:	459b      	cmp	fp, r3
 800ae60:	dd13      	ble.n	800ae8a <__hexnan+0x7a>
 800ae62:	454c      	cmp	r4, r9
 800ae64:	d206      	bcs.n	800ae74 <__hexnan+0x64>
 800ae66:	2d07      	cmp	r5, #7
 800ae68:	dc04      	bgt.n	800ae74 <__hexnan+0x64>
 800ae6a:	462a      	mov	r2, r5
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	4620      	mov	r0, r4
 800ae70:	f7ff ffa8 	bl	800adc4 <L_shift>
 800ae74:	4544      	cmp	r4, r8
 800ae76:	d952      	bls.n	800af1e <__hexnan+0x10e>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	f1a4 0904 	sub.w	r9, r4, #4
 800ae7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae82:	f8cd b008 	str.w	fp, [sp, #8]
 800ae86:	464c      	mov	r4, r9
 800ae88:	461d      	mov	r5, r3
 800ae8a:	9903      	ldr	r1, [sp, #12]
 800ae8c:	e7d7      	b.n	800ae3e <__hexnan+0x2e>
 800ae8e:	2a29      	cmp	r2, #41	@ 0x29
 800ae90:	d157      	bne.n	800af42 <__hexnan+0x132>
 800ae92:	3102      	adds	r1, #2
 800ae94:	f8ca 1000 	str.w	r1, [sl]
 800ae98:	f1bb 0f00 	cmp.w	fp, #0
 800ae9c:	d051      	beq.n	800af42 <__hexnan+0x132>
 800ae9e:	454c      	cmp	r4, r9
 800aea0:	d206      	bcs.n	800aeb0 <__hexnan+0xa0>
 800aea2:	2d07      	cmp	r5, #7
 800aea4:	dc04      	bgt.n	800aeb0 <__hexnan+0xa0>
 800aea6:	462a      	mov	r2, r5
 800aea8:	4649      	mov	r1, r9
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f7ff ff8a 	bl	800adc4 <L_shift>
 800aeb0:	4544      	cmp	r4, r8
 800aeb2:	d936      	bls.n	800af22 <__hexnan+0x112>
 800aeb4:	f1a8 0204 	sub.w	r2, r8, #4
 800aeb8:	4623      	mov	r3, r4
 800aeba:	f853 1b04 	ldr.w	r1, [r3], #4
 800aebe:	f842 1f04 	str.w	r1, [r2, #4]!
 800aec2:	429f      	cmp	r7, r3
 800aec4:	d2f9      	bcs.n	800aeba <__hexnan+0xaa>
 800aec6:	1b3b      	subs	r3, r7, r4
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	3304      	adds	r3, #4
 800aece:	3401      	adds	r4, #1
 800aed0:	3e03      	subs	r6, #3
 800aed2:	42b4      	cmp	r4, r6
 800aed4:	bf88      	it	hi
 800aed6:	2304      	movhi	r3, #4
 800aed8:	4443      	add	r3, r8
 800aeda:	2200      	movs	r2, #0
 800aedc:	f843 2b04 	str.w	r2, [r3], #4
 800aee0:	429f      	cmp	r7, r3
 800aee2:	d2fb      	bcs.n	800aedc <__hexnan+0xcc>
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	b91b      	cbnz	r3, 800aef0 <__hexnan+0xe0>
 800aee8:	4547      	cmp	r7, r8
 800aeea:	d128      	bne.n	800af3e <__hexnan+0x12e>
 800aeec:	2301      	movs	r3, #1
 800aeee:	603b      	str	r3, [r7, #0]
 800aef0:	2005      	movs	r0, #5
 800aef2:	b007      	add	sp, #28
 800aef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef8:	3501      	adds	r5, #1
 800aefa:	2d08      	cmp	r5, #8
 800aefc:	f10b 0b01 	add.w	fp, fp, #1
 800af00:	dd06      	ble.n	800af10 <__hexnan+0x100>
 800af02:	4544      	cmp	r4, r8
 800af04:	d9c1      	bls.n	800ae8a <__hexnan+0x7a>
 800af06:	2300      	movs	r3, #0
 800af08:	f844 3c04 	str.w	r3, [r4, #-4]
 800af0c:	2501      	movs	r5, #1
 800af0e:	3c04      	subs	r4, #4
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	f000 000f 	and.w	r0, r0, #15
 800af16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800af1a:	6020      	str	r0, [r4, #0]
 800af1c:	e7b5      	b.n	800ae8a <__hexnan+0x7a>
 800af1e:	2508      	movs	r5, #8
 800af20:	e7b3      	b.n	800ae8a <__hexnan+0x7a>
 800af22:	9b01      	ldr	r3, [sp, #4]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d0dd      	beq.n	800aee4 <__hexnan+0xd4>
 800af28:	f1c3 0320 	rsb	r3, r3, #32
 800af2c:	f04f 32ff 	mov.w	r2, #4294967295
 800af30:	40da      	lsrs	r2, r3
 800af32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800af36:	4013      	ands	r3, r2
 800af38:	f846 3c04 	str.w	r3, [r6, #-4]
 800af3c:	e7d2      	b.n	800aee4 <__hexnan+0xd4>
 800af3e:	3f04      	subs	r7, #4
 800af40:	e7d0      	b.n	800aee4 <__hexnan+0xd4>
 800af42:	2004      	movs	r0, #4
 800af44:	e7d5      	b.n	800aef2 <__hexnan+0xe2>

0800af46 <__ascii_mbtowc>:
 800af46:	b082      	sub	sp, #8
 800af48:	b901      	cbnz	r1, 800af4c <__ascii_mbtowc+0x6>
 800af4a:	a901      	add	r1, sp, #4
 800af4c:	b142      	cbz	r2, 800af60 <__ascii_mbtowc+0x1a>
 800af4e:	b14b      	cbz	r3, 800af64 <__ascii_mbtowc+0x1e>
 800af50:	7813      	ldrb	r3, [r2, #0]
 800af52:	600b      	str	r3, [r1, #0]
 800af54:	7812      	ldrb	r2, [r2, #0]
 800af56:	1e10      	subs	r0, r2, #0
 800af58:	bf18      	it	ne
 800af5a:	2001      	movne	r0, #1
 800af5c:	b002      	add	sp, #8
 800af5e:	4770      	bx	lr
 800af60:	4610      	mov	r0, r2
 800af62:	e7fb      	b.n	800af5c <__ascii_mbtowc+0x16>
 800af64:	f06f 0001 	mvn.w	r0, #1
 800af68:	e7f8      	b.n	800af5c <__ascii_mbtowc+0x16>

0800af6a <_realloc_r>:
 800af6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af6e:	4680      	mov	r8, r0
 800af70:	4615      	mov	r5, r2
 800af72:	460c      	mov	r4, r1
 800af74:	b921      	cbnz	r1, 800af80 <_realloc_r+0x16>
 800af76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af7a:	4611      	mov	r1, r2
 800af7c:	f7fb bd9a 	b.w	8006ab4 <_malloc_r>
 800af80:	b92a      	cbnz	r2, 800af8e <_realloc_r+0x24>
 800af82:	f7fd fe29 	bl	8008bd8 <_free_r>
 800af86:	2400      	movs	r4, #0
 800af88:	4620      	mov	r0, r4
 800af8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8e:	f000 f839 	bl	800b004 <_malloc_usable_size_r>
 800af92:	4285      	cmp	r5, r0
 800af94:	4606      	mov	r6, r0
 800af96:	d802      	bhi.n	800af9e <_realloc_r+0x34>
 800af98:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800af9c:	d8f4      	bhi.n	800af88 <_realloc_r+0x1e>
 800af9e:	4629      	mov	r1, r5
 800afa0:	4640      	mov	r0, r8
 800afa2:	f7fb fd87 	bl	8006ab4 <_malloc_r>
 800afa6:	4607      	mov	r7, r0
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d0ec      	beq.n	800af86 <_realloc_r+0x1c>
 800afac:	42b5      	cmp	r5, r6
 800afae:	462a      	mov	r2, r5
 800afb0:	4621      	mov	r1, r4
 800afb2:	bf28      	it	cs
 800afb4:	4632      	movcs	r2, r6
 800afb6:	f7ff fc45 	bl	800a844 <memcpy>
 800afba:	4621      	mov	r1, r4
 800afbc:	4640      	mov	r0, r8
 800afbe:	f7fd fe0b 	bl	8008bd8 <_free_r>
 800afc2:	463c      	mov	r4, r7
 800afc4:	e7e0      	b.n	800af88 <_realloc_r+0x1e>

0800afc6 <__ascii_wctomb>:
 800afc6:	4603      	mov	r3, r0
 800afc8:	4608      	mov	r0, r1
 800afca:	b141      	cbz	r1, 800afde <__ascii_wctomb+0x18>
 800afcc:	2aff      	cmp	r2, #255	@ 0xff
 800afce:	d904      	bls.n	800afda <__ascii_wctomb+0x14>
 800afd0:	228a      	movs	r2, #138	@ 0x8a
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	4770      	bx	lr
 800afda:	700a      	strb	r2, [r1, #0]
 800afdc:	2001      	movs	r0, #1
 800afde:	4770      	bx	lr

0800afe0 <fiprintf>:
 800afe0:	b40e      	push	{r1, r2, r3}
 800afe2:	b503      	push	{r0, r1, lr}
 800afe4:	4601      	mov	r1, r0
 800afe6:	ab03      	add	r3, sp, #12
 800afe8:	4805      	ldr	r0, [pc, #20]	@ (800b000 <fiprintf+0x20>)
 800afea:	f853 2b04 	ldr.w	r2, [r3], #4
 800afee:	6800      	ldr	r0, [r0, #0]
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f000 f839 	bl	800b068 <_vfiprintf_r>
 800aff6:	b002      	add	sp, #8
 800aff8:	f85d eb04 	ldr.w	lr, [sp], #4
 800affc:	b003      	add	sp, #12
 800affe:	4770      	bx	lr
 800b000:	2000001c 	.word	0x2000001c

0800b004 <_malloc_usable_size_r>:
 800b004:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b008:	1f18      	subs	r0, r3, #4
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bfbc      	itt	lt
 800b00e:	580b      	ldrlt	r3, [r1, r0]
 800b010:	18c0      	addlt	r0, r0, r3
 800b012:	4770      	bx	lr

0800b014 <__sfputc_r>:
 800b014:	6893      	ldr	r3, [r2, #8]
 800b016:	3b01      	subs	r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	b410      	push	{r4}
 800b01c:	6093      	str	r3, [r2, #8]
 800b01e:	da08      	bge.n	800b032 <__sfputc_r+0x1e>
 800b020:	6994      	ldr	r4, [r2, #24]
 800b022:	42a3      	cmp	r3, r4
 800b024:	db01      	blt.n	800b02a <__sfputc_r+0x16>
 800b026:	290a      	cmp	r1, #10
 800b028:	d103      	bne.n	800b032 <__sfputc_r+0x1e>
 800b02a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b02e:	f7fc be16 	b.w	8007c5e <__swbuf_r>
 800b032:	6813      	ldr	r3, [r2, #0]
 800b034:	1c58      	adds	r0, r3, #1
 800b036:	6010      	str	r0, [r2, #0]
 800b038:	7019      	strb	r1, [r3, #0]
 800b03a:	4608      	mov	r0, r1
 800b03c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <__sfputs_r>:
 800b042:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b044:	4606      	mov	r6, r0
 800b046:	460f      	mov	r7, r1
 800b048:	4614      	mov	r4, r2
 800b04a:	18d5      	adds	r5, r2, r3
 800b04c:	42ac      	cmp	r4, r5
 800b04e:	d101      	bne.n	800b054 <__sfputs_r+0x12>
 800b050:	2000      	movs	r0, #0
 800b052:	e007      	b.n	800b064 <__sfputs_r+0x22>
 800b054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b058:	463a      	mov	r2, r7
 800b05a:	4630      	mov	r0, r6
 800b05c:	f7ff ffda 	bl	800b014 <__sfputc_r>
 800b060:	1c43      	adds	r3, r0, #1
 800b062:	d1f3      	bne.n	800b04c <__sfputs_r+0xa>
 800b064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b068 <_vfiprintf_r>:
 800b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	460d      	mov	r5, r1
 800b06e:	b09d      	sub	sp, #116	@ 0x74
 800b070:	4614      	mov	r4, r2
 800b072:	4698      	mov	r8, r3
 800b074:	4606      	mov	r6, r0
 800b076:	b118      	cbz	r0, 800b080 <_vfiprintf_r+0x18>
 800b078:	6a03      	ldr	r3, [r0, #32]
 800b07a:	b90b      	cbnz	r3, 800b080 <_vfiprintf_r+0x18>
 800b07c:	f7fc fc9e 	bl	80079bc <__sinit>
 800b080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b082:	07d9      	lsls	r1, r3, #31
 800b084:	d405      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	059a      	lsls	r2, r3, #22
 800b08a:	d402      	bmi.n	800b092 <_vfiprintf_r+0x2a>
 800b08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08e:	f7fc ff4c 	bl	8007f2a <__retarget_lock_acquire_recursive>
 800b092:	89ab      	ldrh	r3, [r5, #12]
 800b094:	071b      	lsls	r3, r3, #28
 800b096:	d501      	bpl.n	800b09c <_vfiprintf_r+0x34>
 800b098:	692b      	ldr	r3, [r5, #16]
 800b09a:	b99b      	cbnz	r3, 800b0c4 <_vfiprintf_r+0x5c>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7fc fe1c 	bl	8007cdc <__swsetup_r>
 800b0a4:	b170      	cbz	r0, 800b0c4 <_vfiprintf_r+0x5c>
 800b0a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a8:	07dc      	lsls	r4, r3, #31
 800b0aa:	d504      	bpl.n	800b0b6 <_vfiprintf_r+0x4e>
 800b0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b0b0:	b01d      	add	sp, #116	@ 0x74
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	89ab      	ldrh	r3, [r5, #12]
 800b0b8:	0598      	lsls	r0, r3, #22
 800b0ba:	d4f7      	bmi.n	800b0ac <_vfiprintf_r+0x44>
 800b0bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0be:	f7fc ff35 	bl	8007f2c <__retarget_lock_release_recursive>
 800b0c2:	e7f3      	b.n	800b0ac <_vfiprintf_r+0x44>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0c8:	2320      	movs	r3, #32
 800b0ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0d2:	2330      	movs	r3, #48	@ 0x30
 800b0d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b284 <_vfiprintf_r+0x21c>
 800b0d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0dc:	f04f 0901 	mov.w	r9, #1
 800b0e0:	4623      	mov	r3, r4
 800b0e2:	469a      	mov	sl, r3
 800b0e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e8:	b10a      	cbz	r2, 800b0ee <_vfiprintf_r+0x86>
 800b0ea:	2a25      	cmp	r2, #37	@ 0x25
 800b0ec:	d1f9      	bne.n	800b0e2 <_vfiprintf_r+0x7a>
 800b0ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b0f2:	d00b      	beq.n	800b10c <_vfiprintf_r+0xa4>
 800b0f4:	465b      	mov	r3, fp
 800b0f6:	4622      	mov	r2, r4
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	f7ff ffa1 	bl	800b042 <__sfputs_r>
 800b100:	3001      	adds	r0, #1
 800b102:	f000 80a7 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b108:	445a      	add	r2, fp
 800b10a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b10c:	f89a 3000 	ldrb.w	r3, [sl]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 809f 	beq.w	800b254 <_vfiprintf_r+0x1ec>
 800b116:	2300      	movs	r3, #0
 800b118:	f04f 32ff 	mov.w	r2, #4294967295
 800b11c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b120:	f10a 0a01 	add.w	sl, sl, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9307      	str	r3, [sp, #28]
 800b128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b12c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b12e:	4654      	mov	r4, sl
 800b130:	2205      	movs	r2, #5
 800b132:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b136:	4853      	ldr	r0, [pc, #332]	@ (800b284 <_vfiprintf_r+0x21c>)
 800b138:	f7f5 f86a 	bl	8000210 <memchr>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	b9d8      	cbnz	r0, 800b178 <_vfiprintf_r+0x110>
 800b140:	06d1      	lsls	r1, r2, #27
 800b142:	bf44      	itt	mi
 800b144:	2320      	movmi	r3, #32
 800b146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b14a:	0713      	lsls	r3, r2, #28
 800b14c:	bf44      	itt	mi
 800b14e:	232b      	movmi	r3, #43	@ 0x2b
 800b150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b154:	f89a 3000 	ldrb.w	r3, [sl]
 800b158:	2b2a      	cmp	r3, #42	@ 0x2a
 800b15a:	d015      	beq.n	800b188 <_vfiprintf_r+0x120>
 800b15c:	9a07      	ldr	r2, [sp, #28]
 800b15e:	4654      	mov	r4, sl
 800b160:	2000      	movs	r0, #0
 800b162:	f04f 0c0a 	mov.w	ip, #10
 800b166:	4621      	mov	r1, r4
 800b168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b16c:	3b30      	subs	r3, #48	@ 0x30
 800b16e:	2b09      	cmp	r3, #9
 800b170:	d94b      	bls.n	800b20a <_vfiprintf_r+0x1a2>
 800b172:	b1b0      	cbz	r0, 800b1a2 <_vfiprintf_r+0x13a>
 800b174:	9207      	str	r2, [sp, #28]
 800b176:	e014      	b.n	800b1a2 <_vfiprintf_r+0x13a>
 800b178:	eba0 0308 	sub.w	r3, r0, r8
 800b17c:	fa09 f303 	lsl.w	r3, r9, r3
 800b180:	4313      	orrs	r3, r2
 800b182:	9304      	str	r3, [sp, #16]
 800b184:	46a2      	mov	sl, r4
 800b186:	e7d2      	b.n	800b12e <_vfiprintf_r+0xc6>
 800b188:	9b03      	ldr	r3, [sp, #12]
 800b18a:	1d19      	adds	r1, r3, #4
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	9103      	str	r1, [sp, #12]
 800b190:	2b00      	cmp	r3, #0
 800b192:	bfbb      	ittet	lt
 800b194:	425b      	neglt	r3, r3
 800b196:	f042 0202 	orrlt.w	r2, r2, #2
 800b19a:	9307      	strge	r3, [sp, #28]
 800b19c:	9307      	strlt	r3, [sp, #28]
 800b19e:	bfb8      	it	lt
 800b1a0:	9204      	strlt	r2, [sp, #16]
 800b1a2:	7823      	ldrb	r3, [r4, #0]
 800b1a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1a6:	d10a      	bne.n	800b1be <_vfiprintf_r+0x156>
 800b1a8:	7863      	ldrb	r3, [r4, #1]
 800b1aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1ac:	d132      	bne.n	800b214 <_vfiprintf_r+0x1ac>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d1a      	adds	r2, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9203      	str	r2, [sp, #12]
 800b1b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1ba:	3402      	adds	r4, #2
 800b1bc:	9305      	str	r3, [sp, #20]
 800b1be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b294 <_vfiprintf_r+0x22c>
 800b1c2:	7821      	ldrb	r1, [r4, #0]
 800b1c4:	2203      	movs	r2, #3
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	f7f5 f822 	bl	8000210 <memchr>
 800b1cc:	b138      	cbz	r0, 800b1de <_vfiprintf_r+0x176>
 800b1ce:	9b04      	ldr	r3, [sp, #16]
 800b1d0:	eba0 000a 	sub.w	r0, r0, sl
 800b1d4:	2240      	movs	r2, #64	@ 0x40
 800b1d6:	4082      	lsls	r2, r0
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	3401      	adds	r4, #1
 800b1dc:	9304      	str	r3, [sp, #16]
 800b1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1e2:	4829      	ldr	r0, [pc, #164]	@ (800b288 <_vfiprintf_r+0x220>)
 800b1e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1e8:	2206      	movs	r2, #6
 800b1ea:	f7f5 f811 	bl	8000210 <memchr>
 800b1ee:	2800      	cmp	r0, #0
 800b1f0:	d03f      	beq.n	800b272 <_vfiprintf_r+0x20a>
 800b1f2:	4b26      	ldr	r3, [pc, #152]	@ (800b28c <_vfiprintf_r+0x224>)
 800b1f4:	bb1b      	cbnz	r3, 800b23e <_vfiprintf_r+0x1d6>
 800b1f6:	9b03      	ldr	r3, [sp, #12]
 800b1f8:	3307      	adds	r3, #7
 800b1fa:	f023 0307 	bic.w	r3, r3, #7
 800b1fe:	3308      	adds	r3, #8
 800b200:	9303      	str	r3, [sp, #12]
 800b202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b204:	443b      	add	r3, r7
 800b206:	9309      	str	r3, [sp, #36]	@ 0x24
 800b208:	e76a      	b.n	800b0e0 <_vfiprintf_r+0x78>
 800b20a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b20e:	460c      	mov	r4, r1
 800b210:	2001      	movs	r0, #1
 800b212:	e7a8      	b.n	800b166 <_vfiprintf_r+0xfe>
 800b214:	2300      	movs	r3, #0
 800b216:	3401      	adds	r4, #1
 800b218:	9305      	str	r3, [sp, #20]
 800b21a:	4619      	mov	r1, r3
 800b21c:	f04f 0c0a 	mov.w	ip, #10
 800b220:	4620      	mov	r0, r4
 800b222:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b226:	3a30      	subs	r2, #48	@ 0x30
 800b228:	2a09      	cmp	r2, #9
 800b22a:	d903      	bls.n	800b234 <_vfiprintf_r+0x1cc>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d0c6      	beq.n	800b1be <_vfiprintf_r+0x156>
 800b230:	9105      	str	r1, [sp, #20]
 800b232:	e7c4      	b.n	800b1be <_vfiprintf_r+0x156>
 800b234:	fb0c 2101 	mla	r1, ip, r1, r2
 800b238:	4604      	mov	r4, r0
 800b23a:	2301      	movs	r3, #1
 800b23c:	e7f0      	b.n	800b220 <_vfiprintf_r+0x1b8>
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	9300      	str	r3, [sp, #0]
 800b242:	462a      	mov	r2, r5
 800b244:	4b12      	ldr	r3, [pc, #72]	@ (800b290 <_vfiprintf_r+0x228>)
 800b246:	a904      	add	r1, sp, #16
 800b248:	4630      	mov	r0, r6
 800b24a:	f7fb fd5f 	bl	8006d0c <_printf_float>
 800b24e:	4607      	mov	r7, r0
 800b250:	1c78      	adds	r0, r7, #1
 800b252:	d1d6      	bne.n	800b202 <_vfiprintf_r+0x19a>
 800b254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b256:	07d9      	lsls	r1, r3, #31
 800b258:	d405      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b25a:	89ab      	ldrh	r3, [r5, #12]
 800b25c:	059a      	lsls	r2, r3, #22
 800b25e:	d402      	bmi.n	800b266 <_vfiprintf_r+0x1fe>
 800b260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b262:	f7fc fe63 	bl	8007f2c <__retarget_lock_release_recursive>
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	065b      	lsls	r3, r3, #25
 800b26a:	f53f af1f 	bmi.w	800b0ac <_vfiprintf_r+0x44>
 800b26e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b270:	e71e      	b.n	800b0b0 <_vfiprintf_r+0x48>
 800b272:	ab03      	add	r3, sp, #12
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	462a      	mov	r2, r5
 800b278:	4b05      	ldr	r3, [pc, #20]	@ (800b290 <_vfiprintf_r+0x228>)
 800b27a:	a904      	add	r1, sp, #16
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7fb ffdd 	bl	800723c <_printf_i>
 800b282:	e7e4      	b.n	800b24e <_vfiprintf_r+0x1e6>
 800b284:	0800cad9 	.word	0x0800cad9
 800b288:	0800cae3 	.word	0x0800cae3
 800b28c:	08006d0d 	.word	0x08006d0d
 800b290:	0800b043 	.word	0x0800b043
 800b294:	0800cadf 	.word	0x0800cadf

0800b298 <fmod>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	ed2d 8b02 	vpush	{d8}
 800b29e:	ec57 6b10 	vmov	r6, r7, d0
 800b2a2:	ec55 4b11 	vmov	r4, r5, d1
 800b2a6:	f000 fa51 	bl	800b74c <__ieee754_fmod>
 800b2aa:	4622      	mov	r2, r4
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	4639      	mov	r1, r7
 800b2b2:	eeb0 8a40 	vmov.f32	s16, s0
 800b2b6:	eef0 8a60 	vmov.f32	s17, s1
 800b2ba:	f7f5 fc57 	bl	8000b6c <__aeabi_dcmpun>
 800b2be:	b990      	cbnz	r0, 800b2e6 <fmod+0x4e>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f7f5 fc1e 	bl	8000b08 <__aeabi_dcmpeq>
 800b2cc:	b158      	cbz	r0, 800b2e6 <fmod+0x4e>
 800b2ce:	f7fc fe01 	bl	8007ed4 <__errno>
 800b2d2:	2321      	movs	r3, #33	@ 0x21
 800b2d4:	6003      	str	r3, [r0, #0]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	2300      	movs	r3, #0
 800b2da:	4610      	mov	r0, r2
 800b2dc:	4619      	mov	r1, r3
 800b2de:	f7f5 fad5 	bl	800088c <__aeabi_ddiv>
 800b2e2:	ec41 0b18 	vmov	d8, r0, r1
 800b2e6:	eeb0 0a48 	vmov.f32	s0, s16
 800b2ea:	eef0 0a68 	vmov.f32	s1, s17
 800b2ee:	ecbd 8b02 	vpop	{d8}
 800b2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2f4:	0000      	movs	r0, r0
	...

0800b2f8 <cos>:
 800b2f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2fa:	ec53 2b10 	vmov	r2, r3, d0
 800b2fe:	4826      	ldr	r0, [pc, #152]	@ (800b398 <cos+0xa0>)
 800b300:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b304:	4281      	cmp	r1, r0
 800b306:	d806      	bhi.n	800b316 <cos+0x1e>
 800b308:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b390 <cos+0x98>
 800b30c:	b005      	add	sp, #20
 800b30e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b312:	f000 b899 	b.w	800b448 <__kernel_cos>
 800b316:	4821      	ldr	r0, [pc, #132]	@ (800b39c <cos+0xa4>)
 800b318:	4281      	cmp	r1, r0
 800b31a:	d908      	bls.n	800b32e <cos+0x36>
 800b31c:	4610      	mov	r0, r2
 800b31e:	4619      	mov	r1, r3
 800b320:	f7f4 ffd2 	bl	80002c8 <__aeabi_dsub>
 800b324:	ec41 0b10 	vmov	d0, r0, r1
 800b328:	b005      	add	sp, #20
 800b32a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b32e:	4668      	mov	r0, sp
 800b330:	f000 fb16 	bl	800b960 <__ieee754_rem_pio2>
 800b334:	f000 0003 	and.w	r0, r0, #3
 800b338:	2801      	cmp	r0, #1
 800b33a:	d00b      	beq.n	800b354 <cos+0x5c>
 800b33c:	2802      	cmp	r0, #2
 800b33e:	d015      	beq.n	800b36c <cos+0x74>
 800b340:	b9d8      	cbnz	r0, 800b37a <cos+0x82>
 800b342:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b346:	ed9d 0b00 	vldr	d0, [sp]
 800b34a:	f000 f87d 	bl	800b448 <__kernel_cos>
 800b34e:	ec51 0b10 	vmov	r0, r1, d0
 800b352:	e7e7      	b.n	800b324 <cos+0x2c>
 800b354:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b358:	ed9d 0b00 	vldr	d0, [sp]
 800b35c:	f000 f93c 	bl	800b5d8 <__kernel_sin>
 800b360:	ec53 2b10 	vmov	r2, r3, d0
 800b364:	4610      	mov	r0, r2
 800b366:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b36a:	e7db      	b.n	800b324 <cos+0x2c>
 800b36c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b370:	ed9d 0b00 	vldr	d0, [sp]
 800b374:	f000 f868 	bl	800b448 <__kernel_cos>
 800b378:	e7f2      	b.n	800b360 <cos+0x68>
 800b37a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b37e:	ed9d 0b00 	vldr	d0, [sp]
 800b382:	2001      	movs	r0, #1
 800b384:	f000 f928 	bl	800b5d8 <__kernel_sin>
 800b388:	e7e1      	b.n	800b34e <cos+0x56>
 800b38a:	bf00      	nop
 800b38c:	f3af 8000 	nop.w
	...
 800b398:	3fe921fb 	.word	0x3fe921fb
 800b39c:	7fefffff 	.word	0x7fefffff

0800b3a0 <sin>:
 800b3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b3a2:	ec53 2b10 	vmov	r2, r3, d0
 800b3a6:	4826      	ldr	r0, [pc, #152]	@ (800b440 <sin+0xa0>)
 800b3a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b3ac:	4281      	cmp	r1, r0
 800b3ae:	d807      	bhi.n	800b3c0 <sin+0x20>
 800b3b0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b438 <sin+0x98>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	b005      	add	sp, #20
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	f000 b90c 	b.w	800b5d8 <__kernel_sin>
 800b3c0:	4820      	ldr	r0, [pc, #128]	@ (800b444 <sin+0xa4>)
 800b3c2:	4281      	cmp	r1, r0
 800b3c4:	d908      	bls.n	800b3d8 <sin+0x38>
 800b3c6:	4610      	mov	r0, r2
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	f7f4 ff7d 	bl	80002c8 <__aeabi_dsub>
 800b3ce:	ec41 0b10 	vmov	d0, r0, r1
 800b3d2:	b005      	add	sp, #20
 800b3d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800b3d8:	4668      	mov	r0, sp
 800b3da:	f000 fac1 	bl	800b960 <__ieee754_rem_pio2>
 800b3de:	f000 0003 	and.w	r0, r0, #3
 800b3e2:	2801      	cmp	r0, #1
 800b3e4:	d00c      	beq.n	800b400 <sin+0x60>
 800b3e6:	2802      	cmp	r0, #2
 800b3e8:	d011      	beq.n	800b40e <sin+0x6e>
 800b3ea:	b9e8      	cbnz	r0, 800b428 <sin+0x88>
 800b3ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b3f0:	ed9d 0b00 	vldr	d0, [sp]
 800b3f4:	2001      	movs	r0, #1
 800b3f6:	f000 f8ef 	bl	800b5d8 <__kernel_sin>
 800b3fa:	ec51 0b10 	vmov	r0, r1, d0
 800b3fe:	e7e6      	b.n	800b3ce <sin+0x2e>
 800b400:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b404:	ed9d 0b00 	vldr	d0, [sp]
 800b408:	f000 f81e 	bl	800b448 <__kernel_cos>
 800b40c:	e7f5      	b.n	800b3fa <sin+0x5a>
 800b40e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b412:	ed9d 0b00 	vldr	d0, [sp]
 800b416:	2001      	movs	r0, #1
 800b418:	f000 f8de 	bl	800b5d8 <__kernel_sin>
 800b41c:	ec53 2b10 	vmov	r2, r3, d0
 800b420:	4610      	mov	r0, r2
 800b422:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b426:	e7d2      	b.n	800b3ce <sin+0x2e>
 800b428:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b42c:	ed9d 0b00 	vldr	d0, [sp]
 800b430:	f000 f80a 	bl	800b448 <__kernel_cos>
 800b434:	e7f2      	b.n	800b41c <sin+0x7c>
 800b436:	bf00      	nop
	...
 800b440:	3fe921fb 	.word	0x3fe921fb
 800b444:	7fefffff 	.word	0x7fefffff

0800b448 <__kernel_cos>:
 800b448:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	ec57 6b10 	vmov	r6, r7, d0
 800b450:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b454:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b458:	ed8d 1b00 	vstr	d1, [sp]
 800b45c:	d206      	bcs.n	800b46c <__kernel_cos+0x24>
 800b45e:	4630      	mov	r0, r6
 800b460:	4639      	mov	r1, r7
 800b462:	f7f5 fb99 	bl	8000b98 <__aeabi_d2iz>
 800b466:	2800      	cmp	r0, #0
 800b468:	f000 8088 	beq.w	800b57c <__kernel_cos+0x134>
 800b46c:	4632      	mov	r2, r6
 800b46e:	463b      	mov	r3, r7
 800b470:	4630      	mov	r0, r6
 800b472:	4639      	mov	r1, r7
 800b474:	f7f5 f8e0 	bl	8000638 <__aeabi_dmul>
 800b478:	4b51      	ldr	r3, [pc, #324]	@ (800b5c0 <__kernel_cos+0x178>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	4604      	mov	r4, r0
 800b47e:	460d      	mov	r5, r1
 800b480:	f7f5 f8da 	bl	8000638 <__aeabi_dmul>
 800b484:	a340      	add	r3, pc, #256	@ (adr r3, 800b588 <__kernel_cos+0x140>)
 800b486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48a:	4682      	mov	sl, r0
 800b48c:	468b      	mov	fp, r1
 800b48e:	4620      	mov	r0, r4
 800b490:	4629      	mov	r1, r5
 800b492:	f7f5 f8d1 	bl	8000638 <__aeabi_dmul>
 800b496:	a33e      	add	r3, pc, #248	@ (adr r3, 800b590 <__kernel_cos+0x148>)
 800b498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49c:	f7f4 ff16 	bl	80002cc <__adddf3>
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	f7f5 f8c8 	bl	8000638 <__aeabi_dmul>
 800b4a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b598 <__kernel_cos+0x150>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f4 ff0b 	bl	80002c8 <__aeabi_dsub>
 800b4b2:	4622      	mov	r2, r4
 800b4b4:	462b      	mov	r3, r5
 800b4b6:	f7f5 f8bf 	bl	8000638 <__aeabi_dmul>
 800b4ba:	a339      	add	r3, pc, #228	@ (adr r3, 800b5a0 <__kernel_cos+0x158>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 ff04 	bl	80002cc <__adddf3>
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	462b      	mov	r3, r5
 800b4c8:	f7f5 f8b6 	bl	8000638 <__aeabi_dmul>
 800b4cc:	a336      	add	r3, pc, #216	@ (adr r3, 800b5a8 <__kernel_cos+0x160>)
 800b4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d2:	f7f4 fef9 	bl	80002c8 <__aeabi_dsub>
 800b4d6:	4622      	mov	r2, r4
 800b4d8:	462b      	mov	r3, r5
 800b4da:	f7f5 f8ad 	bl	8000638 <__aeabi_dmul>
 800b4de:	a334      	add	r3, pc, #208	@ (adr r3, 800b5b0 <__kernel_cos+0x168>)
 800b4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e4:	f7f4 fef2 	bl	80002cc <__adddf3>
 800b4e8:	4622      	mov	r2, r4
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	f7f5 f8a4 	bl	8000638 <__aeabi_dmul>
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	f7f5 f8a0 	bl	8000638 <__aeabi_dmul>
 800b4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	460d      	mov	r5, r1
 800b500:	4630      	mov	r0, r6
 800b502:	4639      	mov	r1, r7
 800b504:	f7f5 f898 	bl	8000638 <__aeabi_dmul>
 800b508:	460b      	mov	r3, r1
 800b50a:	4602      	mov	r2, r0
 800b50c:	4629      	mov	r1, r5
 800b50e:	4620      	mov	r0, r4
 800b510:	f7f4 feda 	bl	80002c8 <__aeabi_dsub>
 800b514:	4b2b      	ldr	r3, [pc, #172]	@ (800b5c4 <__kernel_cos+0x17c>)
 800b516:	4598      	cmp	r8, r3
 800b518:	4606      	mov	r6, r0
 800b51a:	460f      	mov	r7, r1
 800b51c:	d810      	bhi.n	800b540 <__kernel_cos+0xf8>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4650      	mov	r0, sl
 800b524:	4659      	mov	r1, fp
 800b526:	f7f4 fecf 	bl	80002c8 <__aeabi_dsub>
 800b52a:	460b      	mov	r3, r1
 800b52c:	4926      	ldr	r1, [pc, #152]	@ (800b5c8 <__kernel_cos+0x180>)
 800b52e:	4602      	mov	r2, r0
 800b530:	2000      	movs	r0, #0
 800b532:	f7f4 fec9 	bl	80002c8 <__aeabi_dsub>
 800b536:	ec41 0b10 	vmov	d0, r0, r1
 800b53a:	b003      	add	sp, #12
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	4b22      	ldr	r3, [pc, #136]	@ (800b5cc <__kernel_cos+0x184>)
 800b542:	4921      	ldr	r1, [pc, #132]	@ (800b5c8 <__kernel_cos+0x180>)
 800b544:	4598      	cmp	r8, r3
 800b546:	bf8c      	ite	hi
 800b548:	4d21      	ldrhi	r5, [pc, #132]	@ (800b5d0 <__kernel_cos+0x188>)
 800b54a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b54e:	2400      	movs	r4, #0
 800b550:	4622      	mov	r2, r4
 800b552:	462b      	mov	r3, r5
 800b554:	2000      	movs	r0, #0
 800b556:	f7f4 feb7 	bl	80002c8 <__aeabi_dsub>
 800b55a:	4622      	mov	r2, r4
 800b55c:	4680      	mov	r8, r0
 800b55e:	4689      	mov	r9, r1
 800b560:	462b      	mov	r3, r5
 800b562:	4650      	mov	r0, sl
 800b564:	4659      	mov	r1, fp
 800b566:	f7f4 feaf 	bl	80002c8 <__aeabi_dsub>
 800b56a:	4632      	mov	r2, r6
 800b56c:	463b      	mov	r3, r7
 800b56e:	f7f4 feab 	bl	80002c8 <__aeabi_dsub>
 800b572:	4602      	mov	r2, r0
 800b574:	460b      	mov	r3, r1
 800b576:	4640      	mov	r0, r8
 800b578:	4649      	mov	r1, r9
 800b57a:	e7da      	b.n	800b532 <__kernel_cos+0xea>
 800b57c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b5b8 <__kernel_cos+0x170>
 800b580:	e7db      	b.n	800b53a <__kernel_cos+0xf2>
 800b582:	bf00      	nop
 800b584:	f3af 8000 	nop.w
 800b588:	be8838d4 	.word	0xbe8838d4
 800b58c:	bda8fae9 	.word	0xbda8fae9
 800b590:	bdb4b1c4 	.word	0xbdb4b1c4
 800b594:	3e21ee9e 	.word	0x3e21ee9e
 800b598:	809c52ad 	.word	0x809c52ad
 800b59c:	3e927e4f 	.word	0x3e927e4f
 800b5a0:	19cb1590 	.word	0x19cb1590
 800b5a4:	3efa01a0 	.word	0x3efa01a0
 800b5a8:	16c15177 	.word	0x16c15177
 800b5ac:	3f56c16c 	.word	0x3f56c16c
 800b5b0:	5555554c 	.word	0x5555554c
 800b5b4:	3fa55555 	.word	0x3fa55555
 800b5b8:	00000000 	.word	0x00000000
 800b5bc:	3ff00000 	.word	0x3ff00000
 800b5c0:	3fe00000 	.word	0x3fe00000
 800b5c4:	3fd33332 	.word	0x3fd33332
 800b5c8:	3ff00000 	.word	0x3ff00000
 800b5cc:	3fe90000 	.word	0x3fe90000
 800b5d0:	3fd20000 	.word	0x3fd20000
 800b5d4:	00000000 	.word	0x00000000

0800b5d8 <__kernel_sin>:
 800b5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5dc:	ec55 4b10 	vmov	r4, r5, d0
 800b5e0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b5e4:	b085      	sub	sp, #20
 800b5e6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b5ea:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	d205      	bcs.n	800b5fe <__kernel_sin+0x26>
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	f7f5 facf 	bl	8000b98 <__aeabi_d2iz>
 800b5fa:	2800      	cmp	r0, #0
 800b5fc:	d052      	beq.n	800b6a4 <__kernel_sin+0xcc>
 800b5fe:	4622      	mov	r2, r4
 800b600:	462b      	mov	r3, r5
 800b602:	4620      	mov	r0, r4
 800b604:	4629      	mov	r1, r5
 800b606:	f7f5 f817 	bl	8000638 <__aeabi_dmul>
 800b60a:	4682      	mov	sl, r0
 800b60c:	468b      	mov	fp, r1
 800b60e:	4602      	mov	r2, r0
 800b610:	460b      	mov	r3, r1
 800b612:	4620      	mov	r0, r4
 800b614:	4629      	mov	r1, r5
 800b616:	f7f5 f80f 	bl	8000638 <__aeabi_dmul>
 800b61a:	a342      	add	r3, pc, #264	@ (adr r3, 800b724 <__kernel_sin+0x14c>)
 800b61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b620:	e9cd 0100 	strd	r0, r1, [sp]
 800b624:	4650      	mov	r0, sl
 800b626:	4659      	mov	r1, fp
 800b628:	f7f5 f806 	bl	8000638 <__aeabi_dmul>
 800b62c:	a33f      	add	r3, pc, #252	@ (adr r3, 800b72c <__kernel_sin+0x154>)
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	f7f4 fe49 	bl	80002c8 <__aeabi_dsub>
 800b636:	4652      	mov	r2, sl
 800b638:	465b      	mov	r3, fp
 800b63a:	f7f4 fffd 	bl	8000638 <__aeabi_dmul>
 800b63e:	a33d      	add	r3, pc, #244	@ (adr r3, 800b734 <__kernel_sin+0x15c>)
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f7f4 fe42 	bl	80002cc <__adddf3>
 800b648:	4652      	mov	r2, sl
 800b64a:	465b      	mov	r3, fp
 800b64c:	f7f4 fff4 	bl	8000638 <__aeabi_dmul>
 800b650:	a33a      	add	r3, pc, #232	@ (adr r3, 800b73c <__kernel_sin+0x164>)
 800b652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b656:	f7f4 fe37 	bl	80002c8 <__aeabi_dsub>
 800b65a:	4652      	mov	r2, sl
 800b65c:	465b      	mov	r3, fp
 800b65e:	f7f4 ffeb 	bl	8000638 <__aeabi_dmul>
 800b662:	a338      	add	r3, pc, #224	@ (adr r3, 800b744 <__kernel_sin+0x16c>)
 800b664:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b668:	f7f4 fe30 	bl	80002cc <__adddf3>
 800b66c:	4606      	mov	r6, r0
 800b66e:	460f      	mov	r7, r1
 800b670:	f1b8 0f00 	cmp.w	r8, #0
 800b674:	d11b      	bne.n	800b6ae <__kernel_sin+0xd6>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4650      	mov	r0, sl
 800b67c:	4659      	mov	r1, fp
 800b67e:	f7f4 ffdb 	bl	8000638 <__aeabi_dmul>
 800b682:	a325      	add	r3, pc, #148	@ (adr r3, 800b718 <__kernel_sin+0x140>)
 800b684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b688:	f7f4 fe1e 	bl	80002c8 <__aeabi_dsub>
 800b68c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b690:	f7f4 ffd2 	bl	8000638 <__aeabi_dmul>
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f4 fe16 	bl	80002cc <__adddf3>
 800b6a0:	4604      	mov	r4, r0
 800b6a2:	460d      	mov	r5, r1
 800b6a4:	ec45 4b10 	vmov	d0, r4, r5
 800b6a8:	b005      	add	sp, #20
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b720 <__kernel_sin+0x148>)
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	f7f4 ffbf 	bl	8000638 <__aeabi_dmul>
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	4680      	mov	r8, r0
 800b6be:	4689      	mov	r9, r1
 800b6c0:	463b      	mov	r3, r7
 800b6c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6c6:	f7f4 ffb7 	bl	8000638 <__aeabi_dmul>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	4640      	mov	r0, r8
 800b6d0:	4649      	mov	r1, r9
 800b6d2:	f7f4 fdf9 	bl	80002c8 <__aeabi_dsub>
 800b6d6:	4652      	mov	r2, sl
 800b6d8:	465b      	mov	r3, fp
 800b6da:	f7f4 ffad 	bl	8000638 <__aeabi_dmul>
 800b6de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b6e2:	f7f4 fdf1 	bl	80002c8 <__aeabi_dsub>
 800b6e6:	a30c      	add	r3, pc, #48	@ (adr r3, 800b718 <__kernel_sin+0x140>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	4606      	mov	r6, r0
 800b6ee:	460f      	mov	r7, r1
 800b6f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6f4:	f7f4 ffa0 	bl	8000638 <__aeabi_dmul>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f4 fde4 	bl	80002cc <__adddf3>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fddc 	bl	80002c8 <__aeabi_dsub>
 800b710:	e7c6      	b.n	800b6a0 <__kernel_sin+0xc8>
 800b712:	bf00      	nop
 800b714:	f3af 8000 	nop.w
 800b718:	55555549 	.word	0x55555549
 800b71c:	3fc55555 	.word	0x3fc55555
 800b720:	3fe00000 	.word	0x3fe00000
 800b724:	5acfd57c 	.word	0x5acfd57c
 800b728:	3de5d93a 	.word	0x3de5d93a
 800b72c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b730:	3e5ae5e6 	.word	0x3e5ae5e6
 800b734:	57b1fe7d 	.word	0x57b1fe7d
 800b738:	3ec71de3 	.word	0x3ec71de3
 800b73c:	19c161d5 	.word	0x19c161d5
 800b740:	3f2a01a0 	.word	0x3f2a01a0
 800b744:	1110f8a6 	.word	0x1110f8a6
 800b748:	3f811111 	.word	0x3f811111

0800b74c <__ieee754_fmod>:
 800b74c:	ec53 2b11 	vmov	r2, r3, d1
 800b750:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	ea52 040c 	orrs.w	r4, r2, ip
 800b75c:	ec51 0b10 	vmov	r0, r1, d0
 800b760:	461e      	mov	r6, r3
 800b762:	4617      	mov	r7, r2
 800b764:	4696      	mov	lr, r2
 800b766:	d00c      	beq.n	800b782 <__ieee754_fmod+0x36>
 800b768:	4c77      	ldr	r4, [pc, #476]	@ (800b948 <__ieee754_fmod+0x1fc>)
 800b76a:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800b76e:	45a0      	cmp	r8, r4
 800b770:	4689      	mov	r9, r1
 800b772:	d806      	bhi.n	800b782 <__ieee754_fmod+0x36>
 800b774:	4254      	negs	r4, r2
 800b776:	4d75      	ldr	r5, [pc, #468]	@ (800b94c <__ieee754_fmod+0x200>)
 800b778:	4314      	orrs	r4, r2
 800b77a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800b77e:	42ac      	cmp	r4, r5
 800b780:	d909      	bls.n	800b796 <__ieee754_fmod+0x4a>
 800b782:	f7f4 ff59 	bl	8000638 <__aeabi_dmul>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	f7f5 f87f 	bl	800088c <__aeabi_ddiv>
 800b78e:	ec41 0b10 	vmov	d0, r0, r1
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b796:	45e0      	cmp	r8, ip
 800b798:	4682      	mov	sl, r0
 800b79a:	4604      	mov	r4, r0
 800b79c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b7a0:	dc09      	bgt.n	800b7b6 <__ieee754_fmod+0x6a>
 800b7a2:	dbf4      	blt.n	800b78e <__ieee754_fmod+0x42>
 800b7a4:	4282      	cmp	r2, r0
 800b7a6:	d8f2      	bhi.n	800b78e <__ieee754_fmod+0x42>
 800b7a8:	d105      	bne.n	800b7b6 <__ieee754_fmod+0x6a>
 800b7aa:	4b69      	ldr	r3, [pc, #420]	@ (800b950 <__ieee754_fmod+0x204>)
 800b7ac:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b7b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b7b4:	e7eb      	b.n	800b78e <__ieee754_fmod+0x42>
 800b7b6:	4a65      	ldr	r2, [pc, #404]	@ (800b94c <__ieee754_fmod+0x200>)
 800b7b8:	ea19 0f02 	tst.w	r9, r2
 800b7bc:	d148      	bne.n	800b850 <__ieee754_fmod+0x104>
 800b7be:	f1b8 0f00 	cmp.w	r8, #0
 800b7c2:	d13d      	bne.n	800b840 <__ieee754_fmod+0xf4>
 800b7c4:	4963      	ldr	r1, [pc, #396]	@ (800b954 <__ieee754_fmod+0x208>)
 800b7c6:	4653      	mov	r3, sl
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	dc36      	bgt.n	800b83a <__ieee754_fmod+0xee>
 800b7cc:	4216      	tst	r6, r2
 800b7ce:	d14f      	bne.n	800b870 <__ieee754_fmod+0x124>
 800b7d0:	f1bc 0f00 	cmp.w	ip, #0
 800b7d4:	d144      	bne.n	800b860 <__ieee754_fmod+0x114>
 800b7d6:	4a5f      	ldr	r2, [pc, #380]	@ (800b954 <__ieee754_fmod+0x208>)
 800b7d8:	463b      	mov	r3, r7
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dc3d      	bgt.n	800b85a <__ieee754_fmod+0x10e>
 800b7de:	485e      	ldr	r0, [pc, #376]	@ (800b958 <__ieee754_fmod+0x20c>)
 800b7e0:	4281      	cmp	r1, r0
 800b7e2:	db4a      	blt.n	800b87a <__ieee754_fmod+0x12e>
 800b7e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b7ec:	485a      	ldr	r0, [pc, #360]	@ (800b958 <__ieee754_fmod+0x20c>)
 800b7ee:	4282      	cmp	r2, r0
 800b7f0:	db57      	blt.n	800b8a2 <__ieee754_fmod+0x156>
 800b7f2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b7f6:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b7fa:	1a89      	subs	r1, r1, r2
 800b7fc:	1b98      	subs	r0, r3, r6
 800b7fe:	eba4 070e 	sub.w	r7, r4, lr
 800b802:	2900      	cmp	r1, #0
 800b804:	d162      	bne.n	800b8cc <__ieee754_fmod+0x180>
 800b806:	4574      	cmp	r4, lr
 800b808:	bf38      	it	cc
 800b80a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b80e:	2800      	cmp	r0, #0
 800b810:	bfa4      	itt	ge
 800b812:	463c      	movge	r4, r7
 800b814:	4603      	movge	r3, r0
 800b816:	ea53 0104 	orrs.w	r1, r3, r4
 800b81a:	d0c6      	beq.n	800b7aa <__ieee754_fmod+0x5e>
 800b81c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b820:	db69      	blt.n	800b8f6 <__ieee754_fmod+0x1aa>
 800b822:	494d      	ldr	r1, [pc, #308]	@ (800b958 <__ieee754_fmod+0x20c>)
 800b824:	428a      	cmp	r2, r1
 800b826:	db6c      	blt.n	800b902 <__ieee754_fmod+0x1b6>
 800b828:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b82c:	432b      	orrs	r3, r5
 800b82e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800b832:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b836:	4620      	mov	r0, r4
 800b838:	e7a9      	b.n	800b78e <__ieee754_fmod+0x42>
 800b83a:	3901      	subs	r1, #1
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	e7c3      	b.n	800b7c8 <__ieee754_fmod+0x7c>
 800b840:	4945      	ldr	r1, [pc, #276]	@ (800b958 <__ieee754_fmod+0x20c>)
 800b842:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b846:	2b00      	cmp	r3, #0
 800b848:	ddc0      	ble.n	800b7cc <__ieee754_fmod+0x80>
 800b84a:	3901      	subs	r1, #1
 800b84c:	005b      	lsls	r3, r3, #1
 800b84e:	e7fa      	b.n	800b846 <__ieee754_fmod+0xfa>
 800b850:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b854:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b858:	e7b8      	b.n	800b7cc <__ieee754_fmod+0x80>
 800b85a:	3a01      	subs	r2, #1
 800b85c:	005b      	lsls	r3, r3, #1
 800b85e:	e7bc      	b.n	800b7da <__ieee754_fmod+0x8e>
 800b860:	4a3d      	ldr	r2, [pc, #244]	@ (800b958 <__ieee754_fmod+0x20c>)
 800b862:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b866:	2b00      	cmp	r3, #0
 800b868:	ddb9      	ble.n	800b7de <__ieee754_fmod+0x92>
 800b86a:	3a01      	subs	r2, #1
 800b86c:	005b      	lsls	r3, r3, #1
 800b86e:	e7fa      	b.n	800b866 <__ieee754_fmod+0x11a>
 800b870:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b874:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b878:	e7b1      	b.n	800b7de <__ieee754_fmod+0x92>
 800b87a:	1a40      	subs	r0, r0, r1
 800b87c:	281f      	cmp	r0, #31
 800b87e:	dc0a      	bgt.n	800b896 <__ieee754_fmod+0x14a>
 800b880:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800b884:	fa08 f800 	lsl.w	r8, r8, r0
 800b888:	fa2a f303 	lsr.w	r3, sl, r3
 800b88c:	ea43 0308 	orr.w	r3, r3, r8
 800b890:	fa0a f400 	lsl.w	r4, sl, r0
 800b894:	e7aa      	b.n	800b7ec <__ieee754_fmod+0xa0>
 800b896:	4b31      	ldr	r3, [pc, #196]	@ (800b95c <__ieee754_fmod+0x210>)
 800b898:	1a5b      	subs	r3, r3, r1
 800b89a:	fa0a f303 	lsl.w	r3, sl, r3
 800b89e:	2400      	movs	r4, #0
 800b8a0:	e7a4      	b.n	800b7ec <__ieee754_fmod+0xa0>
 800b8a2:	1a80      	subs	r0, r0, r2
 800b8a4:	281f      	cmp	r0, #31
 800b8a6:	dc0a      	bgt.n	800b8be <__ieee754_fmod+0x172>
 800b8a8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800b8ac:	fa0c fc00 	lsl.w	ip, ip, r0
 800b8b0:	fa27 f606 	lsr.w	r6, r7, r6
 800b8b4:	ea46 060c 	orr.w	r6, r6, ip
 800b8b8:	fa07 fe00 	lsl.w	lr, r7, r0
 800b8bc:	e79d      	b.n	800b7fa <__ieee754_fmod+0xae>
 800b8be:	4e27      	ldr	r6, [pc, #156]	@ (800b95c <__ieee754_fmod+0x210>)
 800b8c0:	1ab6      	subs	r6, r6, r2
 800b8c2:	fa07 f606 	lsl.w	r6, r7, r6
 800b8c6:	f04f 0e00 	mov.w	lr, #0
 800b8ca:	e796      	b.n	800b7fa <__ieee754_fmod+0xae>
 800b8cc:	4574      	cmp	r4, lr
 800b8ce:	bf38      	it	cc
 800b8d0:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	da05      	bge.n	800b8e4 <__ieee754_fmod+0x198>
 800b8d8:	0fe0      	lsrs	r0, r4, #31
 800b8da:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b8de:	0064      	lsls	r4, r4, #1
 800b8e0:	3901      	subs	r1, #1
 800b8e2:	e78b      	b.n	800b7fc <__ieee754_fmod+0xb0>
 800b8e4:	ea50 0307 	orrs.w	r3, r0, r7
 800b8e8:	f43f af5f 	beq.w	800b7aa <__ieee754_fmod+0x5e>
 800b8ec:	0ffb      	lsrs	r3, r7, #31
 800b8ee:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b8f2:	007c      	lsls	r4, r7, #1
 800b8f4:	e7f4      	b.n	800b8e0 <__ieee754_fmod+0x194>
 800b8f6:	0fe1      	lsrs	r1, r4, #31
 800b8f8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b8fc:	0064      	lsls	r4, r4, #1
 800b8fe:	3a01      	subs	r2, #1
 800b900:	e78c      	b.n	800b81c <__ieee754_fmod+0xd0>
 800b902:	1a89      	subs	r1, r1, r2
 800b904:	2914      	cmp	r1, #20
 800b906:	dc0a      	bgt.n	800b91e <__ieee754_fmod+0x1d2>
 800b908:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b90c:	fa03 f202 	lsl.w	r2, r3, r2
 800b910:	40cc      	lsrs	r4, r1
 800b912:	4322      	orrs	r2, r4
 800b914:	410b      	asrs	r3, r1
 800b916:	ea43 0105 	orr.w	r1, r3, r5
 800b91a:	4610      	mov	r0, r2
 800b91c:	e737      	b.n	800b78e <__ieee754_fmod+0x42>
 800b91e:	291f      	cmp	r1, #31
 800b920:	dc07      	bgt.n	800b932 <__ieee754_fmod+0x1e6>
 800b922:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b926:	40cc      	lsrs	r4, r1
 800b928:	fa03 f202 	lsl.w	r2, r3, r2
 800b92c:	4322      	orrs	r2, r4
 800b92e:	462b      	mov	r3, r5
 800b930:	e7f1      	b.n	800b916 <__ieee754_fmod+0x1ca>
 800b932:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800b936:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b93a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800b93e:	32e2      	adds	r2, #226	@ 0xe2
 800b940:	fa43 f202 	asr.w	r2, r3, r2
 800b944:	e7f3      	b.n	800b92e <__ieee754_fmod+0x1e2>
 800b946:	bf00      	nop
 800b948:	7fefffff 	.word	0x7fefffff
 800b94c:	7ff00000 	.word	0x7ff00000
 800b950:	0800cb90 	.word	0x0800cb90
 800b954:	fffffbed 	.word	0xfffffbed
 800b958:	fffffc02 	.word	0xfffffc02
 800b95c:	fffffbe2 	.word	0xfffffbe2

0800b960 <__ieee754_rem_pio2>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	ec57 6b10 	vmov	r6, r7, d0
 800b968:	4bc5      	ldr	r3, [pc, #788]	@ (800bc80 <__ieee754_rem_pio2+0x320>)
 800b96a:	b08d      	sub	sp, #52	@ 0x34
 800b96c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b970:	4598      	cmp	r8, r3
 800b972:	4604      	mov	r4, r0
 800b974:	9704      	str	r7, [sp, #16]
 800b976:	d807      	bhi.n	800b988 <__ieee754_rem_pio2+0x28>
 800b978:	2200      	movs	r2, #0
 800b97a:	2300      	movs	r3, #0
 800b97c:	ed80 0b00 	vstr	d0, [r0]
 800b980:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b984:	2500      	movs	r5, #0
 800b986:	e028      	b.n	800b9da <__ieee754_rem_pio2+0x7a>
 800b988:	4bbe      	ldr	r3, [pc, #760]	@ (800bc84 <__ieee754_rem_pio2+0x324>)
 800b98a:	4598      	cmp	r8, r3
 800b98c:	d878      	bhi.n	800ba80 <__ieee754_rem_pio2+0x120>
 800b98e:	9b04      	ldr	r3, [sp, #16]
 800b990:	4dbd      	ldr	r5, [pc, #756]	@ (800bc88 <__ieee754_rem_pio2+0x328>)
 800b992:	2b00      	cmp	r3, #0
 800b994:	4630      	mov	r0, r6
 800b996:	a3ac      	add	r3, pc, #688	@ (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99c:	4639      	mov	r1, r7
 800b99e:	dd38      	ble.n	800ba12 <__ieee754_rem_pio2+0xb2>
 800b9a0:	f7f4 fc92 	bl	80002c8 <__aeabi_dsub>
 800b9a4:	45a8      	cmp	r8, r5
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	460f      	mov	r7, r1
 800b9aa:	d01a      	beq.n	800b9e2 <__ieee754_rem_pio2+0x82>
 800b9ac:	a3a8      	add	r3, pc, #672	@ (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	f7f4 fc89 	bl	80002c8 <__aeabi_dsub>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4680      	mov	r8, r0
 800b9bc:	4689      	mov	r9, r1
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7f4 fc81 	bl	80002c8 <__aeabi_dsub>
 800b9c6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f7f4 fc7c 	bl	80002c8 <__aeabi_dsub>
 800b9d0:	e9c4 8900 	strd	r8, r9, [r4]
 800b9d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9d8:	2501      	movs	r5, #1
 800b9da:	4628      	mov	r0, r5
 800b9dc:	b00d      	add	sp, #52	@ 0x34
 800b9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9e2:	a39d      	add	r3, pc, #628	@ (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fc6e 	bl	80002c8 <__aeabi_dsub>
 800b9ec:	a39c      	add	r3, pc, #624	@ (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	460f      	mov	r7, r1
 800b9f6:	f7f4 fc67 	bl	80002c8 <__aeabi_dsub>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	4680      	mov	r8, r0
 800ba00:	4689      	mov	r9, r1
 800ba02:	4630      	mov	r0, r6
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f4 fc5f 	bl	80002c8 <__aeabi_dsub>
 800ba0a:	a395      	add	r3, pc, #596	@ (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	e7dc      	b.n	800b9cc <__ieee754_rem_pio2+0x6c>
 800ba12:	f7f4 fc5b 	bl	80002cc <__adddf3>
 800ba16:	45a8      	cmp	r8, r5
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	d018      	beq.n	800ba50 <__ieee754_rem_pio2+0xf0>
 800ba1e:	a38c      	add	r3, pc, #560	@ (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fc52 	bl	80002cc <__adddf3>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4680      	mov	r8, r0
 800ba2e:	4689      	mov	r9, r1
 800ba30:	4630      	mov	r0, r6
 800ba32:	4639      	mov	r1, r7
 800ba34:	f7f4 fc48 	bl	80002c8 <__aeabi_dsub>
 800ba38:	a385      	add	r3, pc, #532	@ (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	f7f4 fc45 	bl	80002cc <__adddf3>
 800ba42:	f04f 35ff 	mov.w	r5, #4294967295
 800ba46:	e9c4 8900 	strd	r8, r9, [r4]
 800ba4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba4e:	e7c4      	b.n	800b9da <__ieee754_rem_pio2+0x7a>
 800ba50:	a381      	add	r3, pc, #516	@ (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f7f4 fc39 	bl	80002cc <__adddf3>
 800ba5a:	a381      	add	r3, pc, #516	@ (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	4606      	mov	r6, r0
 800ba62:	460f      	mov	r7, r1
 800ba64:	f7f4 fc32 	bl	80002cc <__adddf3>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4680      	mov	r8, r0
 800ba6e:	4689      	mov	r9, r1
 800ba70:	4630      	mov	r0, r6
 800ba72:	4639      	mov	r1, r7
 800ba74:	f7f4 fc28 	bl	80002c8 <__aeabi_dsub>
 800ba78:	a379      	add	r3, pc, #484	@ (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	e7de      	b.n	800ba3e <__ieee754_rem_pio2+0xde>
 800ba80:	4b82      	ldr	r3, [pc, #520]	@ (800bc8c <__ieee754_rem_pio2+0x32c>)
 800ba82:	4598      	cmp	r8, r3
 800ba84:	f200 80d1 	bhi.w	800bc2a <__ieee754_rem_pio2+0x2ca>
 800ba88:	f000 f966 	bl	800bd58 <fabs>
 800ba8c:	ec57 6b10 	vmov	r6, r7, d0
 800ba90:	a375      	add	r3, pc, #468	@ (adr r3, 800bc68 <__ieee754_rem_pio2+0x308>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	4630      	mov	r0, r6
 800ba98:	4639      	mov	r1, r7
 800ba9a:	f7f4 fdcd 	bl	8000638 <__aeabi_dmul>
 800ba9e:	4b7c      	ldr	r3, [pc, #496]	@ (800bc90 <__ieee754_rem_pio2+0x330>)
 800baa0:	2200      	movs	r2, #0
 800baa2:	f7f4 fc13 	bl	80002cc <__adddf3>
 800baa6:	f7f5 f877 	bl	8000b98 <__aeabi_d2iz>
 800baaa:	4605      	mov	r5, r0
 800baac:	f7f4 fd5a 	bl	8000564 <__aeabi_i2d>
 800bab0:	4602      	mov	r2, r0
 800bab2:	460b      	mov	r3, r1
 800bab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bab8:	a363      	add	r3, pc, #396	@ (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800baba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800babe:	f7f4 fdbb 	bl	8000638 <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4630      	mov	r0, r6
 800bac8:	4639      	mov	r1, r7
 800baca:	f7f4 fbfd 	bl	80002c8 <__aeabi_dsub>
 800bace:	a360      	add	r3, pc, #384	@ (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	4682      	mov	sl, r0
 800bad6:	468b      	mov	fp, r1
 800bad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800badc:	f7f4 fdac 	bl	8000638 <__aeabi_dmul>
 800bae0:	2d1f      	cmp	r5, #31
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	dc0c      	bgt.n	800bb02 <__ieee754_rem_pio2+0x1a2>
 800bae8:	4b6a      	ldr	r3, [pc, #424]	@ (800bc94 <__ieee754_rem_pio2+0x334>)
 800baea:	1e6a      	subs	r2, r5, #1
 800baec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf0:	4543      	cmp	r3, r8
 800baf2:	d006      	beq.n	800bb02 <__ieee754_rem_pio2+0x1a2>
 800baf4:	4632      	mov	r2, r6
 800baf6:	463b      	mov	r3, r7
 800baf8:	4650      	mov	r0, sl
 800bafa:	4659      	mov	r1, fp
 800bafc:	f7f4 fbe4 	bl	80002c8 <__aeabi_dsub>
 800bb00:	e00e      	b.n	800bb20 <__ieee754_rem_pio2+0x1c0>
 800bb02:	463b      	mov	r3, r7
 800bb04:	4632      	mov	r2, r6
 800bb06:	4650      	mov	r0, sl
 800bb08:	4659      	mov	r1, fp
 800bb0a:	f7f4 fbdd 	bl	80002c8 <__aeabi_dsub>
 800bb0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800bb1c:	2b10      	cmp	r3, #16
 800bb1e:	dc02      	bgt.n	800bb26 <__ieee754_rem_pio2+0x1c6>
 800bb20:	e9c4 0100 	strd	r0, r1, [r4]
 800bb24:	e039      	b.n	800bb9a <__ieee754_rem_pio2+0x23a>
 800bb26:	a34c      	add	r3, pc, #304	@ (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb30:	f7f4 fd82 	bl	8000638 <__aeabi_dmul>
 800bb34:	4606      	mov	r6, r0
 800bb36:	460f      	mov	r7, r1
 800bb38:	4602      	mov	r2, r0
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	4650      	mov	r0, sl
 800bb3e:	4659      	mov	r1, fp
 800bb40:	f7f4 fbc2 	bl	80002c8 <__aeabi_dsub>
 800bb44:	4602      	mov	r2, r0
 800bb46:	460b      	mov	r3, r1
 800bb48:	4680      	mov	r8, r0
 800bb4a:	4689      	mov	r9, r1
 800bb4c:	4650      	mov	r0, sl
 800bb4e:	4659      	mov	r1, fp
 800bb50:	f7f4 fbba 	bl	80002c8 <__aeabi_dsub>
 800bb54:	4632      	mov	r2, r6
 800bb56:	463b      	mov	r3, r7
 800bb58:	f7f4 fbb6 	bl	80002c8 <__aeabi_dsub>
 800bb5c:	a340      	add	r3, pc, #256	@ (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800bb5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb62:	4606      	mov	r6, r0
 800bb64:	460f      	mov	r7, r1
 800bb66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb6a:	f7f4 fd65 	bl	8000638 <__aeabi_dmul>
 800bb6e:	4632      	mov	r2, r6
 800bb70:	463b      	mov	r3, r7
 800bb72:	f7f4 fba9 	bl	80002c8 <__aeabi_dsub>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4606      	mov	r6, r0
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	4640      	mov	r0, r8
 800bb80:	4649      	mov	r1, r9
 800bb82:	f7f4 fba1 	bl	80002c8 <__aeabi_dsub>
 800bb86:	9a05      	ldr	r2, [sp, #20]
 800bb88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb8c:	1ad3      	subs	r3, r2, r3
 800bb8e:	2b31      	cmp	r3, #49	@ 0x31
 800bb90:	dc20      	bgt.n	800bbd4 <__ieee754_rem_pio2+0x274>
 800bb92:	e9c4 0100 	strd	r0, r1, [r4]
 800bb96:	46c2      	mov	sl, r8
 800bb98:	46cb      	mov	fp, r9
 800bb9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800bb9e:	4650      	mov	r0, sl
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	4659      	mov	r1, fp
 800bba6:	f7f4 fb8f 	bl	80002c8 <__aeabi_dsub>
 800bbaa:	463b      	mov	r3, r7
 800bbac:	4632      	mov	r2, r6
 800bbae:	f7f4 fb8b 	bl	80002c8 <__aeabi_dsub>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bbba:	f6bf af0e 	bge.w	800b9da <__ieee754_rem_pio2+0x7a>
 800bbbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800bbc2:	6063      	str	r3, [r4, #4]
 800bbc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bbc8:	f8c4 8000 	str.w	r8, [r4]
 800bbcc:	60a0      	str	r0, [r4, #8]
 800bbce:	60e3      	str	r3, [r4, #12]
 800bbd0:	426d      	negs	r5, r5
 800bbd2:	e702      	b.n	800b9da <__ieee754_rem_pio2+0x7a>
 800bbd4:	a326      	add	r3, pc, #152	@ (adr r3, 800bc70 <__ieee754_rem_pio2+0x310>)
 800bbd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbde:	f7f4 fd2b 	bl	8000638 <__aeabi_dmul>
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	460f      	mov	r7, r1
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fb6b 	bl	80002c8 <__aeabi_dsub>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	4682      	mov	sl, r0
 800bbf8:	468b      	mov	fp, r1
 800bbfa:	4640      	mov	r0, r8
 800bbfc:	4649      	mov	r1, r9
 800bbfe:	f7f4 fb63 	bl	80002c8 <__aeabi_dsub>
 800bc02:	4632      	mov	r2, r6
 800bc04:	463b      	mov	r3, r7
 800bc06:	f7f4 fb5f 	bl	80002c8 <__aeabi_dsub>
 800bc0a:	a31b      	add	r3, pc, #108	@ (adr r3, 800bc78 <__ieee754_rem_pio2+0x318>)
 800bc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc10:	4606      	mov	r6, r0
 800bc12:	460f      	mov	r7, r1
 800bc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc18:	f7f4 fd0e 	bl	8000638 <__aeabi_dmul>
 800bc1c:	4632      	mov	r2, r6
 800bc1e:	463b      	mov	r3, r7
 800bc20:	f7f4 fb52 	bl	80002c8 <__aeabi_dsub>
 800bc24:	4606      	mov	r6, r0
 800bc26:	460f      	mov	r7, r1
 800bc28:	e764      	b.n	800baf4 <__ieee754_rem_pio2+0x194>
 800bc2a:	4b1b      	ldr	r3, [pc, #108]	@ (800bc98 <__ieee754_rem_pio2+0x338>)
 800bc2c:	4598      	cmp	r8, r3
 800bc2e:	d935      	bls.n	800bc9c <__ieee754_rem_pio2+0x33c>
 800bc30:	4632      	mov	r2, r6
 800bc32:	463b      	mov	r3, r7
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	f7f4 fb46 	bl	80002c8 <__aeabi_dsub>
 800bc3c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc40:	e9c4 0100 	strd	r0, r1, [r4]
 800bc44:	e69e      	b.n	800b984 <__ieee754_rem_pio2+0x24>
 800bc46:	bf00      	nop
 800bc48:	54400000 	.word	0x54400000
 800bc4c:	3ff921fb 	.word	0x3ff921fb
 800bc50:	1a626331 	.word	0x1a626331
 800bc54:	3dd0b461 	.word	0x3dd0b461
 800bc58:	1a600000 	.word	0x1a600000
 800bc5c:	3dd0b461 	.word	0x3dd0b461
 800bc60:	2e037073 	.word	0x2e037073
 800bc64:	3ba3198a 	.word	0x3ba3198a
 800bc68:	6dc9c883 	.word	0x6dc9c883
 800bc6c:	3fe45f30 	.word	0x3fe45f30
 800bc70:	2e000000 	.word	0x2e000000
 800bc74:	3ba3198a 	.word	0x3ba3198a
 800bc78:	252049c1 	.word	0x252049c1
 800bc7c:	397b839a 	.word	0x397b839a
 800bc80:	3fe921fb 	.word	0x3fe921fb
 800bc84:	4002d97b 	.word	0x4002d97b
 800bc88:	3ff921fb 	.word	0x3ff921fb
 800bc8c:	413921fb 	.word	0x413921fb
 800bc90:	3fe00000 	.word	0x3fe00000
 800bc94:	0800cba0 	.word	0x0800cba0
 800bc98:	7fefffff 	.word	0x7fefffff
 800bc9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800bca0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800bca4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800bca8:	4630      	mov	r0, r6
 800bcaa:	460f      	mov	r7, r1
 800bcac:	f7f4 ff74 	bl	8000b98 <__aeabi_d2iz>
 800bcb0:	f7f4 fc58 	bl	8000564 <__aeabi_i2d>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	4630      	mov	r0, r6
 800bcba:	4639      	mov	r1, r7
 800bcbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcc0:	f7f4 fb02 	bl	80002c8 <__aeabi_dsub>
 800bcc4:	4b22      	ldr	r3, [pc, #136]	@ (800bd50 <__ieee754_rem_pio2+0x3f0>)
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f7f4 fcb6 	bl	8000638 <__aeabi_dmul>
 800bccc:	460f      	mov	r7, r1
 800bcce:	4606      	mov	r6, r0
 800bcd0:	f7f4 ff62 	bl	8000b98 <__aeabi_d2iz>
 800bcd4:	f7f4 fc46 	bl	8000564 <__aeabi_i2d>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	460b      	mov	r3, r1
 800bcdc:	4630      	mov	r0, r6
 800bcde:	4639      	mov	r1, r7
 800bce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bce4:	f7f4 faf0 	bl	80002c8 <__aeabi_dsub>
 800bce8:	4b19      	ldr	r3, [pc, #100]	@ (800bd50 <__ieee754_rem_pio2+0x3f0>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	f7f4 fca4 	bl	8000638 <__aeabi_dmul>
 800bcf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800bcf4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800bcf8:	f04f 0803 	mov.w	r8, #3
 800bcfc:	2600      	movs	r6, #0
 800bcfe:	2700      	movs	r7, #0
 800bd00:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	46c2      	mov	sl, r8
 800bd0a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd0e:	f7f4 fefb 	bl	8000b08 <__aeabi_dcmpeq>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	d1f4      	bne.n	800bd00 <__ieee754_rem_pio2+0x3a0>
 800bd16:	4b0f      	ldr	r3, [pc, #60]	@ (800bd54 <__ieee754_rem_pio2+0x3f4>)
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	2302      	movs	r3, #2
 800bd1c:	9300      	str	r3, [sp, #0]
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4653      	mov	r3, sl
 800bd22:	4621      	mov	r1, r4
 800bd24:	a806      	add	r0, sp, #24
 800bd26:	f000 f81f 	bl	800bd68 <__kernel_rem_pio2>
 800bd2a:	9b04      	ldr	r3, [sp, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	4605      	mov	r5, r0
 800bd30:	f6bf ae53 	bge.w	800b9da <__ieee754_rem_pio2+0x7a>
 800bd34:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bd38:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd3c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bd44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd48:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd4c:	e740      	b.n	800bbd0 <__ieee754_rem_pio2+0x270>
 800bd4e:	bf00      	nop
 800bd50:	41700000 	.word	0x41700000
 800bd54:	0800cc20 	.word	0x0800cc20

0800bd58 <fabs>:
 800bd58:	ec51 0b10 	vmov	r0, r1, d0
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bd62:	ec43 2b10 	vmov	d0, r2, r3
 800bd66:	4770      	bx	lr

0800bd68 <__kernel_rem_pio2>:
 800bd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd6c:	ed2d 8b02 	vpush	{d8}
 800bd70:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800bd74:	f112 0f14 	cmn.w	r2, #20
 800bd78:	9306      	str	r3, [sp, #24]
 800bd7a:	9104      	str	r1, [sp, #16]
 800bd7c:	4bbe      	ldr	r3, [pc, #760]	@ (800c078 <__kernel_rem_pio2+0x310>)
 800bd7e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800bd80:	9008      	str	r0, [sp, #32]
 800bd82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd86:	9300      	str	r3, [sp, #0]
 800bd88:	9b06      	ldr	r3, [sp, #24]
 800bd8a:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd8e:	bfa8      	it	ge
 800bd90:	1ed4      	subge	r4, r2, #3
 800bd92:	9305      	str	r3, [sp, #20]
 800bd94:	bfb2      	itee	lt
 800bd96:	2400      	movlt	r4, #0
 800bd98:	2318      	movge	r3, #24
 800bd9a:	fb94 f4f3 	sdivge	r4, r4, r3
 800bd9e:	f06f 0317 	mvn.w	r3, #23
 800bda2:	fb04 3303 	mla	r3, r4, r3, r3
 800bda6:	eb03 0b02 	add.w	fp, r3, r2
 800bdaa:	9b00      	ldr	r3, [sp, #0]
 800bdac:	9a05      	ldr	r2, [sp, #20]
 800bdae:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800c068 <__kernel_rem_pio2+0x300>
 800bdb2:	eb03 0802 	add.w	r8, r3, r2
 800bdb6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800bdb8:	1aa7      	subs	r7, r4, r2
 800bdba:	ae20      	add	r6, sp, #128	@ 0x80
 800bdbc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	4545      	cmp	r5, r8
 800bdc4:	dd13      	ble.n	800bdee <__kernel_rem_pio2+0x86>
 800bdc6:	9b06      	ldr	r3, [sp, #24]
 800bdc8:	aa20      	add	r2, sp, #128	@ 0x80
 800bdca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bdce:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800bdd2:	f04f 0800 	mov.w	r8, #0
 800bdd6:	9b00      	ldr	r3, [sp, #0]
 800bdd8:	4598      	cmp	r8, r3
 800bdda:	dc31      	bgt.n	800be40 <__kernel_rem_pio2+0xd8>
 800bddc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800c068 <__kernel_rem_pio2+0x300>
 800bde0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bde4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bde8:	462f      	mov	r7, r5
 800bdea:	2600      	movs	r6, #0
 800bdec:	e01b      	b.n	800be26 <__kernel_rem_pio2+0xbe>
 800bdee:	42ef      	cmn	r7, r5
 800bdf0:	d407      	bmi.n	800be02 <__kernel_rem_pio2+0x9a>
 800bdf2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bdf6:	f7f4 fbb5 	bl	8000564 <__aeabi_i2d>
 800bdfa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bdfe:	3501      	adds	r5, #1
 800be00:	e7df      	b.n	800bdc2 <__kernel_rem_pio2+0x5a>
 800be02:	ec51 0b18 	vmov	r0, r1, d8
 800be06:	e7f8      	b.n	800bdfa <__kernel_rem_pio2+0x92>
 800be08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be0c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800be10:	f7f4 fc12 	bl	8000638 <__aeabi_dmul>
 800be14:	4602      	mov	r2, r0
 800be16:	460b      	mov	r3, r1
 800be18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be1c:	f7f4 fa56 	bl	80002cc <__adddf3>
 800be20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be24:	3601      	adds	r6, #1
 800be26:	9b05      	ldr	r3, [sp, #20]
 800be28:	429e      	cmp	r6, r3
 800be2a:	f1a7 0708 	sub.w	r7, r7, #8
 800be2e:	ddeb      	ble.n	800be08 <__kernel_rem_pio2+0xa0>
 800be30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be34:	f108 0801 	add.w	r8, r8, #1
 800be38:	ecaa 7b02 	vstmia	sl!, {d7}
 800be3c:	3508      	adds	r5, #8
 800be3e:	e7ca      	b.n	800bdd6 <__kernel_rem_pio2+0x6e>
 800be40:	9b00      	ldr	r3, [sp, #0]
 800be42:	f8dd 8000 	ldr.w	r8, [sp]
 800be46:	aa0c      	add	r2, sp, #48	@ 0x30
 800be48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800be4c:	930a      	str	r3, [sp, #40]	@ 0x28
 800be4e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800be50:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800be54:	9309      	str	r3, [sp, #36]	@ 0x24
 800be56:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800be5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be5c:	ab98      	add	r3, sp, #608	@ 0x260
 800be5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be62:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800be66:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be6a:	ac0c      	add	r4, sp, #48	@ 0x30
 800be6c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800be6e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800be72:	46a1      	mov	r9, r4
 800be74:	46c2      	mov	sl, r8
 800be76:	f1ba 0f00 	cmp.w	sl, #0
 800be7a:	f1a5 0508 	sub.w	r5, r5, #8
 800be7e:	dc77      	bgt.n	800bf70 <__kernel_rem_pio2+0x208>
 800be80:	4658      	mov	r0, fp
 800be82:	ed9d 0b02 	vldr	d0, [sp, #8]
 800be86:	f000 fac7 	bl	800c418 <scalbn>
 800be8a:	ec57 6b10 	vmov	r6, r7, d0
 800be8e:	2200      	movs	r2, #0
 800be90:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800be94:	4630      	mov	r0, r6
 800be96:	4639      	mov	r1, r7
 800be98:	f7f4 fbce 	bl	8000638 <__aeabi_dmul>
 800be9c:	ec41 0b10 	vmov	d0, r0, r1
 800bea0:	f000 fb3a 	bl	800c518 <floor>
 800bea4:	4b75      	ldr	r3, [pc, #468]	@ (800c07c <__kernel_rem_pio2+0x314>)
 800bea6:	ec51 0b10 	vmov	r0, r1, d0
 800beaa:	2200      	movs	r2, #0
 800beac:	f7f4 fbc4 	bl	8000638 <__aeabi_dmul>
 800beb0:	4602      	mov	r2, r0
 800beb2:	460b      	mov	r3, r1
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fa06 	bl	80002c8 <__aeabi_dsub>
 800bebc:	460f      	mov	r7, r1
 800bebe:	4606      	mov	r6, r0
 800bec0:	f7f4 fe6a 	bl	8000b98 <__aeabi_d2iz>
 800bec4:	9002      	str	r0, [sp, #8]
 800bec6:	f7f4 fb4d 	bl	8000564 <__aeabi_i2d>
 800beca:	4602      	mov	r2, r0
 800becc:	460b      	mov	r3, r1
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 f9f9 	bl	80002c8 <__aeabi_dsub>
 800bed6:	f1bb 0f00 	cmp.w	fp, #0
 800beda:	4606      	mov	r6, r0
 800bedc:	460f      	mov	r7, r1
 800bede:	dd6c      	ble.n	800bfba <__kernel_rem_pio2+0x252>
 800bee0:	f108 31ff 	add.w	r1, r8, #4294967295
 800bee4:	ab0c      	add	r3, sp, #48	@ 0x30
 800bee6:	9d02      	ldr	r5, [sp, #8]
 800bee8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800beec:	f1cb 0018 	rsb	r0, fp, #24
 800bef0:	fa43 f200 	asr.w	r2, r3, r0
 800bef4:	4415      	add	r5, r2
 800bef6:	4082      	lsls	r2, r0
 800bef8:	1a9b      	subs	r3, r3, r2
 800befa:	aa0c      	add	r2, sp, #48	@ 0x30
 800befc:	9502      	str	r5, [sp, #8]
 800befe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bf02:	f1cb 0217 	rsb	r2, fp, #23
 800bf06:	fa43 f902 	asr.w	r9, r3, r2
 800bf0a:	f1b9 0f00 	cmp.w	r9, #0
 800bf0e:	dd64      	ble.n	800bfda <__kernel_rem_pio2+0x272>
 800bf10:	9b02      	ldr	r3, [sp, #8]
 800bf12:	2200      	movs	r2, #0
 800bf14:	3301      	adds	r3, #1
 800bf16:	9302      	str	r3, [sp, #8]
 800bf18:	4615      	mov	r5, r2
 800bf1a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bf1e:	4590      	cmp	r8, r2
 800bf20:	f300 80b8 	bgt.w	800c094 <__kernel_rem_pio2+0x32c>
 800bf24:	f1bb 0f00 	cmp.w	fp, #0
 800bf28:	dd07      	ble.n	800bf3a <__kernel_rem_pio2+0x1d2>
 800bf2a:	f1bb 0f01 	cmp.w	fp, #1
 800bf2e:	f000 80bf 	beq.w	800c0b0 <__kernel_rem_pio2+0x348>
 800bf32:	f1bb 0f02 	cmp.w	fp, #2
 800bf36:	f000 80c6 	beq.w	800c0c6 <__kernel_rem_pio2+0x35e>
 800bf3a:	f1b9 0f02 	cmp.w	r9, #2
 800bf3e:	d14c      	bne.n	800bfda <__kernel_rem_pio2+0x272>
 800bf40:	4632      	mov	r2, r6
 800bf42:	463b      	mov	r3, r7
 800bf44:	494e      	ldr	r1, [pc, #312]	@ (800c080 <__kernel_rem_pio2+0x318>)
 800bf46:	2000      	movs	r0, #0
 800bf48:	f7f4 f9be 	bl	80002c8 <__aeabi_dsub>
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	460f      	mov	r7, r1
 800bf50:	2d00      	cmp	r5, #0
 800bf52:	d042      	beq.n	800bfda <__kernel_rem_pio2+0x272>
 800bf54:	4658      	mov	r0, fp
 800bf56:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800c070 <__kernel_rem_pio2+0x308>
 800bf5a:	f000 fa5d 	bl	800c418 <scalbn>
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	ec53 2b10 	vmov	r2, r3, d0
 800bf66:	f7f4 f9af 	bl	80002c8 <__aeabi_dsub>
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	460f      	mov	r7, r1
 800bf6e:	e034      	b.n	800bfda <__kernel_rem_pio2+0x272>
 800bf70:	4b44      	ldr	r3, [pc, #272]	@ (800c084 <__kernel_rem_pio2+0x31c>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf78:	f7f4 fb5e 	bl	8000638 <__aeabi_dmul>
 800bf7c:	f7f4 fe0c 	bl	8000b98 <__aeabi_d2iz>
 800bf80:	f7f4 faf0 	bl	8000564 <__aeabi_i2d>
 800bf84:	4b40      	ldr	r3, [pc, #256]	@ (800c088 <__kernel_rem_pio2+0x320>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	4606      	mov	r6, r0
 800bf8a:	460f      	mov	r7, r1
 800bf8c:	f7f4 fb54 	bl	8000638 <__aeabi_dmul>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf98:	f7f4 f996 	bl	80002c8 <__aeabi_dsub>
 800bf9c:	f7f4 fdfc 	bl	8000b98 <__aeabi_d2iz>
 800bfa0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bfa4:	f849 0b04 	str.w	r0, [r9], #4
 800bfa8:	4639      	mov	r1, r7
 800bfaa:	4630      	mov	r0, r6
 800bfac:	f7f4 f98e 	bl	80002cc <__adddf3>
 800bfb0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bfb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfb8:	e75d      	b.n	800be76 <__kernel_rem_pio2+0x10e>
 800bfba:	d107      	bne.n	800bfcc <__kernel_rem_pio2+0x264>
 800bfbc:	f108 33ff 	add.w	r3, r8, #4294967295
 800bfc0:	aa0c      	add	r2, sp, #48	@ 0x30
 800bfc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bfca:	e79e      	b.n	800bf0a <__kernel_rem_pio2+0x1a2>
 800bfcc:	4b2f      	ldr	r3, [pc, #188]	@ (800c08c <__kernel_rem_pio2+0x324>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f7f4 fdb8 	bl	8000b44 <__aeabi_dcmpge>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d143      	bne.n	800c060 <__kernel_rem_pio2+0x2f8>
 800bfd8:	4681      	mov	r9, r0
 800bfda:	2200      	movs	r2, #0
 800bfdc:	2300      	movs	r3, #0
 800bfde:	4630      	mov	r0, r6
 800bfe0:	4639      	mov	r1, r7
 800bfe2:	f7f4 fd91 	bl	8000b08 <__aeabi_dcmpeq>
 800bfe6:	2800      	cmp	r0, #0
 800bfe8:	f000 80bf 	beq.w	800c16a <__kernel_rem_pio2+0x402>
 800bfec:	f108 33ff 	add.w	r3, r8, #4294967295
 800bff0:	2200      	movs	r2, #0
 800bff2:	9900      	ldr	r1, [sp, #0]
 800bff4:	428b      	cmp	r3, r1
 800bff6:	da6e      	bge.n	800c0d6 <__kernel_rem_pio2+0x36e>
 800bff8:	2a00      	cmp	r2, #0
 800bffa:	f000 8089 	beq.w	800c110 <__kernel_rem_pio2+0x3a8>
 800bffe:	f108 38ff 	add.w	r8, r8, #4294967295
 800c002:	ab0c      	add	r3, sp, #48	@ 0x30
 800c004:	f1ab 0b18 	sub.w	fp, fp, #24
 800c008:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0f6      	beq.n	800bffe <__kernel_rem_pio2+0x296>
 800c010:	4658      	mov	r0, fp
 800c012:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800c070 <__kernel_rem_pio2+0x308>
 800c016:	f000 f9ff 	bl	800c418 <scalbn>
 800c01a:	f108 0301 	add.w	r3, r8, #1
 800c01e:	00da      	lsls	r2, r3, #3
 800c020:	9205      	str	r2, [sp, #20]
 800c022:	ec55 4b10 	vmov	r4, r5, d0
 800c026:	aa70      	add	r2, sp, #448	@ 0x1c0
 800c028:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800c084 <__kernel_rem_pio2+0x31c>
 800c02c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800c030:	4646      	mov	r6, r8
 800c032:	f04f 0a00 	mov.w	sl, #0
 800c036:	2e00      	cmp	r6, #0
 800c038:	f280 80cf 	bge.w	800c1da <__kernel_rem_pio2+0x472>
 800c03c:	4644      	mov	r4, r8
 800c03e:	2c00      	cmp	r4, #0
 800c040:	f2c0 80fd 	blt.w	800c23e <__kernel_rem_pio2+0x4d6>
 800c044:	4b12      	ldr	r3, [pc, #72]	@ (800c090 <__kernel_rem_pio2+0x328>)
 800c046:	461f      	mov	r7, r3
 800c048:	ab70      	add	r3, sp, #448	@ 0x1c0
 800c04a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c04e:	9306      	str	r3, [sp, #24]
 800c050:	f04f 0a00 	mov.w	sl, #0
 800c054:	f04f 0b00 	mov.w	fp, #0
 800c058:	2600      	movs	r6, #0
 800c05a:	eba8 0504 	sub.w	r5, r8, r4
 800c05e:	e0e2      	b.n	800c226 <__kernel_rem_pio2+0x4be>
 800c060:	f04f 0902 	mov.w	r9, #2
 800c064:	e754      	b.n	800bf10 <__kernel_rem_pio2+0x1a8>
 800c066:	bf00      	nop
	...
 800c074:	3ff00000 	.word	0x3ff00000
 800c078:	0800cd68 	.word	0x0800cd68
 800c07c:	40200000 	.word	0x40200000
 800c080:	3ff00000 	.word	0x3ff00000
 800c084:	3e700000 	.word	0x3e700000
 800c088:	41700000 	.word	0x41700000
 800c08c:	3fe00000 	.word	0x3fe00000
 800c090:	0800cd28 	.word	0x0800cd28
 800c094:	f854 3b04 	ldr.w	r3, [r4], #4
 800c098:	b945      	cbnz	r5, 800c0ac <__kernel_rem_pio2+0x344>
 800c09a:	b123      	cbz	r3, 800c0a6 <__kernel_rem_pio2+0x33e>
 800c09c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800c0a0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	3201      	adds	r2, #1
 800c0a8:	461d      	mov	r5, r3
 800c0aa:	e738      	b.n	800bf1e <__kernel_rem_pio2+0x1b6>
 800c0ac:	1acb      	subs	r3, r1, r3
 800c0ae:	e7f7      	b.n	800c0a0 <__kernel_rem_pio2+0x338>
 800c0b0:	f108 32ff 	add.w	r2, r8, #4294967295
 800c0b4:	ab0c      	add	r3, sp, #48	@ 0x30
 800c0b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ba:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c0be:	a90c      	add	r1, sp, #48	@ 0x30
 800c0c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c0c4:	e739      	b.n	800bf3a <__kernel_rem_pio2+0x1d2>
 800c0c6:	f108 32ff 	add.w	r2, r8, #4294967295
 800c0ca:	ab0c      	add	r3, sp, #48	@ 0x30
 800c0cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c0d4:	e7f3      	b.n	800c0be <__kernel_rem_pio2+0x356>
 800c0d6:	a90c      	add	r1, sp, #48	@ 0x30
 800c0d8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c0dc:	3b01      	subs	r3, #1
 800c0de:	430a      	orrs	r2, r1
 800c0e0:	e787      	b.n	800bff2 <__kernel_rem_pio2+0x28a>
 800c0e2:	3401      	adds	r4, #1
 800c0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0e8:	2a00      	cmp	r2, #0
 800c0ea:	d0fa      	beq.n	800c0e2 <__kernel_rem_pio2+0x37a>
 800c0ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c0f2:	eb0d 0503 	add.w	r5, sp, r3
 800c0f6:	9b06      	ldr	r3, [sp, #24]
 800c0f8:	aa20      	add	r2, sp, #128	@ 0x80
 800c0fa:	4443      	add	r3, r8
 800c0fc:	f108 0701 	add.w	r7, r8, #1
 800c100:	3d98      	subs	r5, #152	@ 0x98
 800c102:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800c106:	4444      	add	r4, r8
 800c108:	42bc      	cmp	r4, r7
 800c10a:	da04      	bge.n	800c116 <__kernel_rem_pio2+0x3ae>
 800c10c:	46a0      	mov	r8, r4
 800c10e:	e6a2      	b.n	800be56 <__kernel_rem_pio2+0xee>
 800c110:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c112:	2401      	movs	r4, #1
 800c114:	e7e6      	b.n	800c0e4 <__kernel_rem_pio2+0x37c>
 800c116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c118:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800c11c:	f7f4 fa22 	bl	8000564 <__aeabi_i2d>
 800c120:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800c3e8 <__kernel_rem_pio2+0x680>
 800c124:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c128:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c12c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c130:	46b2      	mov	sl, r6
 800c132:	f04f 0800 	mov.w	r8, #0
 800c136:	9b05      	ldr	r3, [sp, #20]
 800c138:	4598      	cmp	r8, r3
 800c13a:	dd05      	ble.n	800c148 <__kernel_rem_pio2+0x3e0>
 800c13c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c140:	3701      	adds	r7, #1
 800c142:	eca5 7b02 	vstmia	r5!, {d7}
 800c146:	e7df      	b.n	800c108 <__kernel_rem_pio2+0x3a0>
 800c148:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800c14c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c150:	f7f4 fa72 	bl	8000638 <__aeabi_dmul>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c15c:	f7f4 f8b6 	bl	80002cc <__adddf3>
 800c160:	f108 0801 	add.w	r8, r8, #1
 800c164:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c168:	e7e5      	b.n	800c136 <__kernel_rem_pio2+0x3ce>
 800c16a:	f1cb 0000 	rsb	r0, fp, #0
 800c16e:	ec47 6b10 	vmov	d0, r6, r7
 800c172:	f000 f951 	bl	800c418 <scalbn>
 800c176:	ec55 4b10 	vmov	r4, r5, d0
 800c17a:	4b9d      	ldr	r3, [pc, #628]	@ (800c3f0 <__kernel_rem_pio2+0x688>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 fcdf 	bl	8000b44 <__aeabi_dcmpge>
 800c186:	b300      	cbz	r0, 800c1ca <__kernel_rem_pio2+0x462>
 800c188:	4b9a      	ldr	r3, [pc, #616]	@ (800c3f4 <__kernel_rem_pio2+0x68c>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	4620      	mov	r0, r4
 800c18e:	4629      	mov	r1, r5
 800c190:	f7f4 fa52 	bl	8000638 <__aeabi_dmul>
 800c194:	f7f4 fd00 	bl	8000b98 <__aeabi_d2iz>
 800c198:	4606      	mov	r6, r0
 800c19a:	f7f4 f9e3 	bl	8000564 <__aeabi_i2d>
 800c19e:	4b94      	ldr	r3, [pc, #592]	@ (800c3f0 <__kernel_rem_pio2+0x688>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f7f4 fa49 	bl	8000638 <__aeabi_dmul>
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f7f4 f88b 	bl	80002c8 <__aeabi_dsub>
 800c1b2:	f7f4 fcf1 	bl	8000b98 <__aeabi_d2iz>
 800c1b6:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1b8:	f10b 0b18 	add.w	fp, fp, #24
 800c1bc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c1c0:	f108 0801 	add.w	r8, r8, #1
 800c1c4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800c1c8:	e722      	b.n	800c010 <__kernel_rem_pio2+0x2a8>
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	f7f4 fce3 	bl	8000b98 <__aeabi_d2iz>
 800c1d2:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1d4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800c1d8:	e71a      	b.n	800c010 <__kernel_rem_pio2+0x2a8>
 800c1da:	ab0c      	add	r3, sp, #48	@ 0x30
 800c1dc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1e0:	f7f4 f9c0 	bl	8000564 <__aeabi_i2d>
 800c1e4:	4622      	mov	r2, r4
 800c1e6:	462b      	mov	r3, r5
 800c1e8:	f7f4 fa26 	bl	8000638 <__aeabi_dmul>
 800c1ec:	4652      	mov	r2, sl
 800c1ee:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800c1f2:	465b      	mov	r3, fp
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	f7f4 fa1e 	bl	8000638 <__aeabi_dmul>
 800c1fc:	3e01      	subs	r6, #1
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	e718      	b.n	800c036 <__kernel_rem_pio2+0x2ce>
 800c204:	9906      	ldr	r1, [sp, #24]
 800c206:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800c20a:	9106      	str	r1, [sp, #24]
 800c20c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800c210:	f7f4 fa12 	bl	8000638 <__aeabi_dmul>
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	4650      	mov	r0, sl
 800c21a:	4659      	mov	r1, fp
 800c21c:	f7f4 f856 	bl	80002cc <__adddf3>
 800c220:	3601      	adds	r6, #1
 800c222:	4682      	mov	sl, r0
 800c224:	468b      	mov	fp, r1
 800c226:	9b00      	ldr	r3, [sp, #0]
 800c228:	429e      	cmp	r6, r3
 800c22a:	dc01      	bgt.n	800c230 <__kernel_rem_pio2+0x4c8>
 800c22c:	42b5      	cmp	r5, r6
 800c22e:	dae9      	bge.n	800c204 <__kernel_rem_pio2+0x49c>
 800c230:	ab48      	add	r3, sp, #288	@ 0x120
 800c232:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c236:	e9c5 ab00 	strd	sl, fp, [r5]
 800c23a:	3c01      	subs	r4, #1
 800c23c:	e6ff      	b.n	800c03e <__kernel_rem_pio2+0x2d6>
 800c23e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c240:	2b02      	cmp	r3, #2
 800c242:	dc0b      	bgt.n	800c25c <__kernel_rem_pio2+0x4f4>
 800c244:	2b00      	cmp	r3, #0
 800c246:	dc39      	bgt.n	800c2bc <__kernel_rem_pio2+0x554>
 800c248:	d05d      	beq.n	800c306 <__kernel_rem_pio2+0x59e>
 800c24a:	9b02      	ldr	r3, [sp, #8]
 800c24c:	f003 0007 	and.w	r0, r3, #7
 800c250:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800c254:	ecbd 8b02 	vpop	{d8}
 800c258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c25c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800c25e:	2b03      	cmp	r3, #3
 800c260:	d1f3      	bne.n	800c24a <__kernel_rem_pio2+0x4e2>
 800c262:	9b05      	ldr	r3, [sp, #20]
 800c264:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c268:	eb0d 0403 	add.w	r4, sp, r3
 800c26c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800c270:	4625      	mov	r5, r4
 800c272:	46c2      	mov	sl, r8
 800c274:	f1ba 0f00 	cmp.w	sl, #0
 800c278:	f1a5 0508 	sub.w	r5, r5, #8
 800c27c:	dc6b      	bgt.n	800c356 <__kernel_rem_pio2+0x5ee>
 800c27e:	4645      	mov	r5, r8
 800c280:	2d01      	cmp	r5, #1
 800c282:	f1a4 0408 	sub.w	r4, r4, #8
 800c286:	f300 8087 	bgt.w	800c398 <__kernel_rem_pio2+0x630>
 800c28a:	9c05      	ldr	r4, [sp, #20]
 800c28c:	ab48      	add	r3, sp, #288	@ 0x120
 800c28e:	441c      	add	r4, r3
 800c290:	2000      	movs	r0, #0
 800c292:	2100      	movs	r1, #0
 800c294:	f1b8 0f01 	cmp.w	r8, #1
 800c298:	f300 809c 	bgt.w	800c3d4 <__kernel_rem_pio2+0x66c>
 800c29c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800c2a0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800c2a4:	f1b9 0f00 	cmp.w	r9, #0
 800c2a8:	f040 80a6 	bne.w	800c3f8 <__kernel_rem_pio2+0x690>
 800c2ac:	9b04      	ldr	r3, [sp, #16]
 800c2ae:	e9c3 7800 	strd	r7, r8, [r3]
 800c2b2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800c2b6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c2ba:	e7c6      	b.n	800c24a <__kernel_rem_pio2+0x4e2>
 800c2bc:	9d05      	ldr	r5, [sp, #20]
 800c2be:	ab48      	add	r3, sp, #288	@ 0x120
 800c2c0:	441d      	add	r5, r3
 800c2c2:	4644      	mov	r4, r8
 800c2c4:	2000      	movs	r0, #0
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	2c00      	cmp	r4, #0
 800c2ca:	da35      	bge.n	800c338 <__kernel_rem_pio2+0x5d0>
 800c2cc:	f1b9 0f00 	cmp.w	r9, #0
 800c2d0:	d038      	beq.n	800c344 <__kernel_rem_pio2+0x5dc>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2d8:	9c04      	ldr	r4, [sp, #16]
 800c2da:	e9c4 2300 	strd	r2, r3, [r4]
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800c2e6:	f7f3 ffef 	bl	80002c8 <__aeabi_dsub>
 800c2ea:	ad4a      	add	r5, sp, #296	@ 0x128
 800c2ec:	2401      	movs	r4, #1
 800c2ee:	45a0      	cmp	r8, r4
 800c2f0:	da2b      	bge.n	800c34a <__kernel_rem_pio2+0x5e2>
 800c2f2:	f1b9 0f00 	cmp.w	r9, #0
 800c2f6:	d002      	beq.n	800c2fe <__kernel_rem_pio2+0x596>
 800c2f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	9b04      	ldr	r3, [sp, #16]
 800c300:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c304:	e7a1      	b.n	800c24a <__kernel_rem_pio2+0x4e2>
 800c306:	9c05      	ldr	r4, [sp, #20]
 800c308:	ab48      	add	r3, sp, #288	@ 0x120
 800c30a:	441c      	add	r4, r3
 800c30c:	2000      	movs	r0, #0
 800c30e:	2100      	movs	r1, #0
 800c310:	f1b8 0f00 	cmp.w	r8, #0
 800c314:	da09      	bge.n	800c32a <__kernel_rem_pio2+0x5c2>
 800c316:	f1b9 0f00 	cmp.w	r9, #0
 800c31a:	d002      	beq.n	800c322 <__kernel_rem_pio2+0x5ba>
 800c31c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c320:	4619      	mov	r1, r3
 800c322:	9b04      	ldr	r3, [sp, #16]
 800c324:	e9c3 0100 	strd	r0, r1, [r3]
 800c328:	e78f      	b.n	800c24a <__kernel_rem_pio2+0x4e2>
 800c32a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c32e:	f7f3 ffcd 	bl	80002cc <__adddf3>
 800c332:	f108 38ff 	add.w	r8, r8, #4294967295
 800c336:	e7eb      	b.n	800c310 <__kernel_rem_pio2+0x5a8>
 800c338:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800c33c:	f7f3 ffc6 	bl	80002cc <__adddf3>
 800c340:	3c01      	subs	r4, #1
 800c342:	e7c1      	b.n	800c2c8 <__kernel_rem_pio2+0x560>
 800c344:	4602      	mov	r2, r0
 800c346:	460b      	mov	r3, r1
 800c348:	e7c6      	b.n	800c2d8 <__kernel_rem_pio2+0x570>
 800c34a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800c34e:	f7f3 ffbd 	bl	80002cc <__adddf3>
 800c352:	3401      	adds	r4, #1
 800c354:	e7cb      	b.n	800c2ee <__kernel_rem_pio2+0x586>
 800c356:	ed95 7b00 	vldr	d7, [r5]
 800c35a:	ed8d 7b00 	vstr	d7, [sp]
 800c35e:	ed95 7b02 	vldr	d7, [r5, #8]
 800c362:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c366:	ec53 2b17 	vmov	r2, r3, d7
 800c36a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c36e:	f7f3 ffad 	bl	80002cc <__adddf3>
 800c372:	4602      	mov	r2, r0
 800c374:	460b      	mov	r3, r1
 800c376:	4606      	mov	r6, r0
 800c378:	460f      	mov	r7, r1
 800c37a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c37e:	f7f3 ffa3 	bl	80002c8 <__aeabi_dsub>
 800c382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c386:	f7f3 ffa1 	bl	80002cc <__adddf3>
 800c38a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c38e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800c392:	e9c5 6700 	strd	r6, r7, [r5]
 800c396:	e76d      	b.n	800c274 <__kernel_rem_pio2+0x50c>
 800c398:	ed94 7b00 	vldr	d7, [r4]
 800c39c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800c3a0:	ec51 0b17 	vmov	r0, r1, d7
 800c3a4:	4652      	mov	r2, sl
 800c3a6:	465b      	mov	r3, fp
 800c3a8:	ed8d 7b00 	vstr	d7, [sp]
 800c3ac:	f7f3 ff8e 	bl	80002cc <__adddf3>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4606      	mov	r6, r0
 800c3b6:	460f      	mov	r7, r1
 800c3b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3bc:	f7f3 ff84 	bl	80002c8 <__aeabi_dsub>
 800c3c0:	4652      	mov	r2, sl
 800c3c2:	465b      	mov	r3, fp
 800c3c4:	f7f3 ff82 	bl	80002cc <__adddf3>
 800c3c8:	3d01      	subs	r5, #1
 800c3ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c3ce:	e9c4 6700 	strd	r6, r7, [r4]
 800c3d2:	e755      	b.n	800c280 <__kernel_rem_pio2+0x518>
 800c3d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c3d8:	f7f3 ff78 	bl	80002cc <__adddf3>
 800c3dc:	f108 38ff 	add.w	r8, r8, #4294967295
 800c3e0:	e758      	b.n	800c294 <__kernel_rem_pio2+0x52c>
 800c3e2:	bf00      	nop
 800c3e4:	f3af 8000 	nop.w
	...
 800c3f0:	41700000 	.word	0x41700000
 800c3f4:	3e700000 	.word	0x3e700000
 800c3f8:	9b04      	ldr	r3, [sp, #16]
 800c3fa:	9a04      	ldr	r2, [sp, #16]
 800c3fc:	601f      	str	r7, [r3, #0]
 800c3fe:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800c402:	605c      	str	r4, [r3, #4]
 800c404:	609d      	str	r5, [r3, #8]
 800c406:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c40a:	60d3      	str	r3, [r2, #12]
 800c40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c410:	6110      	str	r0, [r2, #16]
 800c412:	6153      	str	r3, [r2, #20]
 800c414:	e719      	b.n	800c24a <__kernel_rem_pio2+0x4e2>
 800c416:	bf00      	nop

0800c418 <scalbn>:
 800c418:	b570      	push	{r4, r5, r6, lr}
 800c41a:	ec55 4b10 	vmov	r4, r5, d0
 800c41e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c422:	4606      	mov	r6, r0
 800c424:	462b      	mov	r3, r5
 800c426:	b991      	cbnz	r1, 800c44e <scalbn+0x36>
 800c428:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c42c:	4323      	orrs	r3, r4
 800c42e:	d03d      	beq.n	800c4ac <scalbn+0x94>
 800c430:	4b35      	ldr	r3, [pc, #212]	@ (800c508 <scalbn+0xf0>)
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	2200      	movs	r2, #0
 800c438:	f7f4 f8fe 	bl	8000638 <__aeabi_dmul>
 800c43c:	4b33      	ldr	r3, [pc, #204]	@ (800c50c <scalbn+0xf4>)
 800c43e:	429e      	cmp	r6, r3
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	da0f      	bge.n	800c466 <scalbn+0x4e>
 800c446:	a328      	add	r3, pc, #160	@ (adr r3, 800c4e8 <scalbn+0xd0>)
 800c448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c44c:	e01e      	b.n	800c48c <scalbn+0x74>
 800c44e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c452:	4291      	cmp	r1, r2
 800c454:	d10b      	bne.n	800c46e <scalbn+0x56>
 800c456:	4622      	mov	r2, r4
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f3 ff36 	bl	80002cc <__adddf3>
 800c460:	4604      	mov	r4, r0
 800c462:	460d      	mov	r5, r1
 800c464:	e022      	b.n	800c4ac <scalbn+0x94>
 800c466:	460b      	mov	r3, r1
 800c468:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c46c:	3936      	subs	r1, #54	@ 0x36
 800c46e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c472:	4296      	cmp	r6, r2
 800c474:	dd0d      	ble.n	800c492 <scalbn+0x7a>
 800c476:	2d00      	cmp	r5, #0
 800c478:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4f0 <scalbn+0xd8>)
 800c47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c47e:	da02      	bge.n	800c486 <scalbn+0x6e>
 800c480:	a11d      	add	r1, pc, #116	@ (adr r1, 800c4f8 <scalbn+0xe0>)
 800c482:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c486:	a31a      	add	r3, pc, #104	@ (adr r3, 800c4f0 <scalbn+0xd8>)
 800c488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48c:	f7f4 f8d4 	bl	8000638 <__aeabi_dmul>
 800c490:	e7e6      	b.n	800c460 <scalbn+0x48>
 800c492:	1872      	adds	r2, r6, r1
 800c494:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c498:	428a      	cmp	r2, r1
 800c49a:	dcec      	bgt.n	800c476 <scalbn+0x5e>
 800c49c:	2a00      	cmp	r2, #0
 800c49e:	dd08      	ble.n	800c4b2 <scalbn+0x9a>
 800c4a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4ac:	ec45 4b10 	vmov	d0, r4, r5
 800c4b0:	bd70      	pop	{r4, r5, r6, pc}
 800c4b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c4b6:	da08      	bge.n	800c4ca <scalbn+0xb2>
 800c4b8:	2d00      	cmp	r5, #0
 800c4ba:	a10b      	add	r1, pc, #44	@ (adr r1, 800c4e8 <scalbn+0xd0>)
 800c4bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c0:	dac1      	bge.n	800c446 <scalbn+0x2e>
 800c4c2:	a10f      	add	r1, pc, #60	@ (adr r1, 800c500 <scalbn+0xe8>)
 800c4c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c8:	e7bd      	b.n	800c446 <scalbn+0x2e>
 800c4ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c4ce:	3236      	adds	r2, #54	@ 0x36
 800c4d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c4d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4d8:	4620      	mov	r0, r4
 800c4da:	4b0d      	ldr	r3, [pc, #52]	@ (800c510 <scalbn+0xf8>)
 800c4dc:	4629      	mov	r1, r5
 800c4de:	2200      	movs	r2, #0
 800c4e0:	e7d4      	b.n	800c48c <scalbn+0x74>
 800c4e2:	bf00      	nop
 800c4e4:	f3af 8000 	nop.w
 800c4e8:	c2f8f359 	.word	0xc2f8f359
 800c4ec:	01a56e1f 	.word	0x01a56e1f
 800c4f0:	8800759c 	.word	0x8800759c
 800c4f4:	7e37e43c 	.word	0x7e37e43c
 800c4f8:	8800759c 	.word	0x8800759c
 800c4fc:	fe37e43c 	.word	0xfe37e43c
 800c500:	c2f8f359 	.word	0xc2f8f359
 800c504:	81a56e1f 	.word	0x81a56e1f
 800c508:	43500000 	.word	0x43500000
 800c50c:	ffff3cb0 	.word	0xffff3cb0
 800c510:	3c900000 	.word	0x3c900000
 800c514:	00000000 	.word	0x00000000

0800c518 <floor>:
 800c518:	ec51 0b10 	vmov	r0, r1, d0
 800c51c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c528:	2e13      	cmp	r6, #19
 800c52a:	460c      	mov	r4, r1
 800c52c:	4605      	mov	r5, r0
 800c52e:	4680      	mov	r8, r0
 800c530:	dc34      	bgt.n	800c59c <floor+0x84>
 800c532:	2e00      	cmp	r6, #0
 800c534:	da17      	bge.n	800c566 <floor+0x4e>
 800c536:	a332      	add	r3, pc, #200	@ (adr r3, 800c600 <floor+0xe8>)
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f7f3 fec6 	bl	80002cc <__adddf3>
 800c540:	2200      	movs	r2, #0
 800c542:	2300      	movs	r3, #0
 800c544:	f7f4 fb08 	bl	8000b58 <__aeabi_dcmpgt>
 800c548:	b150      	cbz	r0, 800c560 <floor+0x48>
 800c54a:	2c00      	cmp	r4, #0
 800c54c:	da55      	bge.n	800c5fa <floor+0xe2>
 800c54e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c552:	432c      	orrs	r4, r5
 800c554:	2500      	movs	r5, #0
 800c556:	42ac      	cmp	r4, r5
 800c558:	4c2b      	ldr	r4, [pc, #172]	@ (800c608 <floor+0xf0>)
 800c55a:	bf08      	it	eq
 800c55c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c560:	4621      	mov	r1, r4
 800c562:	4628      	mov	r0, r5
 800c564:	e023      	b.n	800c5ae <floor+0x96>
 800c566:	4f29      	ldr	r7, [pc, #164]	@ (800c60c <floor+0xf4>)
 800c568:	4137      	asrs	r7, r6
 800c56a:	ea01 0307 	and.w	r3, r1, r7
 800c56e:	4303      	orrs	r3, r0
 800c570:	d01d      	beq.n	800c5ae <floor+0x96>
 800c572:	a323      	add	r3, pc, #140	@ (adr r3, 800c600 <floor+0xe8>)
 800c574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c578:	f7f3 fea8 	bl	80002cc <__adddf3>
 800c57c:	2200      	movs	r2, #0
 800c57e:	2300      	movs	r3, #0
 800c580:	f7f4 faea 	bl	8000b58 <__aeabi_dcmpgt>
 800c584:	2800      	cmp	r0, #0
 800c586:	d0eb      	beq.n	800c560 <floor+0x48>
 800c588:	2c00      	cmp	r4, #0
 800c58a:	bfbe      	ittt	lt
 800c58c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c590:	4133      	asrlt	r3, r6
 800c592:	18e4      	addlt	r4, r4, r3
 800c594:	ea24 0407 	bic.w	r4, r4, r7
 800c598:	2500      	movs	r5, #0
 800c59a:	e7e1      	b.n	800c560 <floor+0x48>
 800c59c:	2e33      	cmp	r6, #51	@ 0x33
 800c59e:	dd0a      	ble.n	800c5b6 <floor+0x9e>
 800c5a0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c5a4:	d103      	bne.n	800c5ae <floor+0x96>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	f7f3 fe8f 	bl	80002cc <__adddf3>
 800c5ae:	ec41 0b10 	vmov	d0, r0, r1
 800c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c5ba:	f04f 37ff 	mov.w	r7, #4294967295
 800c5be:	40df      	lsrs	r7, r3
 800c5c0:	4207      	tst	r7, r0
 800c5c2:	d0f4      	beq.n	800c5ae <floor+0x96>
 800c5c4:	a30e      	add	r3, pc, #56	@ (adr r3, 800c600 <floor+0xe8>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe7f 	bl	80002cc <__adddf3>
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	f7f4 fac1 	bl	8000b58 <__aeabi_dcmpgt>
 800c5d6:	2800      	cmp	r0, #0
 800c5d8:	d0c2      	beq.n	800c560 <floor+0x48>
 800c5da:	2c00      	cmp	r4, #0
 800c5dc:	da0a      	bge.n	800c5f4 <floor+0xdc>
 800c5de:	2e14      	cmp	r6, #20
 800c5e0:	d101      	bne.n	800c5e6 <floor+0xce>
 800c5e2:	3401      	adds	r4, #1
 800c5e4:	e006      	b.n	800c5f4 <floor+0xdc>
 800c5e6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	40b3      	lsls	r3, r6
 800c5ee:	441d      	add	r5, r3
 800c5f0:	4545      	cmp	r5, r8
 800c5f2:	d3f6      	bcc.n	800c5e2 <floor+0xca>
 800c5f4:	ea25 0507 	bic.w	r5, r5, r7
 800c5f8:	e7b2      	b.n	800c560 <floor+0x48>
 800c5fa:	2500      	movs	r5, #0
 800c5fc:	462c      	mov	r4, r5
 800c5fe:	e7af      	b.n	800c560 <floor+0x48>
 800c600:	8800759c 	.word	0x8800759c
 800c604:	7e37e43c 	.word	0x7e37e43c
 800c608:	bff00000 	.word	0xbff00000
 800c60c:	000fffff 	.word	0x000fffff

0800c610 <_init>:
 800c610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c612:	bf00      	nop
 800c614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c616:	bc08      	pop	{r3}
 800c618:	469e      	mov	lr, r3
 800c61a:	4770      	bx	lr

0800c61c <_fini>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	bf00      	nop
 800c620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c622:	bc08      	pop	{r3}
 800c624:	469e      	mov	lr, r3
 800c626:	4770      	bx	lr
